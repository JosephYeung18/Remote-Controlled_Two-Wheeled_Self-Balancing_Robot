
car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a40  08015a58  08015a58  00016a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017498  08017498  00019270  2**0
                  CONTENTS
  4 .ARM          00000008  08017498  08017498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080174a0  080174a0  00019270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080174a0  080174a0  000184a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080174a4  080174a4  000184a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  080174a8  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005344  20000270  08017718  00019270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200055b4  08017718  000195b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026431  00000000  00000000  000192a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b58  00000000  00000000  0003f6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fa0  00000000  00000000  00045230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000189a  00000000  00000000  000471d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020253  00000000  00000000  00048a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002abf3  00000000  00000000  00068cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0ff7  00000000  00000000  000938b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001448a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099d8  00000000  00000000  001448ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0014e2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000270 	.word	0x20000270
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015a3c 	.word	0x08015a3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000274 	.word	0x20000274
 80001dc:	08015a3c 	.word	0x08015a3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9eb 	b.w	8001090 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a0 	b.w	8001090 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	460c      	mov	r4, r1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d14e      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de0:	4694      	mov	ip, r2
 8000de2:	458c      	cmp	ip, r1
 8000de4:	4686      	mov	lr, r0
 8000de6:	fab2 f282 	clz	r2, r2
 8000dea:	d962      	bls.n	8000eb2 <__udivmoddi4+0xde>
 8000dec:	b14a      	cbz	r2, 8000e02 <__udivmoddi4+0x2e>
 8000dee:	f1c2 0320 	rsb	r3, r2, #32
 8000df2:	4091      	lsls	r1, r2
 8000df4:	fa20 f303 	lsr.w	r3, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	4319      	orrs	r1, r3
 8000dfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f f68c 	uxth.w	r6, ip
 8000e0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb07 1114 	mls	r1, r7, r4, r1
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb04 f106 	mul.w	r1, r4, r6
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e2a:	f080 8112 	bcs.w	8001052 <__udivmoddi4+0x27e>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 810f 	bls.w	8001052 <__udivmoddi4+0x27e>
 8000e34:	3c02      	subs	r4, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a59      	subs	r1, r3, r1
 8000e3a:	fa1f f38e 	uxth.w	r3, lr
 8000e3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e42:	fb07 1110 	mls	r1, r7, r0, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f606 	mul.w	r6, r0, r6
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x94>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e5a:	f080 80fc 	bcs.w	8001056 <__udivmoddi4+0x282>
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	f240 80f9 	bls.w	8001056 <__udivmoddi4+0x282>
 8000e64:	4463      	add	r3, ip
 8000e66:	3802      	subs	r0, #2
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e6e:	2100      	movs	r1, #0
 8000e70:	b11d      	cbz	r5, 8000e7a <__udivmoddi4+0xa6>
 8000e72:	40d3      	lsrs	r3, r2
 8000e74:	2200      	movs	r2, #0
 8000e76:	e9c5 3200 	strd	r3, r2, [r5]
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d905      	bls.n	8000e8e <__udivmoddi4+0xba>
 8000e82:	b10d      	cbz	r5, 8000e88 <__udivmoddi4+0xb4>
 8000e84:	e9c5 0100 	strd	r0, r1, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e7f5      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000e8e:	fab3 f183 	clz	r1, r3
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d146      	bne.n	8000f24 <__udivmoddi4+0x150>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d302      	bcc.n	8000ea0 <__udivmoddi4+0xcc>
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	f0c0 80f0 	bcc.w	8001080 <__udivmoddi4+0x2ac>
 8000ea0:	1a86      	subs	r6, r0, r2
 8000ea2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	2d00      	cmp	r5, #0
 8000eaa:	d0e6      	beq.n	8000e7a <__udivmoddi4+0xa6>
 8000eac:	e9c5 6300 	strd	r6, r3, [r5]
 8000eb0:	e7e3      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	f040 8090 	bne.w	8000fd8 <__udivmoddi4+0x204>
 8000eb8:	eba1 040c 	sub.w	r4, r1, ip
 8000ebc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec0:	fa1f f78c 	uxth.w	r7, ip
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ece:	fb08 4416 	mls	r4, r8, r6, r4
 8000ed2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ed6:	fb07 f006 	mul.w	r0, r7, r6
 8000eda:	4298      	cmp	r0, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x11c>
 8000ede:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x11a>
 8000ee8:	4298      	cmp	r0, r3
 8000eea:	f200 80cd 	bhi.w	8001088 <__udivmoddi4+0x2b4>
 8000eee:	4626      	mov	r6, r4
 8000ef0:	1a1c      	subs	r4, r3, r0
 8000ef2:	fa1f f38e 	uxth.w	r3, lr
 8000ef6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000efa:	fb08 4410 	mls	r4, r8, r0, r4
 8000efe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f02:	fb00 f707 	mul.w	r7, r0, r7
 8000f06:	429f      	cmp	r7, r3
 8000f08:	d908      	bls.n	8000f1c <__udivmoddi4+0x148>
 8000f0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f12:	d202      	bcs.n	8000f1a <__udivmoddi4+0x146>
 8000f14:	429f      	cmp	r7, r3
 8000f16:	f200 80b0 	bhi.w	800107a <__udivmoddi4+0x2a6>
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	1bdb      	subs	r3, r3, r7
 8000f1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f22:	e7a5      	b.n	8000e70 <__udivmoddi4+0x9c>
 8000f24:	f1c1 0620 	rsb	r6, r1, #32
 8000f28:	408b      	lsls	r3, r1
 8000f2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f34:	fa04 f301 	lsl.w	r3, r4, r1
 8000f38:	ea43 030c 	orr.w	r3, r3, ip
 8000f3c:	40f4      	lsrs	r4, r6
 8000f3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f42:	0c38      	lsrs	r0, r7, #16
 8000f44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f48:	fbb4 fef0 	udiv	lr, r4, r0
 8000f4c:	fa1f fc87 	uxth.w	ip, r7
 8000f50:	fb00 441e 	mls	r4, r0, lr, r4
 8000f54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f58:	fb0e f90c 	mul.w	r9, lr, ip
 8000f5c:	45a1      	cmp	r9, r4
 8000f5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f62:	d90a      	bls.n	8000f7a <__udivmoddi4+0x1a6>
 8000f64:	193c      	adds	r4, r7, r4
 8000f66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f6a:	f080 8084 	bcs.w	8001076 <__udivmoddi4+0x2a2>
 8000f6e:	45a1      	cmp	r9, r4
 8000f70:	f240 8081 	bls.w	8001076 <__udivmoddi4+0x2a2>
 8000f74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f78:	443c      	add	r4, r7
 8000f7a:	eba4 0409 	sub.w	r4, r4, r9
 8000f7e:	fa1f f983 	uxth.w	r9, r3
 8000f82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f86:	fb00 4413 	mls	r4, r0, r3, r4
 8000f8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f92:	45a4      	cmp	ip, r4
 8000f94:	d907      	bls.n	8000fa6 <__udivmoddi4+0x1d2>
 8000f96:	193c      	adds	r4, r7, r4
 8000f98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f9c:	d267      	bcs.n	800106e <__udivmoddi4+0x29a>
 8000f9e:	45a4      	cmp	ip, r4
 8000fa0:	d965      	bls.n	800106e <__udivmoddi4+0x29a>
 8000fa2:	3b02      	subs	r3, #2
 8000fa4:	443c      	add	r4, r7
 8000fa6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000faa:	fba0 9302 	umull	r9, r3, r0, r2
 8000fae:	eba4 040c 	sub.w	r4, r4, ip
 8000fb2:	429c      	cmp	r4, r3
 8000fb4:	46ce      	mov	lr, r9
 8000fb6:	469c      	mov	ip, r3
 8000fb8:	d351      	bcc.n	800105e <__udivmoddi4+0x28a>
 8000fba:	d04e      	beq.n	800105a <__udivmoddi4+0x286>
 8000fbc:	b155      	cbz	r5, 8000fd4 <__udivmoddi4+0x200>
 8000fbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000fc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fca:	40cb      	lsrs	r3, r1
 8000fcc:	431e      	orrs	r6, r3
 8000fce:	40cc      	lsrs	r4, r1
 8000fd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	e750      	b.n	8000e7a <__udivmoddi4+0xa6>
 8000fd8:	f1c2 0320 	rsb	r3, r2, #32
 8000fdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000fe0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fe8:	4094      	lsls	r4, r2
 8000fea:	430c      	orrs	r4, r1
 8000fec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ff0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ff4:	fa1f f78c 	uxth.w	r7, ip
 8000ff8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ffc:	fb08 3110 	mls	r1, r8, r0, r3
 8001000:	0c23      	lsrs	r3, r4, #16
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	fb00 f107 	mul.w	r1, r0, r7
 800100a:	4299      	cmp	r1, r3
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0x24c>
 800100e:	eb1c 0303 	adds.w	r3, ip, r3
 8001012:	f100 36ff 	add.w	r6, r0, #4294967295
 8001016:	d22c      	bcs.n	8001072 <__udivmoddi4+0x29e>
 8001018:	4299      	cmp	r1, r3
 800101a:	d92a      	bls.n	8001072 <__udivmoddi4+0x29e>
 800101c:	3802      	subs	r0, #2
 800101e:	4463      	add	r3, ip
 8001020:	1a5b      	subs	r3, r3, r1
 8001022:	b2a4      	uxth	r4, r4
 8001024:	fbb3 f1f8 	udiv	r1, r3, r8
 8001028:	fb08 3311 	mls	r3, r8, r1, r3
 800102c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001030:	fb01 f307 	mul.w	r3, r1, r7
 8001034:	42a3      	cmp	r3, r4
 8001036:	d908      	bls.n	800104a <__udivmoddi4+0x276>
 8001038:	eb1c 0404 	adds.w	r4, ip, r4
 800103c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001040:	d213      	bcs.n	800106a <__udivmoddi4+0x296>
 8001042:	42a3      	cmp	r3, r4
 8001044:	d911      	bls.n	800106a <__udivmoddi4+0x296>
 8001046:	3902      	subs	r1, #2
 8001048:	4464      	add	r4, ip
 800104a:	1ae4      	subs	r4, r4, r3
 800104c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001050:	e739      	b.n	8000ec6 <__udivmoddi4+0xf2>
 8001052:	4604      	mov	r4, r0
 8001054:	e6f0      	b.n	8000e38 <__udivmoddi4+0x64>
 8001056:	4608      	mov	r0, r1
 8001058:	e706      	b.n	8000e68 <__udivmoddi4+0x94>
 800105a:	45c8      	cmp	r8, r9
 800105c:	d2ae      	bcs.n	8000fbc <__udivmoddi4+0x1e8>
 800105e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001062:	eb63 0c07 	sbc.w	ip, r3, r7
 8001066:	3801      	subs	r0, #1
 8001068:	e7a8      	b.n	8000fbc <__udivmoddi4+0x1e8>
 800106a:	4631      	mov	r1, r6
 800106c:	e7ed      	b.n	800104a <__udivmoddi4+0x276>
 800106e:	4603      	mov	r3, r0
 8001070:	e799      	b.n	8000fa6 <__udivmoddi4+0x1d2>
 8001072:	4630      	mov	r0, r6
 8001074:	e7d4      	b.n	8001020 <__udivmoddi4+0x24c>
 8001076:	46d6      	mov	lr, sl
 8001078:	e77f      	b.n	8000f7a <__udivmoddi4+0x1a6>
 800107a:	4463      	add	r3, ip
 800107c:	3802      	subs	r0, #2
 800107e:	e74d      	b.n	8000f1c <__udivmoddi4+0x148>
 8001080:	4606      	mov	r6, r0
 8001082:	4623      	mov	r3, r4
 8001084:	4608      	mov	r0, r1
 8001086:	e70f      	b.n	8000ea8 <__udivmoddi4+0xd4>
 8001088:	3e02      	subs	r6, #2
 800108a:	4463      	add	r3, ip
 800108c:	e730      	b.n	8000ef0 <__udivmoddi4+0x11c>
 800108e:	bf00      	nop

08001090 <__aeabi_idiv0>:
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	463b      	mov	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <MX_ADC1_Init+0x98>)
 80010a8:	4a21      	ldr	r2, [pc, #132]	@ (8001130 <MX_ADC1_Init+0x9c>)
 80010aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <MX_ADC1_Init+0x98>)
 80010ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <MX_ADC1_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_ADC1_Init+0x98>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_ADC1_Init+0x98>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <MX_ADC1_Init+0x98>)
 80010d6:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <MX_ADC1_Init+0xa0>)
 80010d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_ADC1_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_ADC1_Init+0x98>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_ADC1_Init+0x98>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f4:	480d      	ldr	r0, [pc, #52]	@ (800112c <MX_ADC1_Init+0x98>)
 80010f6:	f005 ff3f 	bl	8006f78 <HAL_ADC_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001100:	f000 fc62 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001104:	2304      	movs	r3, #4
 8001106:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001108:	2301      	movs	r3, #1
 800110a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800110c:	2301      	movs	r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_ADC1_Init+0x98>)
 8001116:	f006 f9ed 	bl	80074f4 <HAL_ADC_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001120:	f000 fc52 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000028c 	.word	0x2000028c
 8001130:	40012000 	.word	0x40012000
 8001134:	0f000001 	.word	0x0f000001

08001138 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a1b      	ldr	r2, [pc, #108]	@ (80011c4 <HAL_ADC_MspInit+0x8c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d12f      	bne.n	80011ba <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <HAL_ADC_MspInit+0x90>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a19      	ldr	r2, [pc, #100]	@ (80011c8 <HAL_ADC_MspInit+0x90>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <HAL_ADC_MspInit+0x90>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <HAL_ADC_MspInit+0x90>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <HAL_ADC_MspInit+0x90>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <HAL_ADC_MspInit+0x90>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001192:	2310      	movs	r3, #16
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4809      	ldr	r0, [pc, #36]	@ (80011cc <HAL_ADC_MspInit+0x94>)
 80011a6:	f007 f8cb 	bl	8008340 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2105      	movs	r1, #5
 80011ae:	2012      	movs	r0, #18
 80011b0:	f006 fc80 	bl	8007ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011b4:	2012      	movs	r0, #18
 80011b6:	f006 fc99 	bl	8007aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	@ 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40012000 	.word	0x40012000
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_DMA_Init+0x3c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <MX_DMA_Init+0x3c>)
 80011e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_DMA_Init+0x3c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2105      	movs	r1, #5
 80011f6:	2011      	movs	r0, #17
 80011f8:	f006 fc5c 	bl	8007ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011fc:	2011      	movs	r0, #17
 80011fe:	f006 fc75 	bl	8007aec <HAL_NVIC_EnableIRQ>

}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001214:	4a0c      	ldr	r2, [pc, #48]	@ (8001248 <MX_FREERTOS_Init+0x38>)
 8001216:	2100      	movs	r1, #0
 8001218:	480c      	ldr	r0, [pc, #48]	@ (800124c <MX_FREERTOS_Init+0x3c>)
 800121a:	f00c fd7b 	bl	800dd14 <osThreadNew>
 800121e:	4603      	mov	r3, r0
 8001220:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <MX_FREERTOS_Init+0x40>)
 8001222:	6013      	str	r3, [r2, #0]

  /* creation of myTaskOled */
  myTaskOledHandle = osThreadNew(StartTaskOled, NULL, &myTaskOled_attributes);
 8001224:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <MX_FREERTOS_Init+0x44>)
 8001226:	2100      	movs	r1, #0
 8001228:	480b      	ldr	r0, [pc, #44]	@ (8001258 <MX_FREERTOS_Init+0x48>)
 800122a:	f00c fd73 	bl	800dd14 <osThreadNew>
 800122e:	4603      	mov	r3, r0
 8001230:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <MX_FREERTOS_Init+0x4c>)
 8001232:	6013      	str	r3, [r2, #0]

  /* creation of myTaskCtrl */
  myTaskCtrlHandle = osThreadNew(StartTaskCtrl, NULL, &myTaskCtrl_attributes);
 8001234:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <MX_FREERTOS_Init+0x50>)
 8001236:	2100      	movs	r1, #0
 8001238:	480a      	ldr	r0, [pc, #40]	@ (8001264 <MX_FREERTOS_Init+0x54>)
 800123a:	f00c fd6b 	bl	800dd14 <osThreadNew>
 800123e:	4603      	mov	r3, r0
 8001240:	4a09      	ldr	r2, [pc, #36]	@ (8001268 <MX_FREERTOS_Init+0x58>)
 8001242:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	08015b1c 	.word	0x08015b1c
 800124c:	0800126d 	.word	0x0800126d
 8001250:	200002fc 	.word	0x200002fc
 8001254:	08015b40 	.word	0x08015b40
 8001258:	080012c9 	.word	0x080012c9
 800125c:	20000300 	.word	0x20000300
 8001260:	08015b64 	.word	0x08015b64
 8001264:	08001399 	.word	0x08001399
 8001268:	20000304 	.word	0x20000304

0800126c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  /* 获取超声波测距数据 */
	 GET_Distance();
 8001274:	f005 fe06 	bl	8006e84 <GET_Distance>
	 /* 启动ADC1转换，用于读取模式选择电位器值 */
	  HAL_ADC_Start(&hadc1);
 8001278:	4810      	ldr	r0, [pc, #64]	@ (80012bc <StartDefaultTask+0x50>)
 800127a:	f005 fec1 	bl	8007000 <HAL_ADC_Start>
	  /* 轮询ADC转换结果（超时100ms） */
	  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 800127e:	2164      	movs	r1, #100	@ 0x64
 8001280:	480e      	ldr	r0, [pc, #56]	@ (80012bc <StartDefaultTask+0x50>)
 8001282:	f005 ff71 	bl	8007168 <HAL_ADC_PollForConversion>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d112      	bne.n	80012b2 <StartDefaultTask+0x46>
		  adc = HAL_ADC_GetValue(&hadc1);
 800128c:	480b      	ldr	r0, [pc, #44]	@ (80012bc <StartDefaultTask+0x50>)
 800128e:	f006 f906 	bl	800749e <HAL_ADC_GetValue>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <StartDefaultTask+0x54>)
 8001298:	601a      	str	r2, [r3, #0]
		  /* 根据ADC值切换控制模式（阈值2000） */
		  if (adc < 2000) {
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <StartDefaultTask+0x54>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80012a2:	da03      	bge.n	80012ac <StartDefaultTask+0x40>
			  mode = 0; // 自平衡模式
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <StartDefaultTask+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e002      	b.n	80012b2 <StartDefaultTask+0x46>
		  } else {
			  mode = 1; // 遥控模式
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <StartDefaultTask+0x58>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
		  }
	  }
	 vTaskDelay(pdMS_TO_TICKS(10));
 80012b2:	200a      	movs	r0, #10
 80012b4:	f00d fd60 	bl	800ed78 <vTaskDelay>
	 GET_Distance();
 80012b8:	e7dc      	b.n	8001274 <StartDefaultTask+0x8>
 80012ba:	bf00      	nop
 80012bc:	2000028c 	.word	0x2000028c
 80012c0:	200002f8 	.word	0x200002f8
 80012c4:	200002f4 	.word	0x200002f4

080012c8 <StartTaskOled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskOled */
void StartTaskOled(void *argument)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  /* 显示左右编码器计数值（电机转速反馈） */
	  sprintf((char *)display_buf, "L:%d  R:%d   ", Encoder_Left, Encoder_Right);
 80012d0:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <StartTaskOled+0xa8>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b27      	ldr	r3, [pc, #156]	@ (8001374 <StartTaskOled+0xac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4927      	ldr	r1, [pc, #156]	@ (8001378 <StartTaskOled+0xb0>)
 80012da:	4828      	ldr	r0, [pc, #160]	@ (800137c <StartTaskOled+0xb4>)
 80012dc:	f010 f992 	bl	8011604 <siprintf>
	  OLED_ShowString(0, 0, display_buf, 16, 0);
 80012e0:	2300      	movs	r3, #0
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2310      	movs	r3, #16
 80012e6:	4a25      	ldr	r2, [pc, #148]	@ (800137c <StartTaskOled+0xb4>)
 80012e8:	2100      	movs	r1, #0
 80012ea:	2000      	movs	r0, #0
 80012ec:	f005 f9ee 	bl	80066cc <OLED_ShowString>
	  /* 显示姿态角：横滚角(roll) */
	  sprintf((char *)display_buf, "roll:%.1f   ", roll);
 80012f0:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <StartTaskOled+0xb8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f92f 	bl	8000558 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4921      	ldr	r1, [pc, #132]	@ (8001384 <StartTaskOled+0xbc>)
 8001300:	481e      	ldr	r0, [pc, #120]	@ (800137c <StartTaskOled+0xb4>)
 8001302:	f010 f97f 	bl	8011604 <siprintf>
	  OLED_ShowString(0, 2, display_buf, 16, 0);
 8001306:	2300      	movs	r3, #0
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2310      	movs	r3, #16
 800130c:	4a1b      	ldr	r2, [pc, #108]	@ (800137c <StartTaskOled+0xb4>)
 800130e:	2102      	movs	r1, #2
 8001310:	2000      	movs	r0, #0
 8001312:	f005 f9db 	bl	80066cc <OLED_ShowString>
	  /* 显示姿态角：偏航角(yaw) */
	  sprintf((char *)display_buf, "yaw:%.1f   ", yaw);
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <StartTaskOled+0xc0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f91c 	bl	8000558 <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4919      	ldr	r1, [pc, #100]	@ (800138c <StartTaskOled+0xc4>)
 8001326:	4815      	ldr	r0, [pc, #84]	@ (800137c <StartTaskOled+0xb4>)
 8001328:	f010 f96c 	bl	8011604 <siprintf>
	  OLED_ShowString(0, 4, display_buf, 16, 0);
 800132c:	2300      	movs	r3, #0
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2310      	movs	r3, #16
 8001332:	4a12      	ldr	r2, [pc, #72]	@ (800137c <StartTaskOled+0xb4>)
 8001334:	2104      	movs	r1, #4
 8001336:	2000      	movs	r0, #0
 8001338:	f005 f9c8 	bl	80066cc <OLED_ShowString>
	  /* 显示超声波测量距离 */
	  sprintf((char *)display_buf, "dist:%.1f   ", distance);
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <StartTaskOled+0xc8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f909 	bl	8000558 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4912      	ldr	r1, [pc, #72]	@ (8001394 <StartTaskOled+0xcc>)
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <StartTaskOled+0xb4>)
 800134e:	f010 f959 	bl	8011604 <siprintf>
	  OLED_ShowString(0, 6, display_buf, 16, 0);
 8001352:	2300      	movs	r3, #0
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2310      	movs	r3, #16
 8001358:	4a08      	ldr	r2, [pc, #32]	@ (800137c <StartTaskOled+0xb4>)
 800135a:	2106      	movs	r1, #6
 800135c:	2000      	movs	r0, #0
 800135e:	f005 f9b5 	bl	80066cc <OLED_ShowString>
	  /* 更新OLED显示内容 */
	  OLED_Refresh();
 8001362:	f005 f9e7 	bl	8006734 <OLED_Refresh>
	  /* 任务延时50ms，控制刷新频率 */
	  vTaskDelay(pdMS_TO_TICKS(50));
 8001366:	2032      	movs	r0, #50	@ 0x32
 8001368:	f00d fd06 	bl	800ed78 <vTaskDelay>
	  sprintf((char *)display_buf, "L:%d  R:%d   ", Encoder_Left, Encoder_Right);
 800136c:	bf00      	nop
 800136e:	e7af      	b.n	80012d0 <StartTaskOled+0x8>
 8001370:	2000061c 	.word	0x2000061c
 8001374:	20000620 	.word	0x20000620
 8001378:	08015a7c 	.word	0x08015a7c
 800137c:	200002d4 	.word	0x200002d4
 8001380:	20000634 	.word	0x20000634
 8001384:	08015a8c 	.word	0x08015a8c
 8001388:	2000063c 	.word	0x2000063c
 800138c:	08015a9c 	.word	0x08015a9c
 8001390:	200003c8 	.word	0x200003c8
 8001394:	08015aa8 	.word	0x08015aa8

08001398 <StartTaskCtrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCtrl */
void StartTaskCtrl(void *argument)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCtrl */
  /* Infinite loop */
  for(;;)
  {
	  if(stop_key == 0){
 80013a0:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <StartTaskCtrl+0x28>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <StartTaskCtrl+0x16>
		  Control();
 80013a8:	f005 face 	bl	8006948 <Control>
 80013ac:	e003      	b.n	80013b6 <StartTaskCtrl+0x1e>
	  }else{
		  Load(0, 0);
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f001 f977 	bl	80026a4 <Load>
	  }
	  vTaskDelay(pdMS_TO_TICKS(1));//延时1ms，控制函数执行频率1KHZ
 80013b6:	2001      	movs	r0, #1
 80013b8:	f00d fcde 	bl	800ed78 <vTaskDelay>
	  if(stop_key == 0){
 80013bc:	e7f0      	b.n	80013a0 <StartTaskCtrl+0x8>
 80013be:	bf00      	nop
 80013c0:	200003bc 	.word	0x200003bc

080013c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b4c      	ldr	r3, [pc, #304]	@ (8001510 <MX_GPIO_Init+0x14c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001510 <MX_GPIO_Init+0x14c>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b49      	ldr	r3, [pc, #292]	@ (8001510 <MX_GPIO_Init+0x14c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <MX_GPIO_Init+0x14c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a44      	ldr	r2, [pc, #272]	@ (8001510 <MX_GPIO_Init+0x14c>)
 8001400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <MX_GPIO_Init+0x14c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b3e      	ldr	r3, [pc, #248]	@ (8001510 <MX_GPIO_Init+0x14c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a3d      	ldr	r2, [pc, #244]	@ (8001510 <MX_GPIO_Init+0x14c>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <MX_GPIO_Init+0x14c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b37      	ldr	r3, [pc, #220]	@ (8001510 <MX_GPIO_Init+0x14c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a36      	ldr	r2, [pc, #216]	@ (8001510 <MX_GPIO_Init+0x14c>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <MX_GPIO_Init+0x14c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2108      	movs	r1, #8
 800144e:	4831      	ldr	r0, [pc, #196]	@ (8001514 <MX_GPIO_Init+0x150>)
 8001450:	f007 f912 	bl	8008678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	21e0      	movs	r1, #224	@ 0xe0
 8001458:	482f      	ldr	r0, [pc, #188]	@ (8001518 <MX_GPIO_Init+0x154>)
 800145a:	f007 f90d 	bl	8008678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC5 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_5;
 800145e:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001464:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4827      	ldr	r0, [pc, #156]	@ (8001514 <MX_GPIO_Init+0x150>)
 8001476:	f006 ff63 	bl	8008340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800147a:	2308      	movs	r3, #8
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4820      	ldr	r0, [pc, #128]	@ (8001514 <MX_GPIO_Init+0x150>)
 8001492:	f006 ff55 	bl	8008340 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001496:	2320      	movs	r3, #32
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	481a      	ldr	r0, [pc, #104]	@ (8001518 <MX_GPIO_Init+0x154>)
 80014ae:	f006 ff47 	bl	8008340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014b2:	23c0      	movs	r3, #192	@ 0xc0
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014b6:	2311      	movs	r3, #17
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4813      	ldr	r0, [pc, #76]	@ (8001518 <MX_GPIO_Init+0x154>)
 80014ca:	f006 ff39 	bl	8008340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014ce:	2310      	movs	r3, #16
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014d2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	480c      	ldr	r0, [pc, #48]	@ (8001514 <MX_GPIO_Init+0x150>)
 80014e4:	f006 ff2c 	bl	8008340 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2105      	movs	r1, #5
 80014ec:	200a      	movs	r0, #10
 80014ee:	f006 fae1 	bl	8007ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014f2:	200a      	movs	r0, #10
 80014f4:	f006 fafa 	bl	8007aec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2105      	movs	r1, #5
 80014fc:	2017      	movs	r0, #23
 80014fe:	f006 fad9 	bl	8007ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001502:	2017      	movs	r0, #23
 8001504:	f006 faf2 	bl	8007aec <HAL_NVIC_EnableIRQ>

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	40020800 	.word	0x40020800
 8001518:	40020000 	.word	0x40020000

0800151c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_I2C1_Init+0x50>)
 8001522:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <MX_I2C1_Init+0x54>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_I2C1_Init+0x50>)
 8001528:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <MX_I2C1_Init+0x58>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_I2C1_Init+0x50>)
 800153a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800153e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_I2C1_Init+0x50>)
 800155a:	f007 f8bf 	bl	80086dc <HAL_I2C_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 fa30 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000308 	.word	0x20000308
 8001570:	40005400 	.word	0x40005400
 8001574:	00061a80 	.word	0x00061a80

08001578 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a34      	ldr	r2, [pc, #208]	@ (8001668 <HAL_I2C_MspInit+0xf0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d162      	bne.n	8001660 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b33      	ldr	r3, [pc, #204]	@ (800166c <HAL_I2C_MspInit+0xf4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a32      	ldr	r2, [pc, #200]	@ (800166c <HAL_I2C_MspInit+0xf4>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b30      	ldr	r3, [pc, #192]	@ (800166c <HAL_I2C_MspInit+0xf4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015bc:	2312      	movs	r3, #18
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c8:	2304      	movs	r3, #4
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4827      	ldr	r0, [pc, #156]	@ (8001670 <HAL_I2C_MspInit+0xf8>)
 80015d4:	f006 feb4 	bl	8008340 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b23      	ldr	r3, [pc, #140]	@ (800166c <HAL_I2C_MspInit+0xf4>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e0:	4a22      	ldr	r2, [pc, #136]	@ (800166c <HAL_I2C_MspInit+0xf4>)
 80015e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e8:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_I2C_MspInit+0xf4>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 80015f6:	4a20      	ldr	r2, [pc, #128]	@ (8001678 <HAL_I2C_MspInit+0x100>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 80015fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001600:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 8001604:	2240      	movs	r2, #64	@ 0x40
 8001606:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 8001610:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001614:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001616:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161c:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001622:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001634:	480f      	ldr	r0, [pc, #60]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 8001636:	f006 fa67 	bl	8007b08 <HAL_DMA_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001640:	f000 f9c2 	bl	80019c8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 8001648:	635a      	str	r2, [r3, #52]	@ 0x34
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <HAL_I2C_MspInit+0xfc>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2105      	movs	r1, #5
 8001654:	201f      	movs	r0, #31
 8001656:	f006 fa2d 	bl	8007ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800165a:	201f      	movs	r0, #31
 800165c:	f006 fa46 	bl	8007aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001660:	bf00      	nop
 8001662:	3728      	adds	r7, #40	@ 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40005400 	.word	0x40005400
 800166c:	40023800 	.word	0x40023800
 8001670:	40020400 	.word	0x40020400
 8001674:	2000035c 	.word	0x2000035c
 8001678:	400260a0 	.word	0x400260a0

0800167c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001684:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001688:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001694:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001698:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800169c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00b      	beq.n	80016bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016a4:	e000      	b.n	80016a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f9      	beq.n	80016a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016b2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
ITM_SendChar(ch);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ffd1 	bl	800167c <ITM_SendChar>
return(ch);
 80016da:	687b      	ldr	r3, [r7, #4]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_write>:

int _write(int file, char *ptr, int len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++){ __io_putchar( *ptr++ );}
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e009      	b.n	800170a <_write+0x26>
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	60ba      	str	r2, [r7, #8]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffe3 	bl	80016ca <__io_putchar>
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	dbf1      	blt.n	80016f6 <_write+0x12>
return len;
 8001712:	687b      	ldr	r3, [r7, #4]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_I2C_MemTxCpltCallback>:


void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
	for(i = 0; i < OLED_WIDE; i++)
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e014      	b.n	8001754 <HAL_I2C_MemTxCpltCallback+0x38>
	{
		for(j = 0; j < OLED_LENGTH; j++)
 800172a:	2300      	movs	r3, #0
 800172c:	73bb      	strb	r3, [r7, #14]
 800172e:	e00a      	b.n	8001746 <HAL_I2C_MemTxCpltCallback+0x2a>
		{
			show_mem[i][j] = 0;
 8001730:	7bfa      	ldrb	r2, [r7, #15]
 8001732:	7bbb      	ldrb	r3, [r7, #14]
 8001734:	490d      	ldr	r1, [pc, #52]	@ (800176c <HAL_I2C_MemTxCpltCallback+0x50>)
 8001736:	01d2      	lsls	r2, r2, #7
 8001738:	440a      	add	r2, r1
 800173a:	4413      	add	r3, r2
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < OLED_LENGTH; j++)
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	3301      	adds	r3, #1
 8001744:	73bb      	strb	r3, [r7, #14]
 8001746:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800174a:	2b00      	cmp	r3, #0
 800174c:	daf0      	bge.n	8001730 <HAL_I2C_MemTxCpltCallback+0x14>
	for(i = 0; i < OLED_WIDE; i++)
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	3301      	adds	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	2b07      	cmp	r3, #7
 8001758:	d9e7      	bls.n	800172a <HAL_I2C_MemTxCpltCallback+0xe>
		}
	}
	refresh_flag = 0;
 800175a:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <HAL_I2C_MemTxCpltCallback+0x54>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	2000064c 	.word	0x2000064c
 8001770:	20000a4c 	.word	0x20000a4c
 8001774:	00000000 	.word	0x00000000

08001778 <HAL_GPIO_EXTI_Callback>:

uint16_t count;	//定时器计数
float distance; //超声波测距距离

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]


	if(GPIO_Pin==GPIO_PIN_4)
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	2b10      	cmp	r3, #16
 8001786:	d12d      	bne.n	80017e4 <HAL_GPIO_EXTI_Callback+0x6c>
		{
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)==GPIO_PIN_SET)
 8001788:	2110      	movs	r1, #16
 800178a:	4825      	ldr	r0, [pc, #148]	@ (8001820 <HAL_GPIO_EXTI_Callback+0xa8>)
 800178c:	f006 ff5c 	bl	8008648 <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_GPIO_EXTI_Callback+0x2e>
			{
				__HAL_TIM_SetCounter(&htim3,0);
 8001796:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <HAL_GPIO_EXTI_Callback+0xac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Base_Start(&htim3);
 800179e:	4821      	ldr	r0, [pc, #132]	@ (8001824 <HAL_GPIO_EXTI_Callback+0xac>)
 80017a0:	f009 ffa6 	bl	800b6f0 <HAL_TIM_Base_Start>
 80017a4:	e01b      	b.n	80017de <HAL_GPIO_EXTI_Callback+0x66>
			}
			else
			{
				HAL_TIM_Base_Stop(&htim3);
 80017a6:	481f      	ldr	r0, [pc, #124]	@ (8001824 <HAL_GPIO_EXTI_Callback+0xac>)
 80017a8:	f009 fffc 	bl	800b7a4 <HAL_TIM_Base_Stop>
				count=__HAL_TIM_GetCounter(&htim3);
 80017ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <HAL_GPIO_EXTI_Callback+0xac>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <HAL_GPIO_EXTI_Callback+0xb0>)
 80017b6:	801a      	strh	r2, [r3, #0]
				distance=count*0.017;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <HAL_GPIO_EXTI_Callback+0xb0>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe feb9 	bl	8000534 <__aeabi_i2d>
 80017c2:	a315      	add	r3, pc, #84	@ (adr r3, 8001818 <HAL_GPIO_EXTI_Callback+0xa0>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe ff1e 	bl	8000608 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff fa10 	bl	8000bf8 <__aeabi_d2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a14      	ldr	r2, [pc, #80]	@ (800182c <HAL_GPIO_EXTI_Callback+0xb4>)
 80017dc:	6013      	str	r3, [r2, #0]
			}
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <HAL_GPIO_EXTI_Callback+0xb8>)
 80017e0:	2210      	movs	r2, #16
 80017e2:	615a      	str	r2, [r3, #20]
		}

	if(GPIO_Pin==GPIO_PIN_5)
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	2b20      	cmp	r3, #32
 80017e8:	d10f      	bne.n	800180a <HAL_GPIO_EXTI_Callback+0x92>
	{
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_5)==GPIO_PIN_RESET)
 80017ea:	2120      	movs	r1, #32
 80017ec:	480c      	ldr	r0, [pc, #48]	@ (8001820 <HAL_GPIO_EXTI_Callback+0xa8>)
 80017ee:	f006 ff2b 	bl	8008648 <HAL_GPIO_ReadPin>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <HAL_GPIO_EXTI_Callback+0x8c>
		{
			stop_key ^= 1;		//急停按键标志位取反
 80017f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <HAL_GPIO_EXTI_Callback+0xbc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f083 0301 	eor.w	r3, r3, #1
 8001800:	4a0c      	ldr	r2, [pc, #48]	@ (8001834 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001802:	6013      	str	r3, [r2, #0]
		}
		 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001806:	2220      	movs	r2, #32
 8001808:	615a      	str	r2, [r3, #20]
	}
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	f3af 8000 	nop.w
 8001818:	b020c49c 	.word	0xb020c49c
 800181c:	3f916872 	.word	0x3f916872
 8001820:	40020800 	.word	0x40020800
 8001824:	200004b4 	.word	0x200004b4
 8001828:	200003c4 	.word	0x200003c4
 800182c:	200003c8 	.word	0x200003c8
 8001830:	40013c00 	.word	0x40013c00
 8001834:	200003bc 	.word	0x200003bc

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183c:	f005 fb36 	bl	8006eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001840:	f000 f846 	bl	80018d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001844:	f7ff fdbe 	bl	80013c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001848:	f7ff fcc2 	bl	80011d0 <MX_DMA_Init>
  MX_USART6_UART_Init();
 800184c:	f000 fe72 	bl	8002534 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001850:	f7ff fe64 	bl	800151c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001854:	f000 fb0a 	bl	8001e6c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001858:	f000 fb98 	bl	8001f8c <MX_TIM2_Init>
  MX_TIM4_Init();
 800185c:	f000 fc38 	bl	80020d0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001860:	f000 fbe8 	bl	8002034 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001864:	f7ff fc16 	bl	8001094 <MX_ADC1_Init>
  MX_TIM9_Init();
 8001868:	f000 fcd4 	bl	8002214 <MX_TIM9_Init>
  MX_TIM5_Init();
 800186c:	f000 fc84 	bl	8002178 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Load(0, 0);
 8001870:	2100      	movs	r1, #0
 8001872:	2000      	movs	r0, #0
 8001874:	f000 ff16 	bl	80026a4 <Load>

  /* 初始化OLED显示屏 */
  OLED_Init();
 8001878:	f004 fe28 	bl	80064cc <OLED_Init>
  /* 初始化MPU6500惯性测量单元 */
  MPU_Init();
 800187c:	f004 fbc2 	bl	8006004 <MPU_Init>
  /* 初始化MPU6500的数字运动处理器(DMP)，并获取初始化结果 */
  res = mpu_dmp_init();
 8001880:	f003 f93c 	bl	8004afc <mpu_dmp_init>
 8001884:	4603      	mov	r3, r0
 8001886:	461a      	mov	r2, r3
 8001888:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <main+0x84>)
 800188a:	601a      	str	r2, [r3, #0]

  /* 清屏OLED显示 */
  OLED_Clear();
 800188c:	f004 fe27 	bl	80064de <OLED_Clear>

  /* 启动TIM2的编码器模式，使用所有通道（通常为CH1和CH2） */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001890:	213c      	movs	r1, #60	@ 0x3c
 8001892:	480b      	ldr	r0, [pc, #44]	@ (80018c0 <main+0x88>)
 8001894:	f00a fa1a 	bl	800bccc <HAL_TIM_Encoder_Start>
  /* 启动TIM4的编码器模式，使用所有通道 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001898:	213c      	movs	r1, #60	@ 0x3c
 800189a:	480a      	ldr	r0, [pc, #40]	@ (80018c4 <main+0x8c>)
 800189c:	f00a fa16 	bl	800bccc <HAL_TIM_Encoder_Start>
  /* 启动UART6的中断接收模式，每次接收1字节数据到rx_buf缓冲区 */
  HAL_UART_Receive_IT(&huart6, rx_buf, 1);
 80018a0:	2201      	movs	r2, #1
 80018a2:	4909      	ldr	r1, [pc, #36]	@ (80018c8 <main+0x90>)
 80018a4:	4809      	ldr	r0, [pc, #36]	@ (80018cc <main+0x94>)
 80018a6:	f00b fa66 	bl	800cd76 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018aa:	f00c f9e9 	bl	800dc80 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80018ae:	f7ff fcaf 	bl	8001210 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80018b2:	f00c fa09 	bl	800dcc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018b6:	bf00      	nop
 80018b8:	e7fd      	b.n	80018b6 <main+0x7e>
 80018ba:	bf00      	nop
 80018bc:	200003cc 	.word	0x200003cc
 80018c0:	2000046c 	.word	0x2000046c
 80018c4:	200004fc 	.word	0x200004fc
 80018c8:	20000418 	.word	0x20000418
 80018cc:	200005d4 	.word	0x200005d4

080018d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b094      	sub	sp, #80	@ 0x50
 80018d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d6:	f107 0320 	add.w	r3, r7, #32
 80018da:	2230      	movs	r2, #48	@ 0x30
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f00f ff03 	bl	80116ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	4b28      	ldr	r3, [pc, #160]	@ (800199c <SystemClock_Config+0xcc>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	4a27      	ldr	r2, [pc, #156]	@ (800199c <SystemClock_Config+0xcc>)
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001902:	6413      	str	r3, [r2, #64]	@ 0x40
 8001904:	4b25      	ldr	r3, [pc, #148]	@ (800199c <SystemClock_Config+0xcc>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <SystemClock_Config+0xd0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800191c:	4a20      	ldr	r2, [pc, #128]	@ (80019a0 <SystemClock_Config+0xd0>)
 800191e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <SystemClock_Config+0xd0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001930:	2301      	movs	r3, #1
 8001932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193a:	2302      	movs	r3, #2
 800193c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800193e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001944:	2304      	movs	r3, #4
 8001946:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001948:	2354      	movs	r3, #84	@ 0x54
 800194a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800194c:	2302      	movs	r3, #2
 800194e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001950:	2304      	movs	r3, #4
 8001952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	4618      	mov	r0, r3
 800195a:	f009 f9af 	bl	800acbc <HAL_RCC_OscConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001964:	f000 f830 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001968:	230f      	movs	r3, #15
 800196a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196c:	2302      	movs	r3, #2
 800196e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	2102      	movs	r1, #2
 8001984:	4618      	mov	r0, r3
 8001986:	f009 fc11 	bl	800b1ac <HAL_RCC_ClockConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001990:	f000 f81a 	bl	80019c8 <Error_Handler>
  }
}
 8001994:	bf00      	nop
 8001996:	3750      	adds	r7, #80	@ 0x50
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	40007000 	.word	0x40007000

080019a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80019b6:	f005 fa9b 	bl	8006ef0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40014400 	.word	0x40014400

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <Error_Handler+0x8>

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_MspInit+0x54>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	4a11      	ldr	r2, [pc, #68]	@ (8001a28 <HAL_MspInit+0x54>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_MspInit+0x54>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_MspInit+0x54>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <HAL_MspInit+0x54>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <HAL_MspInit+0x54>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	210f      	movs	r1, #15
 8001a16:	f06f 0001 	mvn.w	r0, #1
 8001a1a:	f006 f84b 	bl	8007ab4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08c      	sub	sp, #48	@ 0x30
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	4b2e      	ldr	r3, [pc, #184]	@ (8001afc <HAL_InitTick+0xd0>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a44:	4a2d      	ldr	r2, [pc, #180]	@ (8001afc <HAL_InitTick+0xd0>)
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001afc <HAL_InitTick+0xd0>)
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a58:	f107 020c 	add.w	r2, r7, #12
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f009 fdc2 	bl	800b5ec <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a68:	f009 fdac 	bl	800b5c4 <HAL_RCC_GetPCLK2Freq>
 8001a6c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a70:	4a23      	ldr	r2, [pc, #140]	@ (8001b00 <HAL_InitTick+0xd4>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0c9b      	lsrs	r3, r3, #18
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001a7c:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <HAL_InitTick+0xd8>)
 8001a7e:	4a22      	ldr	r2, [pc, #136]	@ (8001b08 <HAL_InitTick+0xdc>)
 8001a80:	601a      	str	r2, [r3, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001a82:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <HAL_InitTick+0xd8>)
 8001a84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a88:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001b04 <HAL_InitTick+0xd8>)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <HAL_InitTick+0xd8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_InitTick+0xd8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_InitTick+0xd8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001aa2:	4818      	ldr	r0, [pc, #96]	@ (8001b04 <HAL_InitTick+0xd8>)
 8001aa4:	f009 fdd4 	bl	800b650 <HAL_TIM_Base_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001aae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d11b      	bne.n	8001aee <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001ab6:	4813      	ldr	r0, [pc, #76]	@ (8001b04 <HAL_InitTick+0xd8>)
 8001ab8:	f009 fe9c 	bl	800b7f4 <HAL_TIM_Base_Start_IT>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d111      	bne.n	8001aee <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001aca:	2019      	movs	r0, #25
 8001acc:	f006 f80e 	bl	8007aec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b0f      	cmp	r3, #15
 8001ad4:	d808      	bhi.n	8001ae8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	2019      	movs	r0, #25
 8001adc:	f005 ffea 	bl	8007ab4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <HAL_InitTick+0xe0>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e002      	b.n	8001aee <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001aee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3730      	adds	r7, #48	@ 0x30
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	431bde83 	.word	0x431bde83
 8001b04:	200003d0 	.word	0x200003d0
 8001b08:	40014400 	.word	0x40014400
 8001b0c:	2000008c 	.word	0x2000008c

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <NMI_Handler+0x4>

08001b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <MemManage_Handler+0x4>

08001b28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b4a:	2010      	movs	r0, #16
 8001b4c:	f006 fdae 	bl	80086ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <DMA1_Stream6_IRQHandler+0x10>)
 8001b5a:	f006 f96d 	bl	8007e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000035c 	.word	0x2000035c

08001b68 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	@ (8001b78 <ADC_IRQHandler+0x10>)
 8001b6e:	f005 fb86 	bl	800727e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000028c 	.word	0x2000028c

08001b7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001b80:	2020      	movs	r0, #32
 8001b82:	f006 fd93 	bl	80086ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b90:	4803      	ldr	r0, [pc, #12]	@ (8001ba0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001b92:	f00a f929 	bl	800bde8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001b96:	4803      	ldr	r0, [pc, #12]	@ (8001ba4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001b98:	f00a f926 	bl	800bde8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000424 	.word	0x20000424
 8001ba4:	200003d0 	.word	0x200003d0

08001ba8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001bae:	f00a f91b 	bl	800bde8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000424 	.word	0x20000424

08001bbc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	@ (8001bcc <I2C1_EV_IRQHandler+0x10>)
 8001bc2:	f007 f93d 	bl	8008e40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000308 	.word	0x20000308

08001bd0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001bd4:	483f      	ldr	r0, [pc, #252]	@ (8001cd4 <USART6_IRQHandler+0x104>)
 8001bd6:	f00b f8f3 	bl	800cdc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  Bluetooth_data=rx_buf[0];
 8001bda:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd8 <USART6_IRQHandler+0x108>)
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	4b3f      	ldr	r3, [pc, #252]	@ (8001cdc <USART6_IRQHandler+0x10c>)
 8001be0:	701a      	strb	r2, [r3, #0]
	if(Bluetooth_data==0x00)	Fore=0,Back=0,Left=0,Right=0;//刹
 8001be2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cdc <USART6_IRQHandler+0x10c>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <USART6_IRQHandler+0x34>
 8001bea:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce0 <USART6_IRQHandler+0x110>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce4 <USART6_IRQHandler+0x114>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce8 <USART6_IRQHandler+0x118>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <USART6_IRQHandler+0x11c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	e05f      	b.n	8001cc4 <USART6_IRQHandler+0xf4>
	else if(Bluetooth_data==0x01)Fore=1,Back=0,Left=0,Right=0;//前
 8001c04:	4b35      	ldr	r3, [pc, #212]	@ (8001cdc <USART6_IRQHandler+0x10c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10c      	bne.n	8001c26 <USART6_IRQHandler+0x56>
 8001c0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <USART6_IRQHandler+0x110>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <USART6_IRQHandler+0x114>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	4b33      	ldr	r3, [pc, #204]	@ (8001ce8 <USART6_IRQHandler+0x118>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <USART6_IRQHandler+0x11c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	e04e      	b.n	8001cc4 <USART6_IRQHandler+0xf4>
	else if(Bluetooth_data==0x03)Fore=0,Back=1,Left=0,Right=0;//后
 8001c26:	4b2d      	ldr	r3, [pc, #180]	@ (8001cdc <USART6_IRQHandler+0x10c>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d10c      	bne.n	8001c48 <USART6_IRQHandler+0x78>
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce0 <USART6_IRQHandler+0x110>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <USART6_IRQHandler+0x114>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <USART6_IRQHandler+0x118>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <USART6_IRQHandler+0x11c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	e03d      	b.n	8001cc4 <USART6_IRQHandler+0xf4>
	else if(Bluetooth_data==0x07)Fore=0,Back=0,Left=0,Right=1;//右
 8001c48:	4b24      	ldr	r3, [pc, #144]	@ (8001cdc <USART6_IRQHandler+0x10c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b07      	cmp	r3, #7
 8001c4e:	d10c      	bne.n	8001c6a <USART6_IRQHandler+0x9a>
 8001c50:	4b23      	ldr	r3, [pc, #140]	@ (8001ce0 <USART6_IRQHandler+0x110>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <USART6_IRQHandler+0x114>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <USART6_IRQHandler+0x118>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <USART6_IRQHandler+0x11c>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	e02c      	b.n	8001cc4 <USART6_IRQHandler+0xf4>
	else if(Bluetooth_data==0x05)Fore=0,Back=0,Left=1,Right=0;//左
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <USART6_IRQHandler+0x10c>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d10c      	bne.n	8001c8c <USART6_IRQHandler+0xbc>
 8001c72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <USART6_IRQHandler+0x110>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <USART6_IRQHandler+0x114>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <USART6_IRQHandler+0x118>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <USART6_IRQHandler+0x11c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	e01b      	b.n	8001cc4 <USART6_IRQHandler+0xf4>
	else if(Bluetooth_data==0x10)is_bluetooth_connected = 1;
 8001c8c:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <USART6_IRQHandler+0x10c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d103      	bne.n	8001c9c <USART6_IRQHandler+0xcc>
 8001c94:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <USART6_IRQHandler+0x120>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e013      	b.n	8001cc4 <USART6_IRQHandler+0xf4>
	else if(Bluetooth_data==0x11)is_bluetooth_connected = 0;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <USART6_IRQHandler+0x10c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b11      	cmp	r3, #17
 8001ca2:	d103      	bne.n	8001cac <USART6_IRQHandler+0xdc>
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <USART6_IRQHandler+0x120>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e00b      	b.n	8001cc4 <USART6_IRQHandler+0xf4>
	else						Fore=0,Back=0,Left=0,Right=0;//刹
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <USART6_IRQHandler+0x110>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <USART6_IRQHandler+0x114>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <USART6_IRQHandler+0x118>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <USART6_IRQHandler+0x11c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6,rx_buf,1);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4904      	ldr	r1, [pc, #16]	@ (8001cd8 <USART6_IRQHandler+0x108>)
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <USART6_IRQHandler+0x104>)
 8001cca:	f00b f854 	bl	800cd76 <HAL_UART_Receive_IT>
  /* USER CODE END USART6_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200005d4 	.word	0x200005d4
 8001cd8:	20000418 	.word	0x20000418
 8001cdc:	2000041a 	.word	0x2000041a
 8001ce0:	2000041b 	.word	0x2000041b
 8001ce4:	2000041c 	.word	0x2000041c
 8001ce8:	2000041d 	.word	0x2000041d
 8001cec:	2000041e 	.word	0x2000041e
 8001cf0:	2000041f 	.word	0x2000041f

08001cf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return 1;
 8001cf8:	2301      	movs	r3, #1
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_kill>:

int _kill(int pid, int sig)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d0e:	f00f fd95 	bl	801183c <__errno>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2216      	movs	r2, #22
 8001d16:	601a      	str	r2, [r3, #0]
  return -1;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_exit>:

void _exit (int status)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ffe7 	bl	8001d04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d36:	bf00      	nop
 8001d38:	e7fd      	b.n	8001d36 <_exit+0x12>

08001d3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e00a      	b.n	8001d62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d4c:	f3af 8000 	nop.w
 8001d50:	4601      	mov	r1, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	60ba      	str	r2, [r7, #8]
 8001d58:	b2ca      	uxtb	r2, r1
 8001d5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	dbf0      	blt.n	8001d4c <_read+0x12>
  }

  return len;
 8001d6a:	687b      	ldr	r3, [r7, #4]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d9c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_isatty>:

int _isatty(int file)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001db4:	2301      	movs	r3, #1
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de4:	4a14      	ldr	r2, [pc, #80]	@ (8001e38 <_sbrk+0x5c>)
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <_sbrk+0x60>)
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df0:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <_sbrk+0x64>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <_sbrk+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e0c:	f00f fd16 	bl	801183c <__errno>
 8001e10:	4603      	mov	r3, r0
 8001e12:	220c      	movs	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e009      	b.n	8001e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <_sbrk+0x64>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20018000 	.word	0x20018000
 8001e3c:	00000400 	.word	0x00000400
 8001e40:	20000420 	.word	0x20000420
 8001e44:	200055b8 	.word	0x200055b8

08001e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <SystemInit+0x20>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e52:	4a05      	ldr	r2, [pc, #20]	@ (8001e68 <SystemInit+0x20>)
 8001e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b092      	sub	sp, #72	@ 0x48
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
 8001e8c:	615a      	str	r2, [r3, #20]
 8001e8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2220      	movs	r2, #32
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f00f fc27 	bl	80116ea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e9c:	4b39      	ldr	r3, [pc, #228]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001e9e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f88 <MX_TIM1_Init+0x11c>)
 8001ea0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ea2:	4b38      	ldr	r3, [pc, #224]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b36      	ldr	r3, [pc, #216]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8399;
 8001eae:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001eb0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001eb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb6:	4b33      	ldr	r3, [pc, #204]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ebc:	4b31      	ldr	r3, [pc, #196]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec2:	4b30      	ldr	r3, [pc, #192]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ec8:	482e      	ldr	r0, [pc, #184]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001eca:	f009 fcf5 	bl	800b8b8 <HAL_TIM_PWM_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001ed4:	f7ff fd78 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ee0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4827      	ldr	r0, [pc, #156]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001ee8:	f00a fdfc 	bl	800cae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ef2:	f7ff fd69 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ef6:	2360      	movs	r3, #96	@ 0x60
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f02:	2300      	movs	r3, #0
 8001f04:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f16:	2200      	movs	r2, #0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	481a      	ldr	r0, [pc, #104]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001f1c:	f00a f854 	bl	800bfc8 <HAL_TIM_PWM_ConfigChannel>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001f26:	f7ff fd4f 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f2e:	2204      	movs	r2, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4814      	ldr	r0, [pc, #80]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001f34:	f00a f848 	bl	800bfc8 <HAL_TIM_PWM_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001f3e:	f7ff fd43 	bl	80019c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4807      	ldr	r0, [pc, #28]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001f66:	f00a fe2b 	bl	800cbc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001f70:	f7ff fd2a 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f74:	4803      	ldr	r0, [pc, #12]	@ (8001f84 <MX_TIM1_Init+0x118>)
 8001f76:	f000 fa81 	bl	800247c <HAL_TIM_MspPostInit>

}
 8001f7a:	bf00      	nop
 8001f7c:	3748      	adds	r7, #72	@ 0x48
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000424 	.word	0x20000424
 8001f88:	40010000 	.word	0x40010000

08001f8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	@ 0x30
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	2224      	movs	r2, #36	@ 0x24
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f00f fba5 	bl	80116ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa8:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <MX_TIM2_Init+0xa4>)
 8001faa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <MX_TIM2_Init+0xa4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002030 <MX_TIM2_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <MX_TIM2_Init+0xa4>)
 8001fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <MX_TIM2_Init+0xa4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fca:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <MX_TIM2_Init+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480d      	ldr	r0, [pc, #52]	@ (8002030 <MX_TIM2_Init+0xa4>)
 8001ffc:	f009 fdc0 	bl	800bb80 <HAL_TIM_Encoder_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002006:	f7ff fcdf 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4806      	ldr	r0, [pc, #24]	@ (8002030 <MX_TIM2_Init+0xa4>)
 8002018:	f00a fd64 	bl	800cae4 <HAL_TIMEx_MasterConfigSynchronization>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002022:	f7ff fcd1 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	3730      	adds	r7, #48	@ 0x30
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000046c 	.word	0x2000046c

08002034 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002048:	463b      	mov	r3, r7
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002050:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <MX_TIM3_Init+0x94>)
 8002052:	4a1e      	ldr	r2, [pc, #120]	@ (80020cc <MX_TIM3_Init+0x98>)
 8002054:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002056:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <MX_TIM3_Init+0x94>)
 8002058:	2253      	movs	r2, #83	@ 0x53
 800205a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205c:	4b1a      	ldr	r3, [pc, #104]	@ (80020c8 <MX_TIM3_Init+0x94>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002062:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <MX_TIM3_Init+0x94>)
 8002064:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002068:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <MX_TIM3_Init+0x94>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <MX_TIM3_Init+0x94>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002076:	4814      	ldr	r0, [pc, #80]	@ (80020c8 <MX_TIM3_Init+0x94>)
 8002078:	f009 faea 	bl	800b650 <HAL_TIM_Base_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002082:	f7ff fca1 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800208a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4619      	mov	r1, r3
 8002092:	480d      	ldr	r0, [pc, #52]	@ (80020c8 <MX_TIM3_Init+0x94>)
 8002094:	f00a f85a 	bl	800c14c <HAL_TIM_ConfigClockSource>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800209e:	f7ff fc93 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020aa:	463b      	mov	r3, r7
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	@ (80020c8 <MX_TIM3_Init+0x94>)
 80020b0:	f00a fd18 	bl	800cae4 <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80020ba:	f7ff fc85 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200004b4 	.word	0x200004b4
 80020cc:	40000400 	.word	0x40000400

080020d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	@ 0x30
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	2224      	movs	r2, #36	@ 0x24
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f00f fb03 	bl	80116ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020ec:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <MX_TIM4_Init+0xa0>)
 80020ee:	4a21      	ldr	r2, [pc, #132]	@ (8002174 <MX_TIM4_Init+0xa4>)
 80020f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002170 <MX_TIM4_Init+0xa0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <MX_TIM4_Init+0xa0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002170 <MX_TIM4_Init+0xa0>)
 8002100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002104:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002106:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <MX_TIM4_Init+0xa0>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <MX_TIM4_Init+0xa0>)
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002112:	2301      	movs	r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800211a:	2301      	movs	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800212a:	2301      	movs	r3, #1
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800212e:	2300      	movs	r3, #0
 8002130:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	4619      	mov	r1, r3
 800213c:	480c      	ldr	r0, [pc, #48]	@ (8002170 <MX_TIM4_Init+0xa0>)
 800213e:	f009 fd1f 	bl	800bb80 <HAL_TIM_Encoder_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002148:	f7ff fc3e 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	@ (8002170 <MX_TIM4_Init+0xa0>)
 800215a:	f00a fcc3 	bl	800cae4 <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002164:	f7ff fc30 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	3730      	adds	r7, #48	@ 0x30
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200004fc 	.word	0x200004fc
 8002174:	40000800 	.word	0x40000800

08002178 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218c:	463b      	mov	r3, r7
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002194:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <MX_TIM5_Init+0x94>)
 8002196:	4a1e      	ldr	r2, [pc, #120]	@ (8002210 <MX_TIM5_Init+0x98>)
 8002198:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800219a:	4b1c      	ldr	r3, [pc, #112]	@ (800220c <MX_TIM5_Init+0x94>)
 800219c:	2253      	movs	r2, #83	@ 0x53
 800219e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <MX_TIM5_Init+0x94>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80021a6:	4b19      	ldr	r3, [pc, #100]	@ (800220c <MX_TIM5_Init+0x94>)
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ae:	4b17      	ldr	r3, [pc, #92]	@ (800220c <MX_TIM5_Init+0x94>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b4:	4b15      	ldr	r3, [pc, #84]	@ (800220c <MX_TIM5_Init+0x94>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021ba:	4814      	ldr	r0, [pc, #80]	@ (800220c <MX_TIM5_Init+0x94>)
 80021bc:	f009 fa48 	bl	800b650 <HAL_TIM_Base_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80021c6:	f7ff fbff 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4619      	mov	r1, r3
 80021d6:	480d      	ldr	r0, [pc, #52]	@ (800220c <MX_TIM5_Init+0x94>)
 80021d8:	f009 ffb8 	bl	800c14c <HAL_TIM_ConfigClockSource>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80021e2:	f7ff fbf1 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021ee:	463b      	mov	r3, r7
 80021f0:	4619      	mov	r1, r3
 80021f2:	4806      	ldr	r0, [pc, #24]	@ (800220c <MX_TIM5_Init+0x94>)
 80021f4:	f00a fc76 	bl	800cae4 <HAL_TIMEx_MasterConfigSynchronization>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80021fe:	f7ff fbe3 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000544 	.word	0x20000544
 8002210:	40000c00 	.word	0x40000c00

08002214 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221a:	463b      	mov	r3, r7
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002226:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <MX_TIM9_Init+0x6c>)
 8002228:	4a16      	ldr	r2, [pc, #88]	@ (8002284 <MX_TIM9_Init+0x70>)
 800222a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800222c:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <MX_TIM9_Init+0x6c>)
 800222e:	2200      	movs	r2, #0
 8002230:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002232:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <MX_TIM9_Init+0x6c>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002238:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <MX_TIM9_Init+0x6c>)
 800223a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800223e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <MX_TIM9_Init+0x6c>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002246:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <MX_TIM9_Init+0x6c>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800224c:	480c      	ldr	r0, [pc, #48]	@ (8002280 <MX_TIM9_Init+0x6c>)
 800224e:	f009 f9ff 	bl	800b650 <HAL_TIM_Base_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002258:	f7ff fbb6 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002260:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002262:	463b      	mov	r3, r7
 8002264:	4619      	mov	r1, r3
 8002266:	4806      	ldr	r0, [pc, #24]	@ (8002280 <MX_TIM9_Init+0x6c>)
 8002268:	f009 ff70 	bl	800c14c <HAL_TIM_ConfigClockSource>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002272:	f7ff fba9 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000058c 	.word	0x2000058c
 8002284:	40014000 	.word	0x40014000

08002288 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a12      	ldr	r2, [pc, #72]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x58>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d11d      	bne.n	80022d6 <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x5c>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	4a10      	ldr	r2, [pc, #64]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x5c>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x5c>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	210f      	movs	r1, #15
 80022ba:	2019      	movs	r0, #25
 80022bc:	f005 fbfa 	bl	8007ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022c0:	2019      	movs	r0, #25
 80022c2:	f005 fc13 	bl	8007aec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2105      	movs	r1, #5
 80022ca:	201a      	movs	r0, #26
 80022cc:	f005 fbf2 	bl	8007ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022d0:	201a      	movs	r0, #26
 80022d2:	f005 fc0b 	bl	8007aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40010000 	.word	0x40010000
 80022e4:	40023800 	.word	0x40023800

080022e8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	@ 0x30
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002308:	d12c      	bne.n	8002364 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	4b30      	ldr	r3, [pc, #192]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	4a2f      	ldr	r2, [pc, #188]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6413      	str	r3, [r2, #64]	@ 0x40
 800231a:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	4b29      	ldr	r3, [pc, #164]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a28      	ldr	r2, [pc, #160]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b26      	ldr	r3, [pc, #152]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002342:	2303      	movs	r3, #3
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002352:	2301      	movs	r3, #1
 8002354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	481d      	ldr	r0, [pc, #116]	@ (80023d4 <HAL_TIM_Encoder_MspInit+0xec>)
 800235e:	f005 ffef 	bl	8008340 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002362:	e030      	b.n	80023c6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1b      	ldr	r2, [pc, #108]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d12b      	bne.n	80023c6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	4a16      	ldr	r2, [pc, #88]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6413      	str	r3, [r2, #64]	@ 0x40
 800237e:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	4a0f      	ldr	r2, [pc, #60]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	6313      	str	r3, [r2, #48]	@ 0x30
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023a6:	23c0      	movs	r3, #192	@ 0xc0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023b6:	2302      	movs	r3, #2
 80023b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	4619      	mov	r1, r3
 80023c0:	4806      	ldr	r0, [pc, #24]	@ (80023dc <HAL_TIM_Encoder_MspInit+0xf4>)
 80023c2:	f005 ffbd 	bl	8008340 <HAL_GPIO_Init>
}
 80023c6:	bf00      	nop
 80023c8:	3730      	adds	r7, #48	@ 0x30
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40000800 	.word	0x40000800
 80023dc:	40020400 	.word	0x40020400

080023e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1f      	ldr	r2, [pc, #124]	@ (800246c <HAL_TIM_Base_MspInit+0x8c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <HAL_TIM_Base_MspInit+0x90>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002470 <HAL_TIM_Base_MspInit+0x90>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6413      	str	r3, [r2, #64]	@ 0x40
 8002402:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <HAL_TIM_Base_MspInit+0x90>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800240e:	e026      	b.n	800245e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM5)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a17      	ldr	r2, [pc, #92]	@ (8002474 <HAL_TIM_Base_MspInit+0x94>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10e      	bne.n	8002438 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <HAL_TIM_Base_MspInit+0x90>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	4a13      	ldr	r2, [pc, #76]	@ (8002470 <HAL_TIM_Base_MspInit+0x90>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6413      	str	r3, [r2, #64]	@ 0x40
 800242a:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <HAL_TIM_Base_MspInit+0x90>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
}
 8002436:	e012      	b.n	800245e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM9)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0e      	ldr	r2, [pc, #56]	@ (8002478 <HAL_TIM_Base_MspInit+0x98>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10d      	bne.n	800245e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_TIM_Base_MspInit+0x90>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	4a09      	ldr	r2, [pc, #36]	@ (8002470 <HAL_TIM_Base_MspInit+0x90>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002450:	6453      	str	r3, [r2, #68]	@ 0x44
 8002452:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <HAL_TIM_Base_MspInit+0x90>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
}
 800245e:	bf00      	nop
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40000400 	.word	0x40000400
 8002470:	40023800 	.word	0x40023800
 8002474:	40000c00 	.word	0x40000c00
 8002478:	40014000 	.word	0x40014000

0800247c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	@ 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a22      	ldr	r2, [pc, #136]	@ (8002524 <HAL_TIM_MspPostInit+0xa8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d13d      	bne.n	800251a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	4b21      	ldr	r3, [pc, #132]	@ (8002528 <HAL_TIM_MspPostInit+0xac>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4a20      	ldr	r2, [pc, #128]	@ (8002528 <HAL_TIM_MspPostInit+0xac>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002528 <HAL_TIM_MspPostInit+0xac>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <HAL_TIM_MspPostInit+0xac>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	4a19      	ldr	r2, [pc, #100]	@ (8002528 <HAL_TIM_MspPostInit+0xac>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ca:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <HAL_TIM_MspPostInit+0xac>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80024d6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80024da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	480e      	ldr	r0, [pc, #56]	@ (800252c <HAL_TIM_MspPostInit+0xb0>)
 80024f4:	f005 ff24 	bl	8008340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800250a:	2301      	movs	r3, #1
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	4619      	mov	r1, r3
 8002514:	4806      	ldr	r0, [pc, #24]	@ (8002530 <HAL_TIM_MspPostInit+0xb4>)
 8002516:	f005 ff13 	bl	8008340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800251a:	bf00      	nop
 800251c:	3728      	adds	r7, #40	@ 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40010000 	.word	0x40010000
 8002528:	40023800 	.word	0x40023800
 800252c:	40020400 	.word	0x40020400
 8002530:	40020000 	.word	0x40020000

08002534 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002538:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <MX_USART6_UART_Init+0x4c>)
 800253a:	4a12      	ldr	r2, [pc, #72]	@ (8002584 <MX_USART6_UART_Init+0x50>)
 800253c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800253e:	4b10      	ldr	r3, [pc, #64]	@ (8002580 <MX_USART6_UART_Init+0x4c>)
 8002540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002544:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002546:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <MX_USART6_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800254c:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <MX_USART6_UART_Init+0x4c>)
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002552:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <MX_USART6_UART_Init+0x4c>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <MX_USART6_UART_Init+0x4c>)
 800255a:	220c      	movs	r2, #12
 800255c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255e:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <MX_USART6_UART_Init+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <MX_USART6_UART_Init+0x4c>)
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800256a:	4805      	ldr	r0, [pc, #20]	@ (8002580 <MX_USART6_UART_Init+0x4c>)
 800256c:	f00a fbb3 	bl	800ccd6 <HAL_UART_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002576:	f7ff fa27 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200005d4 	.word	0x200005d4
 8002584:	40011400 	.word	0x40011400

08002588 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	@ 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1d      	ldr	r2, [pc, #116]	@ (800261c <HAL_UART_MspInit+0x94>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d133      	bne.n	8002612 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002620 <HAL_UART_MspInit+0x98>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <HAL_UART_MspInit+0x98>)
 80025b4:	f043 0320 	orr.w	r3, r3, #32
 80025b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_UART_MspInit+0x98>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <HAL_UART_MspInit+0x98>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	4a14      	ldr	r2, [pc, #80]	@ (8002620 <HAL_UART_MspInit+0x98>)
 80025d0:	f043 0304 	orr.w	r3, r3, #4
 80025d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d6:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_UART_MspInit+0x98>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025e2:	23c0      	movs	r3, #192	@ 0xc0
 80025e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025f2:	2308      	movs	r3, #8
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4619      	mov	r1, r3
 80025fc:	4809      	ldr	r0, [pc, #36]	@ (8002624 <HAL_UART_MspInit+0x9c>)
 80025fe:	f005 fe9f 	bl	8008340 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2105      	movs	r1, #5
 8002606:	2047      	movs	r0, #71	@ 0x47
 8002608:	f005 fa54 	bl	8007ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800260c:	2047      	movs	r0, #71	@ 0x47
 800260e:	f005 fa6d 	bl	8007aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	@ 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40011400 	.word	0x40011400
 8002620:	40023800 	.word	0x40023800
 8002624:	40020800 	.word	0x40020800

08002628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002628:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002660 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800262c:	f7ff fc0c 	bl	8001e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002630:	480c      	ldr	r0, [pc, #48]	@ (8002664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002632:	490d      	ldr	r1, [pc, #52]	@ (8002668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002648:	4c0a      	ldr	r4, [pc, #40]	@ (8002674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002656:	f00f f8f7 	bl	8011848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800265a:	f7ff f8ed 	bl	8001838 <main>
  bx  lr    
 800265e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002660:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002668:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 800266c:	080174a8 	.word	0x080174a8
  ldr r2, =_sbss
 8002670:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002674:	200055b4 	.word	0x200055b4

08002678 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002678:	e7fe      	b.n	8002678 <DMA1_Stream0_IRQHandler>

0800267a <Read_Speed>:

int Encoder_Left = 0;
int Encoder_Right = 0;

int Read_Speed(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
	int temp;
	temp=(short)__HAL_TIM_GetCounter(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	b21b      	sxth	r3, r3
 800268a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SetCounter(htim,0);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24
	return temp;
 8002694:	68fb      	ldr	r3, [r7, #12]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <Load>:
/**
 * @brief 控制两个电机的转速和方向
 * @param motor1 电机1的占空比，范围-8400~8400（正数正转，负数反转）
 * @param motor2 电机2的占空比，范围-8400~8400（正数正转，负数反转）
 */
void Load(int motor1, int motor2) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
//    // 限制输入范围
    motor1 = (motor1 > 8400) ? 8400 : (motor1 < -8400) ? -8400 : motor1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80026b4:	4293      	cmp	r3, r2
 80026b6:	dc05      	bgt.n	80026c4 <Load+0x20>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a36      	ldr	r2, [pc, #216]	@ (8002794 <Load+0xf0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	bfb8      	it	lt
 80026c0:	4613      	movlt	r3, r2
 80026c2:	e001      	b.n	80026c8 <Load+0x24>
 80026c4:	f242 03d0 	movw	r3, #8400	@ 0x20d0
 80026c8:	607b      	str	r3, [r7, #4]
    motor2 = (motor2 > 8400) ? 8400 : (motor2 < -8400) ? -8400 : motor2;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	dc05      	bgt.n	80026e0 <Load+0x3c>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002794 <Load+0xf0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	bfb8      	it	lt
 80026dc:	4613      	movlt	r3, r2
 80026de:	e001      	b.n	80026e4 <Load+0x40>
 80026e0:	f242 03d0 	movw	r3, #8400	@ 0x20d0
 80026e4:	603b      	str	r3, [r7, #0]

    // 控制电机1
    if (motor1 == 0) {
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d108      	bne.n	80026fe <Load+0x5a>
        // 停止电机1
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80026ec:	2100      	movs	r1, #0
 80026ee:	482a      	ldr	r0, [pc, #168]	@ (8002798 <Load+0xf4>)
 80026f0:	f009 f9e2 	bl	800bab8 <HAL_TIM_PWM_Stop>
        HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80026f4:	2100      	movs	r1, #0
 80026f6:	4828      	ldr	r0, [pc, #160]	@ (8002798 <Load+0xf4>)
 80026f8:	f00a f996 	bl	800ca28 <HAL_TIMEx_PWMN_Stop>
 80026fc:	e01c      	b.n	8002738 <Load+0x94>
    } else if (motor1 < 0) {
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	da0d      	bge.n	8002720 <Load+0x7c>
        // 电机1正转
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002704:	2100      	movs	r1, #0
 8002706:	4824      	ldr	r0, [pc, #144]	@ (8002798 <Load+0xf4>)
 8002708:	f00a f8e2 	bl	800c8d0 <HAL_TIMEx_PWMN_Start>
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800270c:	2100      	movs	r1, #0
 800270e:	4822      	ldr	r0, [pc, #136]	@ (8002798 <Load+0xf4>)
 8002710:	f009 f9d2 	bl	800bab8 <HAL_TIM_PWM_Stop>
        __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, -motor1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	425a      	negs	r2, r3
 8002718:	4b1f      	ldr	r3, [pc, #124]	@ (8002798 <Load+0xf4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	635a      	str	r2, [r3, #52]	@ 0x34
 800271e:	e00b      	b.n	8002738 <Load+0x94>
    } else {
        // 电机1反转
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002720:	2100      	movs	r1, #0
 8002722:	481d      	ldr	r0, [pc, #116]	@ (8002798 <Load+0xf4>)
 8002724:	f009 f918 	bl	800b958 <HAL_TIM_PWM_Start>
        HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002728:	2100      	movs	r1, #0
 800272a:	481b      	ldr	r0, [pc, #108]	@ (8002798 <Load+0xf4>)
 800272c:	f00a f97c 	bl	800ca28 <HAL_TIMEx_PWMN_Stop>
        __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, motor1);
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <Load+0xf4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // 控制电机2
    if (motor2 == 0) {
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <Load+0xac>
        // 停止电机2
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800273e:	2104      	movs	r1, #4
 8002740:	4815      	ldr	r0, [pc, #84]	@ (8002798 <Load+0xf4>)
 8002742:	f009 f9b9 	bl	800bab8 <HAL_TIM_PWM_Stop>
        HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002746:	2104      	movs	r1, #4
 8002748:	4813      	ldr	r0, [pc, #76]	@ (8002798 <Load+0xf4>)
 800274a:	f00a f96d 	bl	800ca28 <HAL_TIMEx_PWMN_Stop>
        // 电机2反转
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
        __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, motor2);
    }
}
 800274e:	e01c      	b.n	800278a <Load+0xe6>
    } else if (motor2 < 0) {
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	da0d      	bge.n	8002772 <Load+0xce>
        HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002756:	2104      	movs	r1, #4
 8002758:	480f      	ldr	r0, [pc, #60]	@ (8002798 <Load+0xf4>)
 800275a:	f00a f965 	bl	800ca28 <HAL_TIMEx_PWMN_Stop>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800275e:	2104      	movs	r1, #4
 8002760:	480d      	ldr	r0, [pc, #52]	@ (8002798 <Load+0xf4>)
 8002762:	f009 f8f9 	bl	800b958 <HAL_TIM_PWM_Start>
        __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, -motor2);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	425a      	negs	r2, r3
 800276a:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <Load+0xf4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002770:	e00b      	b.n	800278a <Load+0xe6>
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002772:	2104      	movs	r1, #4
 8002774:	4808      	ldr	r0, [pc, #32]	@ (8002798 <Load+0xf4>)
 8002776:	f009 f99f 	bl	800bab8 <HAL_TIM_PWM_Stop>
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800277a:	2104      	movs	r1, #4
 800277c:	4806      	ldr	r0, [pc, #24]	@ (8002798 <Load+0xf4>)
 800277e:	f00a f8a7 	bl	800c8d0 <HAL_TIMEx_PWMN_Start>
        __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, motor2);
 8002782:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <Load+0xf4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	ffffdf30 	.word	0xffffdf30
 8002798:	20000424 	.word	0x20000424

0800279c <IIC_Delay>:

void IIC_GPIO_Init(void);


static void IIC_Delay(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
    	ѭ������Ϊ7ʱ��SCLƵ�� = 347KHz�� SCL�ߵ�ƽʱ��1.5us��SCL�͵�ƽʱ��2.87us
     	ѭ������Ϊ5ʱ��SCLƵ�� = 421KHz�� SCL�ߵ�ƽʱ��1.25us��SCL�͵�ƽʱ��2.375us

    IAR���̱���Ч�ʸߣ���������Ϊ7
    */
    for (i = 0; i < 10; i++);
 80027a2:	2300      	movs	r3, #0
 80027a4:	71fb      	strb	r3, [r7, #7]
 80027a6:	e002      	b.n	80027ae <IIC_Delay+0x12>
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	3301      	adds	r3, #1
 80027ac:	71fb      	strb	r3, [r7, #7]
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	2b09      	cmp	r3, #9
 80027b2:	d9f9      	bls.n	80027a8 <IIC_Delay+0xc>
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <IIC_Start>:
*	��    �Σ���
*	�� �� ֵ: ��
*********************************************************************************************************
*/
void IIC_Start(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
    IIC_SDA_1();
 80027c8:	2201      	movs	r2, #1
 80027ca:	2140      	movs	r1, #64	@ 0x40
 80027cc:	480c      	ldr	r0, [pc, #48]	@ (8002800 <IIC_Start+0x3c>)
 80027ce:	f005 ff53 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_SCL_1();
 80027d2:	2201      	movs	r2, #1
 80027d4:	2180      	movs	r1, #128	@ 0x80
 80027d6:	480a      	ldr	r0, [pc, #40]	@ (8002800 <IIC_Start+0x3c>)
 80027d8:	f005 ff4e 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 80027dc:	f7ff ffde 	bl	800279c <IIC_Delay>
    IIC_SDA_0();
 80027e0:	2200      	movs	r2, #0
 80027e2:	2140      	movs	r1, #64	@ 0x40
 80027e4:	4806      	ldr	r0, [pc, #24]	@ (8002800 <IIC_Start+0x3c>)
 80027e6:	f005 ff47 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 80027ea:	f7ff ffd7 	bl	800279c <IIC_Delay>
    IIC_SCL_0();
 80027ee:	2200      	movs	r2, #0
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	4803      	ldr	r0, [pc, #12]	@ (8002800 <IIC_Start+0x3c>)
 80027f4:	f005 ff40 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 80027f8:	f7ff ffd0 	bl	800279c <IIC_Delay>
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40020000 	.word	0x40020000

08002804 <IIC_Stop>:
*	��    �Σ���
*	�� �� ֵ: ��
*********************************************************************************************************
*/
void IIC_Stop(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
    /* ��SCL�ߵ�ƽʱ��SDA����һ�������ر�ʾIIC����ֹͣ�ź� */
    IIC_SDA_0();
 8002808:	2200      	movs	r2, #0
 800280a:	2140      	movs	r1, #64	@ 0x40
 800280c:	4808      	ldr	r0, [pc, #32]	@ (8002830 <IIC_Stop+0x2c>)
 800280e:	f005 ff33 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_SCL_1();
 8002812:	2201      	movs	r2, #1
 8002814:	2180      	movs	r1, #128	@ 0x80
 8002816:	4806      	ldr	r0, [pc, #24]	@ (8002830 <IIC_Stop+0x2c>)
 8002818:	f005 ff2e 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 800281c:	f7ff ffbe 	bl	800279c <IIC_Delay>
    IIC_SDA_1();
 8002820:	2201      	movs	r2, #1
 8002822:	2140      	movs	r1, #64	@ 0x40
 8002824:	4802      	ldr	r0, [pc, #8]	@ (8002830 <IIC_Stop+0x2c>)
 8002826:	f005 ff27 	bl	8008678 <HAL_GPIO_WritePin>
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40020000 	.word	0x40020000

08002834 <IIC_Send_Byte>:
*	��    �Σ�_ucByte �� �ȴ����͵��ֽ�
*	�� �� ֵ: ��
*********************************************************************************************************
*/
void IIC_Send_Byte(uint8_t _ucByte)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    /* �ȷ����ֽڵĸ�λbit7 */
    for (i = 0; i < 8; i++)
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
 8002842:	e02c      	b.n	800289e <IIC_Send_Byte+0x6a>
    {
        if (_ucByte & 0x80)
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	da05      	bge.n	8002858 <IIC_Send_Byte+0x24>
        {
            IIC_SDA_1();
 800284c:	2201      	movs	r2, #1
 800284e:	2140      	movs	r1, #64	@ 0x40
 8002850:	4817      	ldr	r0, [pc, #92]	@ (80028b0 <IIC_Send_Byte+0x7c>)
 8002852:	f005 ff11 	bl	8008678 <HAL_GPIO_WritePin>
 8002856:	e004      	b.n	8002862 <IIC_Send_Byte+0x2e>
        }
        else
        {
            IIC_SDA_0();
 8002858:	2200      	movs	r2, #0
 800285a:	2140      	movs	r1, #64	@ 0x40
 800285c:	4814      	ldr	r0, [pc, #80]	@ (80028b0 <IIC_Send_Byte+0x7c>)
 800285e:	f005 ff0b 	bl	8008678 <HAL_GPIO_WritePin>
        }
        IIC_Delay();
 8002862:	f7ff ff9b 	bl	800279c <IIC_Delay>
        IIC_SCL_1();
 8002866:	2201      	movs	r2, #1
 8002868:	2180      	movs	r1, #128	@ 0x80
 800286a:	4811      	ldr	r0, [pc, #68]	@ (80028b0 <IIC_Send_Byte+0x7c>)
 800286c:	f005 ff04 	bl	8008678 <HAL_GPIO_WritePin>
        IIC_Delay();
 8002870:	f7ff ff94 	bl	800279c <IIC_Delay>
        IIC_SCL_0();
 8002874:	2200      	movs	r2, #0
 8002876:	2180      	movs	r1, #128	@ 0x80
 8002878:	480d      	ldr	r0, [pc, #52]	@ (80028b0 <IIC_Send_Byte+0x7c>)
 800287a:	f005 fefd 	bl	8008678 <HAL_GPIO_WritePin>
        if (i == 7)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b07      	cmp	r3, #7
 8002882:	d104      	bne.n	800288e <IIC_Send_Byte+0x5a>
        {
            IIC_SDA_1(); // �ͷ�����
 8002884:	2201      	movs	r2, #1
 8002886:	2140      	movs	r1, #64	@ 0x40
 8002888:	4809      	ldr	r0, [pc, #36]	@ (80028b0 <IIC_Send_Byte+0x7c>)
 800288a:	f005 fef5 	bl	8008678 <HAL_GPIO_WritePin>
        }
        _ucByte <<= 1;	/* ����һ��bit */
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	71fb      	strb	r3, [r7, #7]
        IIC_Delay();
 8002894:	f7ff ff82 	bl	800279c <IIC_Delay>
    for (i = 0; i < 8; i++)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	3301      	adds	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b07      	cmp	r3, #7
 80028a2:	d9cf      	bls.n	8002844 <IIC_Send_Byte+0x10>
    }
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40020000 	.word	0x40020000

080028b4 <IIC_Read_Byte>:
*	��    �Σ���
*	�� �� ֵ: ����������
*********************************************************************************************************
*/
uint8_t IIC_Read_Byte(uint8_t ack)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    uint8_t value;

    /* ������1��bitΪ���ݵ�bit7 */
    value = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e01d      	b.n	8002904 <IIC_Read_Byte+0x50>
    {
        value <<= 1;
 80028c8:	7bbb      	ldrb	r3, [r7, #14]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	73bb      	strb	r3, [r7, #14]
        IIC_SCL_1();
 80028ce:	2201      	movs	r2, #1
 80028d0:	2180      	movs	r1, #128	@ 0x80
 80028d2:	4814      	ldr	r0, [pc, #80]	@ (8002924 <IIC_Read_Byte+0x70>)
 80028d4:	f005 fed0 	bl	8008678 <HAL_GPIO_WritePin>
        IIC_Delay();
 80028d8:	f7ff ff60 	bl	800279c <IIC_Delay>
        if (IIC_SDA_READ())
 80028dc:	2140      	movs	r1, #64	@ 0x40
 80028de:	4811      	ldr	r0, [pc, #68]	@ (8002924 <IIC_Read_Byte+0x70>)
 80028e0:	f005 feb2 	bl	8008648 <HAL_GPIO_ReadPin>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <IIC_Read_Byte+0x3c>
        {
            value++;
 80028ea:	7bbb      	ldrb	r3, [r7, #14]
 80028ec:	3301      	adds	r3, #1
 80028ee:	73bb      	strb	r3, [r7, #14]
        }
        IIC_SCL_0();
 80028f0:	2200      	movs	r2, #0
 80028f2:	2180      	movs	r1, #128	@ 0x80
 80028f4:	480b      	ldr	r0, [pc, #44]	@ (8002924 <IIC_Read_Byte+0x70>)
 80028f6:	f005 febf 	bl	8008678 <HAL_GPIO_WritePin>
        IIC_Delay();
 80028fa:	f7ff ff4f 	bl	800279c <IIC_Delay>
    for (i = 0; i < 8; i++)
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	3301      	adds	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b07      	cmp	r3, #7
 8002908:	d9de      	bls.n	80028c8 <IIC_Read_Byte+0x14>
    }
    if(ack==0)
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <IIC_Read_Byte+0x62>
        IIC_NAck();
 8002910:	f000 f856 	bl	80029c0 <IIC_NAck>
 8002914:	e001      	b.n	800291a <IIC_Read_Byte+0x66>
    else
        IIC_Ack();
 8002916:	f000 f833 	bl	8002980 <IIC_Ack>
    return value;
 800291a:	7bbb      	ldrb	r3, [r7, #14]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40020000 	.word	0x40020000

08002928 <IIC_Wait_Ack>:
*	��    �Σ���
*	�� �� ֵ: ����0��ʾ��ȷӦ��1��ʾ��������Ӧ
*********************************************************************************************************
*/
uint8_t IIC_Wait_Ack(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
    uint8_t re;

    IIC_SDA_1();	/* CPU�ͷ�SDA���� */
 800292e:	2201      	movs	r2, #1
 8002930:	2140      	movs	r1, #64	@ 0x40
 8002932:	4812      	ldr	r0, [pc, #72]	@ (800297c <IIC_Wait_Ack+0x54>)
 8002934:	f005 fea0 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 8002938:	f7ff ff30 	bl	800279c <IIC_Delay>
    IIC_SCL_1();	/* CPU����SCL = 1, ��ʱ�����᷵��ACKӦ�� */
 800293c:	2201      	movs	r2, #1
 800293e:	2180      	movs	r1, #128	@ 0x80
 8002940:	480e      	ldr	r0, [pc, #56]	@ (800297c <IIC_Wait_Ack+0x54>)
 8002942:	f005 fe99 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 8002946:	f7ff ff29 	bl	800279c <IIC_Delay>
    if (IIC_SDA_READ())	/* CPU��ȡSDA����״̬ */
 800294a:	2140      	movs	r1, #64	@ 0x40
 800294c:	480b      	ldr	r0, [pc, #44]	@ (800297c <IIC_Wait_Ack+0x54>)
 800294e:	f005 fe7b 	bl	8008648 <HAL_GPIO_ReadPin>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <IIC_Wait_Ack+0x36>
    {
        re = 1;
 8002958:	2301      	movs	r3, #1
 800295a:	71fb      	strb	r3, [r7, #7]
 800295c:	e001      	b.n	8002962 <IIC_Wait_Ack+0x3a>
    }
    else
    {
        re = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	71fb      	strb	r3, [r7, #7]
    }
    IIC_SCL_0();
 8002962:	2200      	movs	r2, #0
 8002964:	2180      	movs	r1, #128	@ 0x80
 8002966:	4805      	ldr	r0, [pc, #20]	@ (800297c <IIC_Wait_Ack+0x54>)
 8002968:	f005 fe86 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 800296c:	f7ff ff16 	bl	800279c <IIC_Delay>
    return re;
 8002970:	79fb      	ldrb	r3, [r7, #7]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40020000 	.word	0x40020000

08002980 <IIC_Ack>:
*	��    �Σ���
*	�� �� ֵ: ��
*********************************************************************************************************
*/
void IIC_Ack(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
    IIC_SDA_0();	/* CPU����SDA = 0 */
 8002984:	2200      	movs	r2, #0
 8002986:	2140      	movs	r1, #64	@ 0x40
 8002988:	480c      	ldr	r0, [pc, #48]	@ (80029bc <IIC_Ack+0x3c>)
 800298a:	f005 fe75 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 800298e:	f7ff ff05 	bl	800279c <IIC_Delay>
    IIC_SCL_1();	/* CPU����1��ʱ�� */
 8002992:	2201      	movs	r2, #1
 8002994:	2180      	movs	r1, #128	@ 0x80
 8002996:	4809      	ldr	r0, [pc, #36]	@ (80029bc <IIC_Ack+0x3c>)
 8002998:	f005 fe6e 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 800299c:	f7ff fefe 	bl	800279c <IIC_Delay>
    IIC_SCL_0();
 80029a0:	2200      	movs	r2, #0
 80029a2:	2180      	movs	r1, #128	@ 0x80
 80029a4:	4805      	ldr	r0, [pc, #20]	@ (80029bc <IIC_Ack+0x3c>)
 80029a6:	f005 fe67 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 80029aa:	f7ff fef7 	bl	800279c <IIC_Delay>
    IIC_SDA_1();	/* CPU�ͷ�SDA���� */
 80029ae:	2201      	movs	r2, #1
 80029b0:	2140      	movs	r1, #64	@ 0x40
 80029b2:	4802      	ldr	r0, [pc, #8]	@ (80029bc <IIC_Ack+0x3c>)
 80029b4:	f005 fe60 	bl	8008678 <HAL_GPIO_WritePin>
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40020000 	.word	0x40020000

080029c0 <IIC_NAck>:
*	��    �Σ���
*	�� �� ֵ: ��
*********************************************************************************************************
*/
void IIC_NAck(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
    IIC_SDA_1();	/* CPU����SDA = 1 */
 80029c4:	2201      	movs	r2, #1
 80029c6:	2140      	movs	r1, #64	@ 0x40
 80029c8:	480a      	ldr	r0, [pc, #40]	@ (80029f4 <IIC_NAck+0x34>)
 80029ca:	f005 fe55 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 80029ce:	f7ff fee5 	bl	800279c <IIC_Delay>
    IIC_SCL_1();	/* CPU����1��ʱ�� */
 80029d2:	2201      	movs	r2, #1
 80029d4:	2180      	movs	r1, #128	@ 0x80
 80029d6:	4807      	ldr	r0, [pc, #28]	@ (80029f4 <IIC_NAck+0x34>)
 80029d8:	f005 fe4e 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 80029dc:	f7ff fede 	bl	800279c <IIC_Delay>
    IIC_SCL_0();
 80029e0:	2200      	movs	r2, #0
 80029e2:	2180      	movs	r1, #128	@ 0x80
 80029e4:	4803      	ldr	r0, [pc, #12]	@ (80029f4 <IIC_NAck+0x34>)
 80029e6:	f005 fe47 	bl	8008678 <HAL_GPIO_WritePin>
    IIC_Delay();
 80029ea:	f7ff fed7 	bl	800279c <IIC_Delay>
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40020000 	.word	0x40020000

080029f8 <IIC_GPIO_Init>:
*	��    �Σ���
*	�� �� ֵ: ��
*********************************************************************************************************
*/
void IIC_GPIO_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_IIC_ENABLE;	/* ��GPIOʱ�� */
 80029fe:	2300      	movs	r3, #0
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4b0e      	ldr	r3, [pc, #56]	@ (8002a3c <IIC_GPIO_Init+0x44>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a0d      	ldr	r2, [pc, #52]	@ (8002a3c <IIC_GPIO_Init+0x44>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <IIC_GPIO_Init+0x44>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStructure.Pin = IIC_SCL_PIN | IIC_SDA_PIN;
 8002a1a:	23c0      	movs	r3, #192	@ 0xc0
 8002a1c:	607b      	str	r3, [r7, #4]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;  	/* ��©��� */
 8002a22:	2311      	movs	r3, #17
 8002a24:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIO_PORT_IIC, &GPIO_InitStructure);
 8002a26:	1d3b      	adds	r3, r7, #4
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <IIC_GPIO_Init+0x48>)
 8002a2c:	f005 fc88 	bl	8008340 <HAL_GPIO_Init>

    /* ��һ��ֹͣ�ź�, ��λIIC�����ϵ������豸������ģʽ */
    IIC_Stop();
 8002a30:	f7ff fee8 	bl	8002804 <IIC_Stop>
}
 8002a34:	bf00      	nop
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020000 	.word	0x40020000

08002a44 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8002a4e:	4b29      	ldr	r3, [pc, #164]	@ (8002af4 <set_int_enable+0xb0>)
 8002a50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01c      	beq.n	8002a92 <set_int_enable+0x4e>
        if (enable)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	e001      	b.n	8002a68 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002a68:	4b22      	ldr	r3, [pc, #136]	@ (8002af4 <set_int_enable+0xb0>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	7818      	ldrb	r0, [r3, #0]
 8002a6e:	4b21      	ldr	r3, [pc, #132]	@ (8002af4 <set_int_enable+0xb0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	7bd9      	ldrb	r1, [r3, #15]
 8002a74:	f107 030f 	add.w	r3, r7, #15
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f003 fbe8 	bl	800624e <MPU_Write_Len>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <set_int_enable+0x46>
            return -1;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
 8002a88:	e030      	b.n	8002aec <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <set_int_enable+0xb0>)
 8002a8e:	745a      	strb	r2, [r3, #17]
 8002a90:	e02b      	b.n	8002aea <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8002a92:	4b18      	ldr	r3, [pc, #96]	@ (8002af4 <set_int_enable+0xb0>)
 8002a94:	7a9b      	ldrb	r3, [r3, #10]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <set_int_enable+0x5c>
            return -1;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	e025      	b.n	8002aec <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <set_int_enable+0x6e>
 8002aa6:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <set_int_enable+0xb0>)
 8002aa8:	7c5b      	ldrb	r3, [r3, #17]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <set_int_enable+0x6e>
            return 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e01c      	b.n	8002aec <set_int_enable+0xa8>
        if (enable)
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e001      	b.n	8002ac2 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <set_int_enable+0xb0>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	7818      	ldrb	r0, [r3, #0]
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <set_int_enable+0xb0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	7bd9      	ldrb	r1, [r3, #15]
 8002ace:	f107 030f 	add.w	r3, r7, #15
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f003 fbbb 	bl	800624e <MPU_Write_Len>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <set_int_enable+0xa0>
            return -1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	e003      	b.n	8002aec <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <set_int_enable+0xb0>)
 8002ae8:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	2000001c 	.word	0x2000001c

08002af8 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = BIT_RESET;
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002b02:	4b7c      	ldr	r3, [pc, #496]	@ (8002cf4 <mpu_init+0x1fc>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	7818      	ldrb	r0, [r3, #0]
 8002b08:	4b7a      	ldr	r3, [pc, #488]	@ (8002cf4 <mpu_init+0x1fc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	7c99      	ldrb	r1, [r3, #18]
 8002b0e:	463b      	mov	r3, r7
 8002b10:	2201      	movs	r2, #1
 8002b12:	f003 fb9c 	bl	800624e <MPU_Write_Len>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <mpu_init+0x2a>
        return -1;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	e0e4      	b.n	8002cec <mpu_init+0x1f4>
    delay_ms(100);
 8002b22:	2064      	movs	r0, #100	@ 0x64
 8002b24:	f004 fa04 	bl	8006f30 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002b2c:	4b71      	ldr	r3, [pc, #452]	@ (8002cf4 <mpu_init+0x1fc>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	7818      	ldrb	r0, [r3, #0]
 8002b32:	4b70      	ldr	r3, [pc, #448]	@ (8002cf4 <mpu_init+0x1fc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	7c99      	ldrb	r1, [r3, #18]
 8002b38:	463b      	mov	r3, r7
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f003 fb87 	bl	800624e <MPU_Write_Len>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <mpu_init+0x54>
        return -1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4a:	e0cf      	b.n	8002cec <mpu_init+0x1f4>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 8002b4c:	4b69      	ldr	r3, [pc, #420]	@ (8002cf4 <mpu_init+0x1fc>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	7818      	ldrb	r0, [r3, #0]
 8002b52:	4b68      	ldr	r3, [pc, #416]	@ (8002cf4 <mpu_init+0x1fc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	7d99      	ldrb	r1, [r3, #22]
 8002b58:	463b      	mov	r3, r7
 8002b5a:	2206      	movs	r2, #6
 8002b5c:	f003 fbb9 	bl	80062d2 <MPU_Read_Len>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <mpu_init+0x74>
        return -1;
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6a:	e0bf      	b.n	8002cec <mpu_init+0x1f4>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8002b6c:	797b      	ldrb	r3, [r7, #5]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	b25b      	sxtb	r3, r3
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	b25a      	sxtb	r2, r3
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	b25b      	sxtb	r3, r3
 8002b84:	4313      	orrs	r3, r2
 8002b86:	b25a      	sxtb	r2, r3
          (data[1] & 0x01);
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	b25b      	sxtb	r3, r3
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <mpu_init+0xc8>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d103      	bne.n	8002bac <mpu_init+0xb4>
            st.chip_cfg.accel_half = 1;
 8002ba4:	4b53      	ldr	r3, [pc, #332]	@ (8002cf4 <mpu_init+0x1fc>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	74da      	strb	r2, [r3, #19]
 8002baa:	e02d      	b.n	8002c08 <mpu_init+0x110>
        else if (rev == 2)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d103      	bne.n	8002bba <mpu_init+0xc2>
            st.chip_cfg.accel_half = 0;
 8002bb2:	4b50      	ldr	r3, [pc, #320]	@ (8002cf4 <mpu_init+0x1fc>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	74da      	strb	r2, [r3, #19]
 8002bb8:	e026      	b.n	8002c08 <mpu_init+0x110>
        else {
							//log_e("Unsupported software product rev %d.\n", rev);
            return -1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbe:	e095      	b.n	8002cec <mpu_init+0x1f4>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, data))
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf4 <mpu_init+0x1fc>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	7818      	ldrb	r0, [r3, #0]
 8002bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf4 <mpu_init+0x1fc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	78d9      	ldrb	r1, [r3, #3]
 8002bcc:	463b      	mov	r3, r7
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f003 fb7f 	bl	80062d2 <MPU_Read_Len>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <mpu_init+0xe8>
            return -1;
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	e085      	b.n	8002cec <mpu_init+0x1f4>
        rev = data[0] & 0x0F;
 8002be0:	783b      	ldrb	r3, [r7, #0]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <mpu_init+0xfc>
            //log_e("Product ID read as 0 indicates device is either "
              //    "incompatible or an MPU3050.\n");
            return -1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e07b      	b.n	8002cec <mpu_init+0x1f4>
        } else if (rev == 4) {
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d103      	bne.n	8002c02 <mpu_init+0x10a>
            //log_i("Half sensitivity part found.\n");
            st.chip_cfg.accel_half = 1;
 8002bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf4 <mpu_init+0x1fc>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	74da      	strb	r2, [r3, #19]
 8002c00:	e002      	b.n	8002c08 <mpu_init+0x110>
        } else
            st.chip_cfg.accel_half = 0;
 8002c02:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8002c08:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c0a:	22ff      	movs	r2, #255	@ 0xff
 8002c0c:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8002c0e:	4b39      	ldr	r3, [pc, #228]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c10:	22ff      	movs	r2, #255	@ 0xff
 8002c12:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8002c14:	4b37      	ldr	r3, [pc, #220]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c16:	22ff      	movs	r2, #255	@ 0xff
 8002c18:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8002c1a:	4b36      	ldr	r3, [pc, #216]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c1c:	22ff      	movs	r2, #255	@ 0xff
 8002c1e:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8002c20:	4b34      	ldr	r3, [pc, #208]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c26:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8002c28:	4b32      	ldr	r3, [pc, #200]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c2a:	22ff      	movs	r2, #255	@ 0xff
 8002c2c:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8002c2e:	4b31      	ldr	r3, [pc, #196]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c30:	22ff      	movs	r2, #255	@ 0xff
 8002c32:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8002c34:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8002c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 8002c42:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 8002c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8002c50:	4b28      	ldr	r3, [pc, #160]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8002c56:	220c      	movs	r2, #12
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4827      	ldr	r0, [pc, #156]	@ (8002cf8 <mpu_init+0x200>)
 8002c5c:	f00e fd45 	bl	80116ea <memset>
    st.chip_cfg.dmp_on = 0;
 8002c60:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 8002c68:	4b22      	ldr	r3, [pc, #136]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8002c70:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <mpu_init+0x1fc>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 8002c76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c7a:	f000 f9f3 	bl	8003064 <mpu_set_gyro_fsr>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <mpu_init+0x192>
        return -1;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	e030      	b.n	8002cec <mpu_init+0x1f4>
    if (mpu_set_accel_fsr(2))
 8002c8a:	2002      	movs	r0, #2
 8002c8c:	f000 fa78 	bl	8003180 <mpu_set_accel_fsr>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <mpu_init+0x1a4>
        return -1;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	e027      	b.n	8002cec <mpu_init+0x1f4>
    if (mpu_set_lpf(42))
 8002c9c:	202a      	movs	r0, #42	@ 0x2a
 8002c9e:	f000 fb15 	bl	80032cc <mpu_set_lpf>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <mpu_init+0x1b6>
        return -1;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	e01e      	b.n	8002cec <mpu_init+0x1f4>
    if (mpu_set_sample_rate(50))
 8002cae:	2032      	movs	r0, #50	@ 0x32
 8002cb0:	f000 fb74 	bl	800339c <mpu_set_sample_rate>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <mpu_init+0x1c8>
        return -1;
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbe:	e015      	b.n	8002cec <mpu_init+0x1f4>
    if (mpu_configure_fifo(0))
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f000 fc59 	bl	8003578 <mpu_configure_fifo>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <mpu_init+0x1da>
        return -1;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	e00c      	b.n	8002cec <mpu_init+0x1f4>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f000 fda6 	bl	8003824 <mpu_set_bypass>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <mpu_init+0x1ec>
        return -1;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce2:	e003      	b.n	8002cec <mpu_init+0x1f4>
#endif

    mpu_set_sensors(0);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f000 fc99 	bl	800361c <mpu_set_sensors>
    return 0;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	2000001c 	.word	0x2000001c
 8002cf8:	20000032 	.word	0x20000032

08002cfc <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b28      	cmp	r3, #40	@ 0x28
 8002d0a:	d902      	bls.n	8002d12 <mpu_lp_accel_mode+0x16>
        return -1;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d10:	e06a      	b.n	8002de8 <mpu_lp_accel_mode+0xec>

    if (!rate) {
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d11c      	bne.n	8002d52 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f000 fe49 	bl	80039b0 <mpu_set_int_latched>
        tmp[0] = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8002d22:	2307      	movs	r3, #7
 8002d24:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8002d26:	4b32      	ldr	r3, [pc, #200]	@ (8002df0 <mpu_lp_accel_mode+0xf4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	7818      	ldrb	r0, [r3, #0]
 8002d2c:	4b30      	ldr	r3, [pc, #192]	@ (8002df0 <mpu_lp_accel_mode+0xf4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	7c99      	ldrb	r1, [r3, #18]
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	2202      	movs	r2, #2
 8002d38:	f003 fa89 	bl	800624e <MPU_Write_Len>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <mpu_lp_accel_mode+0x4c>
            return -1;
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	e04f      	b.n	8002de8 <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 8002d48:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <mpu_lp_accel_mode+0xf4>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	751a      	strb	r2, [r3, #20]
        return 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e04a      	b.n	8002de8 <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8002d52:	2001      	movs	r0, #1
 8002d54:	f000 fe2c 	bl	80039b0 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 8002d62:	2300      	movs	r3, #0
 8002d64:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8002d66:	2005      	movs	r0, #5
 8002d68:	f000 fab0 	bl	80032cc <mpu_set_lpf>
 8002d6c:	e016      	b.n	8002d9c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d805      	bhi.n	8002d80 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 8002d74:	2301      	movs	r3, #1
 8002d76:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8002d78:	2005      	movs	r0, #5
 8002d7a:	f000 faa7 	bl	80032cc <mpu_set_lpf>
 8002d7e:	e00d      	b.n	8002d9c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	2b14      	cmp	r3, #20
 8002d84:	d805      	bhi.n	8002d92 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 8002d86:	2302      	movs	r3, #2
 8002d88:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8002d8a:	200a      	movs	r0, #10
 8002d8c:	f000 fa9e 	bl	80032cc <mpu_set_lpf>
 8002d90:	e004      	b.n	8002d9c <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8002d92:	2303      	movs	r3, #3
 8002d94:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8002d96:	2014      	movs	r0, #20
 8002d98:	f000 fa98 	bl	80032cc <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8002d9c:	7b7b      	ldrb	r3, [r7, #13]
 8002d9e:	019b      	lsls	r3, r3, #6
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	f043 0307 	orr.w	r3, r3, #7
 8002da6:	b25b      	sxtb	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8002dac:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <mpu_lp_accel_mode+0xf4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	7818      	ldrb	r0, [r3, #0]
 8002db2:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <mpu_lp_accel_mode+0xf4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	7c99      	ldrb	r1, [r3, #18]
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f003 fa46 	bl	800624e <MPU_Write_Len>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <mpu_lp_accel_mode+0xd2>
        return -1;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dcc:	e00c      	b.n	8002de8 <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8002dce:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <mpu_lp_accel_mode+0xf4>)
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <mpu_lp_accel_mode+0xf4>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8002dda:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <mpu_lp_accel_mode+0xf4>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f000 fbc9 	bl	8003578 <mpu_configure_fifo>

    return 0;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2000001c 	.word	0x2000001c

08002df4 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002dfa:	4b7e      	ldr	r3, [pc, #504]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002dfc:	7a9b      	ldrb	r3, [r3, #10]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <mpu_reset_fifo+0x14>
        return -1;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295
 8002e06:	e0f1      	b.n	8002fec <mpu_reset_fifo+0x1f8>

    data = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002e0c:	4b79      	ldr	r3, [pc, #484]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	7818      	ldrb	r0, [r3, #0]
 8002e12:	4b78      	ldr	r3, [pc, #480]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	7bd9      	ldrb	r1, [r3, #15]
 8002e18:	1dfb      	adds	r3, r7, #7
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f003 fa17 	bl	800624e <MPU_Write_Len>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <mpu_reset_fifo+0x38>
        return -1;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	e0df      	b.n	8002fec <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8002e2c:	4b71      	ldr	r3, [pc, #452]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	7818      	ldrb	r0, [r3, #0]
 8002e32:	4b70      	ldr	r3, [pc, #448]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	7959      	ldrb	r1, [r3, #5]
 8002e38:	1dfb      	adds	r3, r7, #7
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f003 fa07 	bl	800624e <MPU_Write_Len>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <mpu_reset_fifo+0x58>
        return -1;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	e0cf      	b.n	8002fec <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002e4c:	4b69      	ldr	r3, [pc, #420]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	7818      	ldrb	r0, [r3, #0]
 8002e52:	4b68      	ldr	r3, [pc, #416]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	7919      	ldrb	r1, [r3, #4]
 8002e58:	1dfb      	adds	r3, r7, #7
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f003 f9f7 	bl	800624e <MPU_Write_Len>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <mpu_reset_fifo+0x78>
        return -1;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	e0bf      	b.n	8002fec <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 8002e6c:	4b61      	ldr	r3, [pc, #388]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d05c      	beq.n	8002f30 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8002e76:	230c      	movs	r3, #12
 8002e78:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002e7a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	7818      	ldrb	r0, [r3, #0]
 8002e80:	4b5c      	ldr	r3, [pc, #368]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	7919      	ldrb	r1, [r3, #4]
 8002e86:	1dfb      	adds	r3, r7, #7
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f003 f9e0 	bl	800624e <MPU_Write_Len>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <mpu_reset_fifo+0xa6>
            return -1;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
 8002e98:	e0a8      	b.n	8002fec <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8002e9a:	2032      	movs	r0, #50	@ 0x32
 8002e9c:	f004 f848 	bl	8006f30 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8002ea0:	23c0      	movs	r3, #192	@ 0xc0
 8002ea2:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002ea4:	4b53      	ldr	r3, [pc, #332]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002ea6:	7a9b      	ldrb	r3, [r3, #10]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	f043 0320 	orr.w	r3, r3, #32
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002eba:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	7818      	ldrb	r0, [r3, #0]
 8002ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	7919      	ldrb	r1, [r3, #4]
 8002ec6:	1dfb      	adds	r3, r7, #7
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f003 f9c0 	bl	800624e <MPU_Write_Len>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <mpu_reset_fifo+0xe6>
            return -1;
 8002ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed8:	e088      	b.n	8002fec <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 8002eda:	4b46      	ldr	r3, [pc, #280]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002edc:	7c5b      	ldrb	r3, [r3, #17]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	71fb      	strb	r3, [r7, #7]
 8002ee6:	e001      	b.n	8002eec <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002eec:	4b41      	ldr	r3, [pc, #260]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	7818      	ldrb	r0, [r3, #0]
 8002ef2:	4b40      	ldr	r3, [pc, #256]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	7bd9      	ldrb	r1, [r3, #15]
 8002ef8:	1dfb      	adds	r3, r7, #7
 8002efa:	2201      	movs	r2, #1
 8002efc:	f003 f9a7 	bl	800624e <MPU_Write_Len>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <mpu_reset_fifo+0x118>
            return -1;
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0a:	e06f      	b.n	8002fec <mpu_reset_fifo+0x1f8>
        data = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8002f10:	4b38      	ldr	r3, [pc, #224]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	7818      	ldrb	r0, [r3, #0]
 8002f16:	4b37      	ldr	r3, [pc, #220]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	7959      	ldrb	r1, [r3, #5]
 8002f1c:	1dfb      	adds	r3, r7, #7
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f003 f995 	bl	800624e <MPU_Write_Len>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d05f      	beq.n	8002fea <mpu_reset_fifo+0x1f6>
            return -1;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	e05d      	b.n	8002fec <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8002f30:	2304      	movs	r3, #4
 8002f32:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002f34:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	7818      	ldrb	r0, [r3, #0]
 8002f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	7919      	ldrb	r1, [r3, #4]
 8002f40:	1dfb      	adds	r3, r7, #7
 8002f42:	2201      	movs	r2, #1
 8002f44:	f003 f983 	bl	800624e <MPU_Write_Len>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <mpu_reset_fifo+0x160>
            return -1;
 8002f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f52:	e04b      	b.n	8002fec <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8002f54:	4b27      	ldr	r3, [pc, #156]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002f56:	7c9b      	ldrb	r3, [r3, #18]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <mpu_reset_fifo+0x174>
 8002f5c:	4b25      	ldr	r3, [pc, #148]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002f5e:	7a9b      	ldrb	r3, [r3, #10]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8002f68:	2340      	movs	r3, #64	@ 0x40
 8002f6a:	71fb      	strb	r3, [r7, #7]
 8002f6c:	e001      	b.n	8002f72 <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8002f6e:	2360      	movs	r3, #96	@ 0x60
 8002f70:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002f72:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	7818      	ldrb	r0, [r3, #0]
 8002f78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	7919      	ldrb	r1, [r3, #4]
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	2201      	movs	r2, #1
 8002f82:	f003 f964 	bl	800624e <MPU_Write_Len>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <mpu_reset_fifo+0x19e>
            return -1;
 8002f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f90:	e02c      	b.n	8002fec <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8002f92:	2032      	movs	r0, #50	@ 0x32
 8002f94:	f003 ffcc 	bl	8006f30 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 8002f98:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002f9a:	7c5b      	ldrb	r3, [r3, #17]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	71fb      	strb	r3, [r7, #7]
 8002fa4:	e001      	b.n	8002faa <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002faa:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	7818      	ldrb	r0, [r3, #0]
 8002fb0:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	7bd9      	ldrb	r1, [r3, #15]
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f003 f948 	bl	800624e <MPU_Write_Len>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <mpu_reset_fifo+0x1d6>
            return -1;
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc8:	e010      	b.n	8002fec <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8002fca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	7818      	ldrb	r0, [r3, #0]
 8002fd0:	4b08      	ldr	r3, [pc, #32]	@ (8002ff4 <mpu_reset_fifo+0x200>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	7959      	ldrb	r1, [r3, #5]
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <mpu_reset_fifo+0x204>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f003 f938 	bl	800624e <MPU_Write_Len>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <mpu_reset_fifo+0x1f6>
            return -1;
 8002fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe8:	e000      	b.n	8002fec <mpu_reset_fifo+0x1f8>
    }
    return 0;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000001c 	.word	0x2000001c
 8002ff8:	2000002c 	.word	0x2000002c

08002ffc <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8003004:	4b16      	ldr	r3, [pc, #88]	@ (8003060 <mpu_get_gyro_fsr+0x64>)
 8003006:	7a1b      	ldrb	r3, [r3, #8]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d81e      	bhi.n	800304a <mpu_get_gyro_fsr+0x4e>
 800300c:	a201      	add	r2, pc, #4	@ (adr r2, 8003014 <mpu_get_gyro_fsr+0x18>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003025 	.word	0x08003025
 8003018:	0800302d 	.word	0x0800302d
 800301c:	08003037 	.word	0x08003037
 8003020:	08003041 	.word	0x08003041
    case INV_FSR_250DPS:
        fsr[0] = 250;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	22fa      	movs	r2, #250	@ 0xfa
 8003028:	801a      	strh	r2, [r3, #0]
        break;
 800302a:	e012      	b.n	8003052 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003032:	801a      	strh	r2, [r3, #0]
        break;
 8003034:	e00d      	b.n	8003052 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800303c:	801a      	strh	r2, [r3, #0]
        break;
 800303e:	e008      	b.n	8003052 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003046:	801a      	strh	r2, [r3, #0]
        break;
 8003048:	e003      	b.n	8003052 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	801a      	strh	r2, [r3, #0]
        break;
 8003050:	bf00      	nop
    }
    return 0;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	2000001c 	.word	0x2000001c

08003064 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <mpu_set_gyro_fsr+0xa4>)
 8003070:	7a9b      	ldrb	r3, [r3, #10]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <mpu_set_gyro_fsr+0x18>
        return -1;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	e041      	b.n	8003100 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003082:	d017      	beq.n	80030b4 <mpu_set_gyro_fsr+0x50>
 8003084:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003088:	dc17      	bgt.n	80030ba <mpu_set_gyro_fsr+0x56>
 800308a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800308e:	d00e      	beq.n	80030ae <mpu_set_gyro_fsr+0x4a>
 8003090:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003094:	dc11      	bgt.n	80030ba <mpu_set_gyro_fsr+0x56>
 8003096:	2bfa      	cmp	r3, #250	@ 0xfa
 8003098:	d003      	beq.n	80030a2 <mpu_set_gyro_fsr+0x3e>
 800309a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800309e:	d003      	beq.n	80030a8 <mpu_set_gyro_fsr+0x44>
 80030a0:	e00b      	b.n	80030ba <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
        break;
 80030a6:	e00b      	b.n	80030c0 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 80030a8:	2308      	movs	r3, #8
 80030aa:	73fb      	strb	r3, [r7, #15]
        break;
 80030ac:	e008      	b.n	80030c0 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 80030ae:	2310      	movs	r3, #16
 80030b0:	73fb      	strb	r3, [r7, #15]
        break;
 80030b2:	e005      	b.n	80030c0 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 80030b4:	2318      	movs	r3, #24
 80030b6:	73fb      	strb	r3, [r7, #15]
        break;
 80030b8:	e002      	b.n	80030c0 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295
 80030be:	e01f      	b.n	8003100 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 80030c0:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <mpu_set_gyro_fsr+0xa4>)
 80030c2:	7a1a      	ldrb	r2, [r3, #8]
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	08db      	lsrs	r3, r3, #3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d101      	bne.n	80030d2 <mpu_set_gyro_fsr+0x6e>
        return 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e016      	b.n	8003100 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80030d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003108 <mpu_set_gyro_fsr+0xa4>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	7818      	ldrb	r0, [r3, #0]
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <mpu_set_gyro_fsr+0xa4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	7999      	ldrb	r1, [r3, #6]
 80030de:	f107 030f 	add.w	r3, r7, #15
 80030e2:	2201      	movs	r2, #1
 80030e4:	f003 f8b3 	bl	800624e <MPU_Write_Len>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <mpu_set_gyro_fsr+0x90>
        return -1;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	e005      	b.n	8003100 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	08db      	lsrs	r3, r3, #3
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b03      	ldr	r3, [pc, #12]	@ (8003108 <mpu_set_gyro_fsr+0xa4>)
 80030fc:	721a      	strb	r2, [r3, #8]
    return 0;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	2000001c 	.word	0x2000001c

0800310c <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8003114:	4b19      	ldr	r3, [pc, #100]	@ (800317c <mpu_get_accel_fsr+0x70>)
 8003116:	7a5b      	ldrb	r3, [r3, #9]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d81b      	bhi.n	8003154 <mpu_get_accel_fsr+0x48>
 800311c:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <mpu_get_accel_fsr+0x18>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003135 	.word	0x08003135
 8003128:	0800313d 	.word	0x0800313d
 800312c:	08003145 	.word	0x08003145
 8003130:	0800314d 	.word	0x0800314d
    case INV_FSR_2G:
        fsr[0] = 2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	701a      	strb	r2, [r3, #0]
        break;
 800313a:	e00e      	b.n	800315a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2204      	movs	r2, #4
 8003140:	701a      	strb	r2, [r3, #0]
        break;
 8003142:	e00a      	b.n	800315a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2208      	movs	r2, #8
 8003148:	701a      	strb	r2, [r3, #0]
        break;
 800314a:	e006      	b.n	800315a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2210      	movs	r2, #16
 8003150:	701a      	strb	r2, [r3, #0]
        break;
 8003152:	e002      	b.n	800315a <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295
 8003158:	e00a      	b.n	8003170 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800315a:	4b08      	ldr	r3, [pc, #32]	@ (800317c <mpu_get_accel_fsr+0x70>)
 800315c:	7cdb      	ldrb	r3, [r3, #19]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	b2da      	uxtb	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	701a      	strb	r2, [r3, #0]
    return 0;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	2000001c 	.word	0x2000001c

08003180 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800318a:	4b30      	ldr	r3, [pc, #192]	@ (800324c <mpu_set_accel_fsr+0xcc>)
 800318c:	7a9b      	ldrb	r3, [r3, #10]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <mpu_set_accel_fsr+0x18>
        return -1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e054      	b.n	8003242 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	3b02      	subs	r3, #2
 800319c:	2b0e      	cmp	r3, #14
 800319e:	d82d      	bhi.n	80031fc <mpu_set_accel_fsr+0x7c>
 80031a0:	a201      	add	r2, pc, #4	@ (adr r2, 80031a8 <mpu_set_accel_fsr+0x28>)
 80031a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a6:	bf00      	nop
 80031a8:	080031e5 	.word	0x080031e5
 80031ac:	080031fd 	.word	0x080031fd
 80031b0:	080031eb 	.word	0x080031eb
 80031b4:	080031fd 	.word	0x080031fd
 80031b8:	080031fd 	.word	0x080031fd
 80031bc:	080031fd 	.word	0x080031fd
 80031c0:	080031f1 	.word	0x080031f1
 80031c4:	080031fd 	.word	0x080031fd
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	080031fd 	.word	0x080031fd
 80031d0:	080031fd 	.word	0x080031fd
 80031d4:	080031fd 	.word	0x080031fd
 80031d8:	080031fd 	.word	0x080031fd
 80031dc:	080031fd 	.word	0x080031fd
 80031e0:	080031f7 	.word	0x080031f7
    case 2:
        data = INV_FSR_2G << 3;
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]
        break;
 80031e8:	e00b      	b.n	8003202 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 80031ea:	2308      	movs	r3, #8
 80031ec:	73fb      	strb	r3, [r7, #15]
        break;
 80031ee:	e008      	b.n	8003202 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80031f0:	2310      	movs	r3, #16
 80031f2:	73fb      	strb	r3, [r7, #15]
        break;
 80031f4:	e005      	b.n	8003202 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80031f6:	2318      	movs	r3, #24
 80031f8:	73fb      	strb	r3, [r7, #15]
        break;
 80031fa:	e002      	b.n	8003202 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	e01f      	b.n	8003242 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8003202:	4b12      	ldr	r3, [pc, #72]	@ (800324c <mpu_set_accel_fsr+0xcc>)
 8003204:	7a5a      	ldrb	r2, [r3, #9]
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	08db      	lsrs	r3, r3, #3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	429a      	cmp	r2, r3
 800320e:	d101      	bne.n	8003214 <mpu_set_accel_fsr+0x94>
        return 0;
 8003210:	2300      	movs	r3, #0
 8003212:	e016      	b.n	8003242 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8003214:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <mpu_set_accel_fsr+0xcc>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	7818      	ldrb	r0, [r3, #0]
 800321a:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <mpu_set_accel_fsr+0xcc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	79d9      	ldrb	r1, [r3, #7]
 8003220:	f107 030f 	add.w	r3, r7, #15
 8003224:	2201      	movs	r2, #1
 8003226:	f003 f812 	bl	800624e <MPU_Write_Len>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <mpu_set_accel_fsr+0xb6>
        return -1;
 8003230:	f04f 33ff 	mov.w	r3, #4294967295
 8003234:	e005      	b.n	8003242 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	b2da      	uxtb	r2, r3
 800323c:	4b03      	ldr	r3, [pc, #12]	@ (800324c <mpu_set_accel_fsr+0xcc>)
 800323e:	725a      	strb	r2, [r3, #9]
    return 0;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	2000001c 	.word	0x2000001c

08003250 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8003258:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <mpu_get_lpf+0x78>)
 800325a:	7adb      	ldrb	r3, [r3, #11]
 800325c:	3b01      	subs	r3, #1
 800325e:	2b05      	cmp	r3, #5
 8003260:	d826      	bhi.n	80032b0 <mpu_get_lpf+0x60>
 8003262:	a201      	add	r2, pc, #4	@ (adr r2, 8003268 <mpu_get_lpf+0x18>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	08003281 	.word	0x08003281
 800326c:	08003289 	.word	0x08003289
 8003270:	08003291 	.word	0x08003291
 8003274:	08003299 	.word	0x08003299
 8003278:	080032a1 	.word	0x080032a1
 800327c:	080032a9 	.word	0x080032a9
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	22bc      	movs	r2, #188	@ 0xbc
 8003284:	801a      	strh	r2, [r3, #0]
        break;
 8003286:	e017      	b.n	80032b8 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2262      	movs	r2, #98	@ 0x62
 800328c:	801a      	strh	r2, [r3, #0]
        break;
 800328e:	e013      	b.n	80032b8 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	222a      	movs	r2, #42	@ 0x2a
 8003294:	801a      	strh	r2, [r3, #0]
        break;
 8003296:	e00f      	b.n	80032b8 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2214      	movs	r2, #20
 800329c:	801a      	strh	r2, [r3, #0]
        break;
 800329e:	e00b      	b.n	80032b8 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	220a      	movs	r2, #10
 80032a4:	801a      	strh	r2, [r3, #0]
        break;
 80032a6:	e007      	b.n	80032b8 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2205      	movs	r2, #5
 80032ac:	801a      	strh	r2, [r3, #0]
        break;
 80032ae:	e003      	b.n	80032b8 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	801a      	strh	r2, [r3, #0]
        break;
 80032b6:	bf00      	nop
    }
    return 0;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	2000001c 	.word	0x2000001c

080032cc <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80032d6:	4b23      	ldr	r3, [pc, #140]	@ (8003364 <mpu_set_lpf+0x98>)
 80032d8:	7a9b      	ldrb	r3, [r3, #10]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <mpu_set_lpf+0x18>
        return -1;
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	e03b      	b.n	800335c <mpu_set_lpf+0x90>

    if (lpf >= 188)
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	2bbb      	cmp	r3, #187	@ 0xbb
 80032e8:	d902      	bls.n	80032f0 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 80032ea:	2301      	movs	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
 80032ee:	e019      	b.n	8003324 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	2b61      	cmp	r3, #97	@ 0x61
 80032f4:	d902      	bls.n	80032fc <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 80032f6:	2302      	movs	r3, #2
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	e013      	b.n	8003324 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	2b29      	cmp	r3, #41	@ 0x29
 8003300:	d902      	bls.n	8003308 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8003302:	2303      	movs	r3, #3
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	e00d      	b.n	8003324 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	2b13      	cmp	r3, #19
 800330c:	d902      	bls.n	8003314 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 800330e:	2304      	movs	r3, #4
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	e007      	b.n	8003324 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	2b09      	cmp	r3, #9
 8003318:	d902      	bls.n	8003320 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800331a:	2305      	movs	r3, #5
 800331c:	73fb      	strb	r3, [r7, #15]
 800331e:	e001      	b.n	8003324 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8003320:	2306      	movs	r3, #6
 8003322:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8003324:	4b0f      	ldr	r3, [pc, #60]	@ (8003364 <mpu_set_lpf+0x98>)
 8003326:	7ada      	ldrb	r2, [r3, #11]
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	429a      	cmp	r2, r3
 800332c:	d101      	bne.n	8003332 <mpu_set_lpf+0x66>
        return 0;
 800332e:	2300      	movs	r3, #0
 8003330:	e014      	b.n	800335c <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8003332:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <mpu_set_lpf+0x98>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	7818      	ldrb	r0, [r3, #0]
 8003338:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <mpu_set_lpf+0x98>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	7899      	ldrb	r1, [r3, #2]
 800333e:	f107 030f 	add.w	r3, r7, #15
 8003342:	2201      	movs	r2, #1
 8003344:	f002 ff83 	bl	800624e <MPU_Write_Len>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <mpu_set_lpf+0x88>
        return -1;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
 8003352:	e003      	b.n	800335c <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	4b03      	ldr	r3, [pc, #12]	@ (8003364 <mpu_set_lpf+0x98>)
 8003358:	72da      	strb	r2, [r3, #11]
    return 0;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	2000001c 	.word	0x2000001c

08003368 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8003370:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <mpu_get_sample_rate+0x30>)
 8003372:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <mpu_get_sample_rate+0x18>
        return -1;
 800337a:	f04f 33ff 	mov.w	r3, #4294967295
 800337e:	e004      	b.n	800338a <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <mpu_get_sample_rate+0x30>)
 8003382:	89da      	ldrh	r2, [r3, #14]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	801a      	strh	r2, [r3, #0]
    return 0;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	2000001c 	.word	0x2000001c

0800339c <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80033a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003464 <mpu_set_sample_rate+0xc8>)
 80033a8:	7a9b      	ldrb	r3, [r3, #10]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <mpu_set_sample_rate+0x18>
        return -1;
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295
 80033b2:	e053      	b.n	800345c <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 80033b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003464 <mpu_set_sample_rate+0xc8>)
 80033b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <mpu_set_sample_rate+0x28>
        return -1;
 80033be:	f04f 33ff 	mov.w	r3, #4294967295
 80033c2:	e04b      	b.n	800345c <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 80033c4:	4b27      	ldr	r3, [pc, #156]	@ (8003464 <mpu_set_sample_rate+0xc8>)
 80033c6:	7d1b      	ldrb	r3, [r3, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00f      	beq.n	80033ec <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <mpu_set_sample_rate+0x4a>
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	2b28      	cmp	r3, #40	@ 0x28
 80033d6:	d806      	bhi.n	80033e6 <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fc8d 	bl	8002cfc <mpu_lp_accel_mode>
                return 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e03a      	b.n	800345c <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 80033e6:	2000      	movs	r0, #0
 80033e8:	f7ff fc88 	bl	8002cfc <mpu_lp_accel_mode>
        }
        if (rate < 4)
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d802      	bhi.n	80033f8 <mpu_set_sample_rate+0x5c>
            rate = 4;
 80033f2:	2304      	movs	r3, #4
 80033f4:	80fb      	strh	r3, [r7, #6]
 80033f6:	e006      	b.n	8003406 <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033fe:	d902      	bls.n	8003406 <mpu_set_sample_rate+0x6a>
            rate = 1000;
 8003400:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003404:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800340c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8003418:	4b12      	ldr	r3, [pc, #72]	@ (8003464 <mpu_set_sample_rate+0xc8>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	7818      	ldrb	r0, [r3, #0]
 800341e:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <mpu_set_sample_rate+0xc8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	7859      	ldrb	r1, [r3, #1]
 8003424:	f107 030f 	add.w	r3, r7, #15
 8003428:	2201      	movs	r2, #1
 800342a:	f002 ff10 	bl	800624e <MPU_Write_Len>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <mpu_set_sample_rate+0x9e>
            return -1;
 8003434:	f04f 33ff 	mov.w	r3, #4294967295
 8003438:	e010      	b.n	800345c <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	3301      	adds	r3, #1
 800343e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003442:	fb92 f3f3 	sdiv	r3, r2, r3
 8003446:	b29a      	uxth	r2, r3
 8003448:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <mpu_set_sample_rate+0xc8>)
 800344a:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <mpu_set_sample_rate+0xc8>)
 800344e:	89db      	ldrh	r3, [r3, #14]
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	b29b      	uxth	r3, r3
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff39 	bl	80032cc <mpu_set_lpf>
        return 0;
 800345a:	2300      	movs	r3, #0
    }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	2000001c 	.word	0x2000001c

08003468 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8003470:	4b14      	ldr	r3, [pc, #80]	@ (80034c4 <mpu_get_gyro_sens+0x5c>)
 8003472:	7a1b      	ldrb	r3, [r3, #8]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d81b      	bhi.n	80034b0 <mpu_get_gyro_sens+0x48>
 8003478:	a201      	add	r2, pc, #4	@ (adr r2, 8003480 <mpu_get_gyro_sens+0x18>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	08003491 	.word	0x08003491
 8003484:	08003499 	.word	0x08003499
 8003488:	080034a1 	.word	0x080034a1
 800348c:	080034a9 	.word	0x080034a9
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a0d      	ldr	r2, [pc, #52]	@ (80034c8 <mpu_get_gyro_sens+0x60>)
 8003494:	601a      	str	r2, [r3, #0]
        break;
 8003496:	e00e      	b.n	80034b6 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a0c      	ldr	r2, [pc, #48]	@ (80034cc <mpu_get_gyro_sens+0x64>)
 800349c:	601a      	str	r2, [r3, #0]
        break;
 800349e:	e00a      	b.n	80034b6 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0b      	ldr	r2, [pc, #44]	@ (80034d0 <mpu_get_gyro_sens+0x68>)
 80034a4:	601a      	str	r2, [r3, #0]
        break;
 80034a6:	e006      	b.n	80034b6 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0a      	ldr	r2, [pc, #40]	@ (80034d4 <mpu_get_gyro_sens+0x6c>)
 80034ac:	601a      	str	r2, [r3, #0]
        break;
 80034ae:	e002      	b.n	80034b6 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 80034b0:	f04f 33ff 	mov.w	r3, #4294967295
 80034b4:	e000      	b.n	80034b8 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	2000001c 	.word	0x2000001c
 80034c8:	43030000 	.word	0x43030000
 80034cc:	42830000 	.word	0x42830000
 80034d0:	42033333 	.word	0x42033333
 80034d4:	41833333 	.word	0x41833333

080034d8 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80034e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <mpu_get_accel_sens+0x78>)
 80034e2:	7a5b      	ldrb	r3, [r3, #9]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d81f      	bhi.n	8003528 <mpu_get_accel_sens+0x50>
 80034e8:	a201      	add	r2, pc, #4	@ (adr r2, 80034f0 <mpu_get_accel_sens+0x18>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003501 	.word	0x08003501
 80034f4:	0800350b 	.word	0x0800350b
 80034f8:	08003515 	.word	0x08003515
 80034fc:	0800351f 	.word	0x0800351f
    case INV_FSR_2G:
        sens[0] = 16384;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003506:	801a      	strh	r2, [r3, #0]
        break;
 8003508:	e011      	b.n	800352e <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f641 729c 	movw	r2, #8092	@ 0x1f9c
 8003510:	801a      	strh	r2, [r3, #0]
        break;
 8003512:	e00c      	b.n	800352e <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800351a:	801a      	strh	r2, [r3, #0]
        break;
 800351c:	e007      	b.n	800352e <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003524:	801a      	strh	r2, [r3, #0]
        break;
 8003526:	e002      	b.n	800352e <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8003528:	f04f 33ff 	mov.w	r3, #4294967295
 800352c:	e00a      	b.n	8003544 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <mpu_get_accel_sens+0x78>)
 8003530:	7cdb      	ldrb	r3, [r3, #19]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	801a      	strh	r2, [r3, #0]
    return 0;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	2000001c 	.word	0x2000001c

08003554 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 800355c:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <mpu_get_fifo_config+0x20>)
 800355e:	7c1a      	ldrb	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	701a      	strb	r2, [r3, #0]
    return 0;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	2000001c 	.word	0x2000001c

08003578 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800358e:	4b22      	ldr	r3, [pc, #136]	@ (8003618 <mpu_configure_fifo+0xa0>)
 8003590:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <mpu_configure_fifo+0x24>
        return 0;
 8003598:	2300      	movs	r3, #0
 800359a:	e038      	b.n	800360e <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 800359c:	4b1e      	ldr	r3, [pc, #120]	@ (8003618 <mpu_configure_fifo+0xa0>)
 800359e:	7a9b      	ldrb	r3, [r3, #10]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <mpu_configure_fifo+0x32>
            return -1;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	e031      	b.n	800360e <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 80035aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003618 <mpu_configure_fifo+0xa0>)
 80035ac:	7c1b      	ldrb	r3, [r3, #16]
 80035ae:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80035b0:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <mpu_configure_fifo+0xa0>)
 80035b2:	7a9a      	ldrb	r2, [r3, #10]
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	4013      	ands	r3, r2
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b17      	ldr	r3, [pc, #92]	@ (8003618 <mpu_configure_fifo+0xa0>)
 80035bc:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80035be:	4b16      	ldr	r3, [pc, #88]	@ (8003618 <mpu_configure_fifo+0xa0>)
 80035c0:	7c1b      	ldrb	r3, [r3, #16]
 80035c2:	79fa      	ldrb	r2, [r7, #7]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d003      	beq.n	80035d0 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 80035c8:	f04f 33ff 	mov.w	r3, #4294967295
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	e001      	b.n	80035d4 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <mpu_configure_fifo+0x6a>
 80035da:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <mpu_configure_fifo+0xa0>)
 80035dc:	7d1b      	ldrb	r3, [r3, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80035e2:	2001      	movs	r0, #1
 80035e4:	f7ff fa2e 	bl	8002a44 <set_int_enable>
 80035e8:	e002      	b.n	80035f0 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 80035ea:	2000      	movs	r0, #0
 80035ec:	f7ff fa2a 	bl	8002a44 <set_int_enable>
        if (sensors) {
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 80035f6:	f7ff fbfd 	bl	8002df4 <mpu_reset_fifo>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8003600:	4a05      	ldr	r2, [pc, #20]	@ (8003618 <mpu_configure_fifo+0xa0>)
 8003602:	7afb      	ldrb	r3, [r7, #11]
 8003604:	7413      	strb	r3, [r2, #16]
                return -1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e000      	b.n	800360e <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 800360c:	68fb      	ldr	r3, [r7, #12]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	2000001c 	.word	0x2000001c

0800361c <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	e007      	b.n	8003646 <mpu_set_sensors+0x2a>
    else if (sensors)
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <mpu_set_sensors+0x26>
        data = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	e001      	b.n	8003646 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8003642:	2340      	movs	r3, #64	@ 0x40
 8003644:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8003646:	4b37      	ldr	r3, [pc, #220]	@ (8003724 <mpu_set_sensors+0x108>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	7818      	ldrb	r0, [r3, #0]
 800364c:	4b35      	ldr	r3, [pc, #212]	@ (8003724 <mpu_set_sensors+0x108>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	7c99      	ldrb	r1, [r3, #18]
 8003652:	f107 030f 	add.w	r3, r7, #15
 8003656:	2201      	movs	r2, #1
 8003658:	f002 fdf9 	bl	800624e <MPU_Write_Len>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8003662:	4b30      	ldr	r3, [pc, #192]	@ (8003724 <mpu_set_sensors+0x108>)
 8003664:	2200      	movs	r2, #0
 8003666:	729a      	strb	r2, [r3, #10]
        return -1;
 8003668:	f04f 33ff 	mov.w	r3, #4294967295
 800366c:	e056      	b.n	800371c <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4b2b      	ldr	r3, [pc, #172]	@ (8003724 <mpu_set_sensors+0x108>)
 8003678:	731a      	strb	r2, [r3, #12]

    data = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d104      	bne.n	8003692 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	f043 0304 	orr.w	r3, r3, #4
 800368e:	b2db      	uxtb	r3, r3
 8003690:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	f043 0302 	orr.w	r3, r3, #2
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <mpu_set_sensors+0x108>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	7818      	ldrb	r0, [r3, #0]
 80036d4:	4b13      	ldr	r3, [pc, #76]	@ (8003724 <mpu_set_sensors+0x108>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	7cd9      	ldrb	r1, [r3, #19]
 80036da:	f107 030f 	add.w	r3, r7, #15
 80036de:	2201      	movs	r2, #1
 80036e0:	f002 fdb5 	bl	800624e <MPU_Write_Len>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 80036ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <mpu_set_sensors+0x108>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	729a      	strb	r2, [r3, #10]
        return -1;
 80036f0:	f04f 33ff 	mov.w	r3, #4294967295
 80036f4:	e012      	b.n	800371c <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <mpu_set_sensors+0xec>
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d002      	beq.n	8003708 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8003702:	2000      	movs	r0, #0
 8003704:	f000 f954 	bl	80039b0 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8003708:	4a06      	ldr	r2, [pc, #24]	@ (8003724 <mpu_set_sensors+0x108>)
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 800370e:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <mpu_set_sensors+0x108>)
 8003710:	2200      	movs	r2, #0
 8003712:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8003714:	2032      	movs	r0, #50	@ 0x32
 8003716:	f003 fc0b 	bl	8006f30 <HAL_Delay>
    return 0;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	2000001c 	.word	0x2000001c

08003728 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
                         unsigned char *more)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8003736:	4b3a      	ldr	r3, [pc, #232]	@ (8003820 <mpu_read_fifo_stream+0xf8>)
 8003738:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <mpu_read_fifo_stream+0x1e>
        return -1;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	e068      	b.n	8003818 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 8003746:	4b36      	ldr	r3, [pc, #216]	@ (8003820 <mpu_read_fifo_stream+0xf8>)
 8003748:	7a9b      	ldrb	r3, [r3, #10]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <mpu_read_fifo_stream+0x2c>
        return -1;
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
 8003752:	e061      	b.n	8003818 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8003754:	4b32      	ldr	r3, [pc, #200]	@ (8003820 <mpu_read_fifo_stream+0xf8>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	7818      	ldrb	r0, [r3, #0]
 800375a:	4b31      	ldr	r3, [pc, #196]	@ (8003820 <mpu_read_fifo_stream+0xf8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	7a99      	ldrb	r1, [r3, #10]
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	2202      	movs	r2, #2
 8003766:	f002 fdb4 	bl	80062d2 <MPU_Read_Len>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <mpu_read_fifo_stream+0x4e>
        return -1;
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	e050      	b.n	8003818 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8003776:	7d3b      	ldrb	r3, [r7, #20]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	b21a      	sxth	r2, r3
 800377c:	7d7b      	ldrb	r3, [r7, #21]
 800377e:	b21b      	sxth	r3, r3
 8003780:	4313      	orrs	r3, r2
 8003782:	b21b      	sxth	r3, r3
 8003784:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8003786:	8afa      	ldrh	r2, [r7, #22]
 8003788:	89fb      	ldrh	r3, [r7, #14]
 800378a:	429a      	cmp	r2, r3
 800378c:	d205      	bcs.n	800379a <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
        return -1;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	e03e      	b.n	8003818 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800379a:	4b21      	ldr	r3, [pc, #132]	@ (8003820 <mpu_read_fifo_stream+0xf8>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	885b      	ldrh	r3, [r3, #2]
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	8afa      	ldrh	r2, [r7, #22]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d91a      	bls.n	80037e0 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 80037aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003820 <mpu_read_fifo_stream+0xf8>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	7818      	ldrb	r0, [r3, #0]
 80037b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <mpu_read_fifo_stream+0xf8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	7c59      	ldrb	r1, [r3, #17]
 80037b6:	f107 0314 	add.w	r3, r7, #20
 80037ba:	2201      	movs	r2, #1
 80037bc:	f002 fd89 	bl	80062d2 <MPU_Read_Len>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <mpu_read_fifo_stream+0xa4>
            return -1;
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ca:	e025      	b.n	8003818 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 80037cc:	7d3b      	ldrb	r3, [r7, #20]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 80037d6:	f7ff fb0d 	bl	8002df4 <mpu_reset_fifo>
            return -2;
 80037da:	f06f 0301 	mvn.w	r3, #1
 80037de:	e01b      	b.n	8003818 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 80037e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003820 <mpu_read_fifo_stream+0xf8>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	7818      	ldrb	r0, [r3, #0]
 80037e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <mpu_read_fifo_stream+0xf8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	7ad9      	ldrb	r1, [r3, #11]
 80037ec:	89fb      	ldrh	r3, [r7, #14]
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f002 fd6e 	bl	80062d2 <MPU_Read_Len>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <mpu_read_fifo_stream+0xda>
        return -1;
 80037fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003800:	e00a      	b.n	8003818 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 8003802:	8afa      	ldrh	r2, [r7, #22]
 8003804:	89fb      	ldrh	r3, [r7, #14]
 8003806:	fbb2 f3f3 	udiv	r3, r2, r3
 800380a:	b29b      	uxth	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b2da      	uxtb	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	701a      	strb	r2, [r3, #0]
    return 0;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	2000001c 	.word	0x2000001c

08003824 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800382e:	4b5f      	ldr	r3, [pc, #380]	@ (80039ac <mpu_set_bypass+0x188>)
 8003830:	7c9b      	ldrb	r3, [r3, #18]
 8003832:	79fa      	ldrb	r2, [r7, #7]
 8003834:	429a      	cmp	r2, r3
 8003836:	d101      	bne.n	800383c <mpu_set_bypass+0x18>
        return 0;
 8003838:	2300      	movs	r3, #0
 800383a:	e0b2      	b.n	80039a2 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d050      	beq.n	80038e4 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003842:	4b5a      	ldr	r3, [pc, #360]	@ (80039ac <mpu_set_bypass+0x188>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	7818      	ldrb	r0, [r3, #0]
 8003848:	4b58      	ldr	r3, [pc, #352]	@ (80039ac <mpu_set_bypass+0x188>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	7919      	ldrb	r1, [r3, #4]
 800384e:	f107 030f 	add.w	r3, r7, #15
 8003852:	2201      	movs	r2, #1
 8003854:	f002 fd3d 	bl	80062d2 <MPU_Read_Len>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <mpu_set_bypass+0x40>
            return -1;
 800385e:	f04f 33ff 	mov.w	r3, #4294967295
 8003862:	e09e      	b.n	80039a2 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	f023 0320 	bic.w	r3, r3, #32
 800386a:	b2db      	uxtb	r3, r3
 800386c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800386e:	4b4f      	ldr	r3, [pc, #316]	@ (80039ac <mpu_set_bypass+0x188>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	7818      	ldrb	r0, [r3, #0]
 8003874:	4b4d      	ldr	r3, [pc, #308]	@ (80039ac <mpu_set_bypass+0x188>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	7919      	ldrb	r1, [r3, #4]
 800387a:	f107 030f 	add.w	r3, r7, #15
 800387e:	2201      	movs	r2, #1
 8003880:	f002 fce5 	bl	800624e <MPU_Write_Len>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <mpu_set_bypass+0x6c>
            return -1;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	e088      	b.n	80039a2 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8003890:	2003      	movs	r0, #3
 8003892:	f003 fb4d 	bl	8006f30 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8003896:	2302      	movs	r3, #2
 8003898:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800389a:	4b44      	ldr	r3, [pc, #272]	@ (80039ac <mpu_set_bypass+0x188>)
 800389c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 80038ae:	4b3f      	ldr	r3, [pc, #252]	@ (80039ac <mpu_set_bypass+0x188>)
 80038b0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d004      	beq.n	80038c2 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80038c2:	4b3a      	ldr	r3, [pc, #232]	@ (80039ac <mpu_set_bypass+0x188>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	7818      	ldrb	r0, [r3, #0]
 80038c8:	4b38      	ldr	r3, [pc, #224]	@ (80039ac <mpu_set_bypass+0x188>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	7d19      	ldrb	r1, [r3, #20]
 80038ce:	f107 030f 	add.w	r3, r7, #15
 80038d2:	2201      	movs	r2, #1
 80038d4:	f002 fcbb 	bl	800624e <MPU_Write_Len>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d05d      	beq.n	800399a <mpu_set_bypass+0x176>
            return -1;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	e05e      	b.n	80039a2 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80038e4:	4b31      	ldr	r3, [pc, #196]	@ (80039ac <mpu_set_bypass+0x188>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	7818      	ldrb	r0, [r3, #0]
 80038ea:	4b30      	ldr	r3, [pc, #192]	@ (80039ac <mpu_set_bypass+0x188>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	7919      	ldrb	r1, [r3, #4]
 80038f0:	f107 030f 	add.w	r3, r7, #15
 80038f4:	2201      	movs	r2, #1
 80038f6:	f002 fcec 	bl	80062d2 <MPU_Read_Len>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <mpu_set_bypass+0xe2>
            return -1;
 8003900:	f04f 33ff 	mov.w	r3, #4294967295
 8003904:	e04d      	b.n	80039a2 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8003906:	4b29      	ldr	r3, [pc, #164]	@ (80039ac <mpu_set_bypass+0x188>)
 8003908:	7a9b      	ldrb	r3, [r3, #10]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	f043 0320 	orr.w	r3, r3, #32
 8003918:	b2db      	uxtb	r3, r3
 800391a:	73fb      	strb	r3, [r7, #15]
 800391c:	e004      	b.n	8003928 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	f023 0320 	bic.w	r3, r3, #32
 8003924:	b2db      	uxtb	r3, r3
 8003926:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003928:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <mpu_set_bypass+0x188>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	7818      	ldrb	r0, [r3, #0]
 800392e:	4b1f      	ldr	r3, [pc, #124]	@ (80039ac <mpu_set_bypass+0x188>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	7919      	ldrb	r1, [r3, #4]
 8003934:	f107 030f 	add.w	r3, r7, #15
 8003938:	2201      	movs	r2, #1
 800393a:	f002 fc88 	bl	800624e <MPU_Write_Len>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <mpu_set_bypass+0x126>
            return -1;
 8003944:	f04f 33ff 	mov.w	r3, #4294967295
 8003948:	e02b      	b.n	80039a2 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800394a:	2003      	movs	r0, #3
 800394c:	f003 faf0 	bl	8006f30 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8003950:	4b16      	ldr	r3, [pc, #88]	@ (80039ac <mpu_set_bypass+0x188>)
 8003952:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e001      	b.n	8003964 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8003964:	4b11      	ldr	r3, [pc, #68]	@ (80039ac <mpu_set_bypass+0x188>)
 8003966:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003974:	b2db      	uxtb	r3, r3
 8003976:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003978:	4b0c      	ldr	r3, [pc, #48]	@ (80039ac <mpu_set_bypass+0x188>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	7818      	ldrb	r0, [r3, #0]
 800397e:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <mpu_set_bypass+0x188>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	7d19      	ldrb	r1, [r3, #20]
 8003984:	f107 030f 	add.w	r3, r7, #15
 8003988:	2201      	movs	r2, #1
 800398a:	f002 fc60 	bl	800624e <MPU_Write_Len>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <mpu_set_bypass+0x176>
            return -1;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
 8003998:	e003      	b.n	80039a2 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800399a:	4a04      	ldr	r2, [pc, #16]	@ (80039ac <mpu_set_bypass+0x188>)
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	7493      	strb	r3, [r2, #18]
    return 0;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	2000001c 	.word	0x2000001c

080039b0 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 80039ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003a34 <mpu_set_int_latched+0x84>)
 80039bc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80039c0:	79fa      	ldrb	r2, [r7, #7]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d101      	bne.n	80039ca <mpu_set_int_latched+0x1a>
        return 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	e030      	b.n	8003a2c <mpu_set_int_latched+0x7c>

    if (enable)
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80039d0:	2330      	movs	r3, #48	@ 0x30
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	e001      	b.n	80039da <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80039da:	4b16      	ldr	r3, [pc, #88]	@ (8003a34 <mpu_set_int_latched+0x84>)
 80039dc:	7c9b      	ldrb	r3, [r3, #18]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80039ec:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <mpu_set_int_latched+0x84>)
 80039ee:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d004      	beq.n	8003a00 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003a00:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <mpu_set_int_latched+0x84>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	7818      	ldrb	r0, [r3, #0]
 8003a06:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <mpu_set_int_latched+0x84>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	7d19      	ldrb	r1, [r3, #20]
 8003a0c:	f107 030f 	add.w	r3, r7, #15
 8003a10:	2201      	movs	r2, #1
 8003a12:	f002 fc1c 	bl	800624e <MPU_Write_Len>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <mpu_set_int_latched+0x72>
        return -1;
 8003a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a20:	e004      	b.n	8003a2c <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8003a22:	4a04      	ldr	r2, [pc, #16]	@ (8003a34 <mpu_set_int_latched+0x84>)
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	2000001c 	.word	0x2000001c

08003a38 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8003a40:	4b41      	ldr	r3, [pc, #260]	@ (8003b48 <get_accel_prod_shift+0x110>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	7818      	ldrb	r0, [r3, #0]
 8003a46:	f107 0310 	add.w	r3, r7, #16
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	210d      	movs	r1, #13
 8003a4e:	f002 fc40 	bl	80062d2 <MPU_Read_Len>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <get_accel_prod_shift+0x24>
        return 0x07;
 8003a58:	2307      	movs	r3, #7
 8003a5a:	e071      	b.n	8003b40 <get_accel_prod_shift+0x108>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8003a5c:	7c3b      	ldrb	r3, [r7, #16]
 8003a5e:	10db      	asrs	r3, r3, #3
 8003a60:	b25b      	sxtb	r3, r3
 8003a62:	f003 031c 	and.w	r3, r3, #28
 8003a66:	b25a      	sxtb	r2, r3
 8003a68:	7cfb      	ldrb	r3, [r7, #19]
 8003a6a:	111b      	asrs	r3, r3, #4
 8003a6c:	b25b      	sxtb	r3, r3
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	4313      	orrs	r3, r2
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8003a7c:	7c7b      	ldrb	r3, [r7, #17]
 8003a7e:	10db      	asrs	r3, r3, #3
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	f003 031c 	and.w	r3, r3, #28
 8003a86:	b25a      	sxtb	r2, r3
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	109b      	asrs	r3, r3, #2
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	b25b      	sxtb	r3, r3
 8003a94:	4313      	orrs	r3, r2
 8003a96:	b25b      	sxtb	r3, r3
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8003a9c:	7cbb      	ldrb	r3, [r7, #18]
 8003a9e:	10db      	asrs	r3, r3, #3
 8003aa0:	b25b      	sxtb	r3, r3
 8003aa2:	f003 031c 	and.w	r3, r3, #28
 8003aa6:	b25a      	sxtb	r2, r3
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	b25b      	sxtb	r3, r3
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b25b      	sxtb	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 8003aba:	2300      	movs	r3, #0
 8003abc:	75fb      	strb	r3, [r7, #23]
 8003abe:	e03b      	b.n	8003b38 <get_accel_prod_shift+0x100>
        if (!shift_code[ii]) {
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	3318      	adds	r3, #24
 8003ac4:	443b      	add	r3, r7
 8003ac6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d107      	bne.n	8003ade <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
            continue;
 8003adc:	e029      	b.n	8003b32 <get_accel_prod_shift+0xfa>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 8003ade:	7dfb      	ldrb	r3, [r7, #23]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4a19      	ldr	r2, [pc, #100]	@ (8003b4c <get_accel_prod_shift+0x114>)
 8003ae8:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 8003aea:	e00f      	b.n	8003b0c <get_accel_prod_shift+0xd4>
            st_shift[ii] *= 1.034f;
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4413      	add	r3, r2
 8003b00:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003b50 <get_accel_prod_shift+0x118>
 8003b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b08:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	f103 0218 	add.w	r2, r3, #24
 8003b12:	443a      	add	r2, r7
 8003b14:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	b2d1      	uxtb	r1, r2
 8003b1c:	f103 0218 	add.w	r2, r3, #24
 8003b20:	443a      	add	r2, r7
 8003b22:	f802 1c0c 	strb.w	r1, [r2, #-12]
 8003b26:	3318      	adds	r3, #24
 8003b28:	443b      	add	r3, r7
 8003b2a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1dc      	bne.n	8003aec <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	3301      	adds	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d9c0      	bls.n	8003ac0 <get_accel_prod_shift+0x88>
    }
    return 0;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	2000001c 	.word	0x2000001c
 8003b4c:	3eae147b 	.word	0x3eae147b
 8003b50:	3f845a1d 	.word	0x3f845a1d

08003b54 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	@ 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 8003b62:	f107 030c 	add.w	r3, r7, #12
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff ff66 	bl	8003a38 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b70:	e063      	b.n	8003c3a <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	4413      	add	r3, r2
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	6839      	ldr	r1, [r7, #0]
 8003b82:	440b      	add	r3, r1
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bfb8      	it	lt
 8003b8c:	425b      	neglt	r3, r3
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b96:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8003c4c <accel_self_test+0xf8>
 8003b9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	3328      	adds	r3, #40	@ 0x28
 8003ba8:	443b      	add	r3, r7
 8003baa:	3b1c      	subs	r3, #28
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	d023      	beq.n	8003c02 <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	3328      	adds	r3, #40	@ 0x28
 8003bc0:	443b      	add	r3, r7
 8003bc2:	3b1c      	subs	r3, #28
 8003bc4:	ed93 7a00 	vldr	s14, [r3]
 8003bc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bd8:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 8003bdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003be0:	eef0 7ae7 	vabs.f32	s15, s15
 8003be4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003c50 <accel_self_test+0xfc>
 8003be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf0:	dd20      	ble.n	8003c34 <accel_self_test+0xe0>
                result |= 1 << jj;
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	6a3a      	ldr	r2, [r7, #32]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	623b      	str	r3, [r7, #32]
 8003c00:	e018      	b.n	8003c34 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 8003c02:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003c54 <accel_self_test+0x100>
 8003c06:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c12:	d408      	bmi.n	8003c26 <accel_self_test+0xd2>
                   (st_shift_cust > test.max_g))
 8003c14:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8003c58 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 8003c18:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c24:	dd06      	ble.n	8003c34 <accel_self_test+0xe0>
            result |= 1 << jj;
 8003c26:	2201      	movs	r2, #1
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	6a3a      	ldr	r2, [r7, #32]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	3301      	adds	r3, #1
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	dd98      	ble.n	8003b72 <accel_self_test+0x1e>
    }

    return result;
 8003c40:	6a3b      	ldr	r3, [r7, #32]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3728      	adds	r7, #40	@ 0x28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	47800000 	.word	0x47800000
 8003c50:	3e0f5c29 	.word	0x3e0f5c29
 8003c54:	3e99999a 	.word	0x3e99999a
 8003c58:	3f733333 	.word	0x3f733333

08003c5c <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8003c6a:	4b55      	ldr	r3, [pc, #340]	@ (8003dc0 <gyro_self_test+0x164>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	7818      	ldrb	r0, [r3, #0]
 8003c70:	f107 0308 	add.w	r3, r7, #8
 8003c74:	2203      	movs	r2, #3
 8003c76:	210d      	movs	r1, #13
 8003c78:	f002 fb2b 	bl	80062d2 <MPU_Read_Len>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <gyro_self_test+0x2a>
        return 0x07;
 8003c82:	2307      	movs	r3, #7
 8003c84:	e097      	b.n	8003db6 <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 8003c86:	7a3b      	ldrb	r3, [r7, #8]
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 8003c90:	7a7b      	ldrb	r3, [r7, #9]
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 8003c9a:	7abb      	ldrb	r3, [r7, #10]
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	e080      	b.n	8003dac <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	440b      	add	r3, r1
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bfb8      	it	lt
 8003cc4:	425b      	neglt	r3, r3
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003dc4 <gyro_self_test+0x168>
 8003cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cd6:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 8003cda:	f107 0208 	add.w	r2, r7, #8
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d045      	beq.n	8003d74 <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 8003ce8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8003dc8 <gyro_self_test+0x16c>
 8003cec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cf0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003dcc <gyro_self_test+0x170>
 8003cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf8:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8003cfc:	e007      	b.n	8003d0e <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 8003cfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d02:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8003dd0 <gyro_self_test+0x174>
 8003d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d0a:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8003d0e:	f107 0208 	add.w	r2, r7, #8
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	4413      	add	r3, r2
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b2d9      	uxtb	r1, r3
 8003d1c:	f107 0208 	add.w	r2, r7, #8
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	460a      	mov	r2, r1
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	f107 0208 	add.w	r2, r7, #8
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	4413      	add	r3, r2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e3      	bne.n	8003cfe <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8003d36:	edd7 6a04 	vldr	s13, [r7, #16]
 8003d3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d4a:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 8003d4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d52:	eef0 7ae7 	vabs.f32	s15, s15
 8003d56:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8003dd4 <gyro_self_test+0x178>
 8003d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d62:	dd20      	ble.n	8003da6 <gyro_self_test+0x14a>
                result |= 1 << jj;
 8003d64:	2201      	movs	r2, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e018      	b.n	8003da6 <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 8003d74:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003d78:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d84:	d408      	bmi.n	8003d98 <gyro_self_test+0x13c>
                   (st_shift_cust > test.max_dps))
 8003d86:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003dd8 <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 8003d8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	dd06      	ble.n	8003da6 <gyro_self_test+0x14a>
            result |= 1 << jj;
 8003d98:	2201      	movs	r2, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3301      	adds	r3, #1
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	f77f af7b 	ble.w	8003caa <gyro_self_test+0x4e>
    }
    return result;
 8003db4:	69bb      	ldr	r3, [r7, #24]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	2000001c 	.word	0x2000001c
 8003dc4:	47800000 	.word	0x47800000
 8003dc8:	00000083 	.word	0x00000083
 8003dcc:	454cb000 	.word	0x454cb000
 8003dd0:	3f85e354 	.word	0x3f85e354
 8003dd4:	3e0f5c29 	.word	0x3e0f5c29
 8003dd8:	42d20000 	.word	0x42d20000

08003ddc <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 8003ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de0:	b0b8      	sub	sp, #224	@ 0xe0
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 8003de8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8003dec:	4613      	mov	r3, r2
 8003dee:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    data[1] = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8003dfe:	4ba5      	ldr	r3, [pc, #660]	@ (8004094 <get_st_biases+0x2b8>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	7818      	ldrb	r0, [r3, #0]
 8003e04:	4ba3      	ldr	r3, [pc, #652]	@ (8004094 <get_st_biases+0x2b8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	7c99      	ldrb	r1, [r3, #18]
 8003e0a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f002 fa1d 	bl	800624e <MPU_Write_Len>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <get_st_biases+0x44>
        return -1;
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1e:	e34b      	b.n	80044b8 <get_st_biases+0x6dc>
    delay_ms(200);
 8003e20:	20c8      	movs	r0, #200	@ 0xc8
 8003e22:	f003 f885 	bl	8006f30 <HAL_Delay>
    data[0] = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8003e2c:	4b99      	ldr	r3, [pc, #612]	@ (8004094 <get_st_biases+0x2b8>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	7818      	ldrb	r0, [r3, #0]
 8003e32:	4b98      	ldr	r3, [pc, #608]	@ (8004094 <get_st_biases+0x2b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	7bd9      	ldrb	r1, [r3, #15]
 8003e38:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f002 fa06 	bl	800624e <MPU_Write_Len>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <get_st_biases+0x72>
        return -1;
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4c:	e334      	b.n	80044b8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8003e4e:	4b91      	ldr	r3, [pc, #580]	@ (8004094 <get_st_biases+0x2b8>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	7818      	ldrb	r0, [r3, #0]
 8003e54:	4b8f      	ldr	r3, [pc, #572]	@ (8004094 <get_st_biases+0x2b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	7959      	ldrb	r1, [r3, #5]
 8003e5a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f002 f9f5 	bl	800624e <MPU_Write_Len>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <get_st_biases+0x94>
        return -1;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	e323      	b.n	80044b8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003e70:	4b88      	ldr	r3, [pc, #544]	@ (8004094 <get_st_biases+0x2b8>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	7818      	ldrb	r0, [r3, #0]
 8003e76:	4b87      	ldr	r3, [pc, #540]	@ (8004094 <get_st_biases+0x2b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	7c99      	ldrb	r1, [r3, #18]
 8003e7c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003e80:	2201      	movs	r2, #1
 8003e82:	f002 f9e4 	bl	800624e <MPU_Write_Len>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <get_st_biases+0xb6>
        return -1;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	e312      	b.n	80044b8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8003e92:	4b80      	ldr	r3, [pc, #512]	@ (8004094 <get_st_biases+0x2b8>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	7818      	ldrb	r0, [r3, #0]
 8003e98:	4b7e      	ldr	r3, [pc, #504]	@ (8004094 <get_st_biases+0x2b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	7dd9      	ldrb	r1, [r3, #23]
 8003e9e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f002 f9d3 	bl	800624e <MPU_Write_Len>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <get_st_biases+0xd8>
        return -1;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	e301      	b.n	80044b8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003eb4:	4b77      	ldr	r3, [pc, #476]	@ (8004094 <get_st_biases+0x2b8>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	7818      	ldrb	r0, [r3, #0]
 8003eba:	4b76      	ldr	r3, [pc, #472]	@ (8004094 <get_st_biases+0x2b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	7919      	ldrb	r1, [r3, #4]
 8003ec0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f002 f9c2 	bl	800624e <MPU_Write_Len>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <get_st_biases+0xfa>
        return -1;
 8003ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed4:	e2f0      	b.n	80044b8 <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003edc:	4b6d      	ldr	r3, [pc, #436]	@ (8004094 <get_st_biases+0x2b8>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	7818      	ldrb	r0, [r3, #0]
 8003ee2:	4b6c      	ldr	r3, [pc, #432]	@ (8004094 <get_st_biases+0x2b8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	7919      	ldrb	r1, [r3, #4]
 8003ee8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003eec:	2201      	movs	r2, #1
 8003eee:	f002 f9ae 	bl	800624e <MPU_Write_Len>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <get_st_biases+0x122>
        return -1;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	e2dc      	b.n	80044b8 <get_st_biases+0x6dc>
    delay_ms(15);
 8003efe:	200f      	movs	r0, #15
 8003f00:	f003 f816 	bl	8006f30 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8003f04:	4b63      	ldr	r3, [pc, #396]	@ (8004094 <get_st_biases+0x2b8>)
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	7a5b      	ldrb	r3, [r3, #9]
 8003f0a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 8003f0e:	4b61      	ldr	r3, [pc, #388]	@ (8004094 <get_st_biases+0x2b8>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	7818      	ldrb	r0, [r3, #0]
 8003f14:	4b5f      	ldr	r3, [pc, #380]	@ (8004094 <get_st_biases+0x2b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	7899      	ldrb	r1, [r3, #2]
 8003f1a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f002 f995 	bl	800624e <MPU_Write_Len>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <get_st_biases+0x154>
        return -1;
 8003f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2e:	e2c3      	b.n	80044b8 <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 8003f30:	4b58      	ldr	r3, [pc, #352]	@ (8004094 <get_st_biases+0x2b8>)
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	7a1b      	ldrb	r3, [r3, #8]
 8003f36:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 8003f3a:	4b56      	ldr	r3, [pc, #344]	@ (8004094 <get_st_biases+0x2b8>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	7818      	ldrb	r0, [r3, #0]
 8003f40:	4b54      	ldr	r3, [pc, #336]	@ (8004094 <get_st_biases+0x2b8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	7859      	ldrb	r1, [r3, #1]
 8003f46:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f002 f97f 	bl	800624e <MPU_Write_Len>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <get_st_biases+0x180>
        return -1;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	e2ad      	b.n	80044b8 <get_st_biases+0x6dc>
    if (hw_test)
 8003f5c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8003f64:	4b4b      	ldr	r3, [pc, #300]	@ (8004094 <get_st_biases+0x2b8>)
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	7a9b      	ldrb	r3, [r3, #10]
 8003f6a:	f063 031f 	orn	r3, r3, #31
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8003f74:	e004      	b.n	8003f80 <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 8003f76:	4b47      	ldr	r3, [pc, #284]	@ (8004094 <get_st_biases+0x2b8>)
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	7a9b      	ldrb	r3, [r3, #10]
 8003f7c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8003f80:	4b44      	ldr	r3, [pc, #272]	@ (8004094 <get_st_biases+0x2b8>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	7818      	ldrb	r0, [r3, #0]
 8003f86:	4b43      	ldr	r3, [pc, #268]	@ (8004094 <get_st_biases+0x2b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	7999      	ldrb	r1, [r3, #6]
 8003f8c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003f90:	2201      	movs	r2, #1
 8003f92:	f002 f95c 	bl	800624e <MPU_Write_Len>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <get_st_biases+0x1c6>
        return -1;
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	e28a      	b.n	80044b8 <get_st_biases+0x6dc>

    if (hw_test)
 8003fa2:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 8003faa:	4b3a      	ldr	r3, [pc, #232]	@ (8004094 <get_st_biases+0x2b8>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	7adb      	ldrb	r3, [r3, #11]
 8003fb0:	f063 031f 	orn	r3, r3, #31
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8003fba:	e002      	b.n	8003fc2 <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 8003fbc:	2318      	movs	r3, #24
 8003fbe:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 8003fc2:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <get_st_biases+0x2b8>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	7818      	ldrb	r0, [r3, #0]
 8003fc8:	4b32      	ldr	r3, [pc, #200]	@ (8004094 <get_st_biases+0x2b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	79d9      	ldrb	r1, [r3, #7]
 8003fce:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f002 f93b 	bl	800624e <MPU_Write_Len>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <get_st_biases+0x208>
        return -1;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	e269      	b.n	80044b8 <get_st_biases+0x6dc>
    if (hw_test)
 8003fe4:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <get_st_biases+0x216>
        delay_ms(200);
 8003fec:	20c8      	movs	r0, #200	@ 0xc8
 8003fee:	f002 ff9f 	bl	8006f30 <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 8003ff2:	2340      	movs	r3, #64	@ 0x40
 8003ff4:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003ff8:	4b26      	ldr	r3, [pc, #152]	@ (8004094 <get_st_biases+0x2b8>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	7818      	ldrb	r0, [r3, #0]
 8003ffe:	4b25      	ldr	r3, [pc, #148]	@ (8004094 <get_st_biases+0x2b8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	7919      	ldrb	r1, [r3, #4]
 8004004:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004008:	2201      	movs	r2, #1
 800400a:	f002 f920 	bl	800624e <MPU_Write_Len>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <get_st_biases+0x23e>
        return -1;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	e24e      	b.n	80044b8 <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 800401a:	2378      	movs	r3, #120	@ 0x78
 800401c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8004020:	4b1c      	ldr	r3, [pc, #112]	@ (8004094 <get_st_biases+0x2b8>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	7818      	ldrb	r0, [r3, #0]
 8004026:	4b1b      	ldr	r3, [pc, #108]	@ (8004094 <get_st_biases+0x2b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	7959      	ldrb	r1, [r3, #5]
 800402c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004030:	2201      	movs	r2, #1
 8004032:	f002 f90c 	bl	800624e <MPU_Write_Len>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <get_st_biases+0x266>
        return -1;
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	e23a      	b.n	80044b8 <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 8004042:	2332      	movs	r3, #50	@ 0x32
 8004044:	4618      	mov	r0, r3
 8004046:	f002 ff73 	bl	8006f30 <HAL_Delay>
    data[0] = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8004050:	4b10      	ldr	r3, [pc, #64]	@ (8004094 <get_st_biases+0x2b8>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	7818      	ldrb	r0, [r3, #0]
 8004056:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <get_st_biases+0x2b8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	7959      	ldrb	r1, [r3, #5]
 800405c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004060:	2201      	movs	r2, #1
 8004062:	f002 f8f4 	bl	800624e <MPU_Write_Len>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <get_st_biases+0x296>
        return -1;
 800406c:	f04f 33ff 	mov.w	r3, #4294967295
 8004070:	e222      	b.n	80044b8 <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8004072:	4b08      	ldr	r3, [pc, #32]	@ (8004094 <get_st_biases+0x2b8>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	7818      	ldrb	r0, [r3, #0]
 8004078:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <get_st_biases+0x2b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	7a99      	ldrb	r1, [r3, #10]
 800407e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004082:	2202      	movs	r2, #2
 8004084:	f002 f925 	bl	80062d2 <MPU_Read_Len>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <get_st_biases+0x2bc>
        return -1;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	e211      	b.n	80044b8 <get_st_biases+0x6dc>
 8004094:	2000001c 	.word	0x2000001c

    fifo_count = (data[0] << 8) | data[1];
 8004098:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	b21a      	sxth	r2, r3
 80040a0:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 80040a4:	b21b      	sxth	r3, r3
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b21b      	sxth	r3, r3
 80040aa:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 80040ae:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 80040b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <get_st_biases+0x34c>)
 80040b4:	fba3 2302 	umull	r2, r3, r3, r2
 80040b8:	08db      	lsrs	r3, r3, #3
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 80040c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040c4:	f103 0108 	add.w	r1, r3, #8
 80040c8:	2300      	movs	r3, #0
 80040ca:	600b      	str	r3, [r1, #0]
 80040cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040d0:	1d1a      	adds	r2, r3, #4
 80040d2:	680b      	ldr	r3, [r1, #0]
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040dc:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 80040de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040e2:	f103 0108 	add.w	r1, r3, #8
 80040e6:	2300      	movs	r3, #0
 80040e8:	600b      	str	r3, [r1, #0]
 80040ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040ee:	1d1a      	adds	r2, r3, #4
 80040f0:	680b      	ldr	r3, [r1, #0]
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040fa:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004102:	e0a0      	b.n	8004246 <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8004104:	4b09      	ldr	r3, [pc, #36]	@ (800412c <get_st_biases+0x350>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	7818      	ldrb	r0, [r3, #0]
 800410a:	4b08      	ldr	r3, [pc, #32]	@ (800412c <get_st_biases+0x350>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	7ad9      	ldrb	r1, [r3, #11]
 8004110:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004114:	220c      	movs	r2, #12
 8004116:	f002 f8dc 	bl	80062d2 <MPU_Read_Len>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <get_st_biases+0x354>
            return -1;
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
 8004124:	e1c8      	b.n	80044b8 <get_st_biases+0x6dc>
 8004126:	bf00      	nop
 8004128:	aaaaaaab 	.word	0xaaaaaaab
 800412c:	2000001c 	.word	0x2000001c
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8004130:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	b21a      	sxth	r2, r3
 8004138:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 800413c:	b21b      	sxth	r3, r3
 800413e:	4313      	orrs	r3, r2
 8004140:	b21b      	sxth	r3, r3
 8004142:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8004146:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	b21a      	sxth	r2, r3
 800414e:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8004152:	b21b      	sxth	r3, r3
 8004154:	4313      	orrs	r3, r2
 8004156:	b21b      	sxth	r3, r3
 8004158:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 800415c:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	b21a      	sxth	r2, r3
 8004164:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8004168:	b21b      	sxth	r3, r3
 800416a:	4313      	orrs	r3, r2
 800416c:	b21b      	sxth	r3, r3
 800416e:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
        accel[0] += (long)accel_cur[0];
 8004172:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 800417c:	441a      	add	r2, r3
 800417e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004182:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8004184:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004188:	3304      	adds	r3, #4
 800418a:	6819      	ldr	r1, [r3, #0]
 800418c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8004190:	4618      	mov	r0, r3
 8004192:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004196:	1d1a      	adds	r2, r3, #4
 8004198:	180b      	adds	r3, r1, r0
 800419a:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 800419c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041a0:	3308      	adds	r3, #8
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 80041a8:	4618      	mov	r0, r3
 80041aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041ae:	f103 0208 	add.w	r2, r3, #8
 80041b2:	180b      	adds	r3, r1, r0
 80041b4:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 80041b6:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	b21a      	sxth	r2, r3
 80041be:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80041c2:	b21b      	sxth	r3, r3
 80041c4:	4313      	orrs	r3, r2
 80041c6:	b21b      	sxth	r3, r3
 80041c8:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 80041cc:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	b21a      	sxth	r2, r3
 80041d4:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 80041d8:	b21b      	sxth	r3, r3
 80041da:	4313      	orrs	r3, r2
 80041dc:	b21b      	sxth	r3, r3
 80041de:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 80041e2:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	b21a      	sxth	r2, r3
 80041ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80041ee:	b21b      	sxth	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b21b      	sxth	r3, r3
 80041f4:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
        gyro[0] += (long)gyro_cur[0];
 80041f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8004202:	441a      	add	r2, r3
 8004204:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004208:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 800420a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800420e:	3304      	adds	r3, #4
 8004210:	6819      	ldr	r1, [r3, #0]
 8004212:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8004216:	4618      	mov	r0, r3
 8004218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800421c:	1d1a      	adds	r2, r3, #4
 800421e:	180b      	adds	r3, r1, r0
 8004220:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8004222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004226:	3308      	adds	r3, #8
 8004228:	6819      	ldr	r1, [r3, #0]
 800422a:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 800422e:	4618      	mov	r0, r3
 8004230:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004234:	f103 0208 	add.w	r2, r3, #8
 8004238:	180b      	adds	r3, r1, r0
 800423a:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 800423c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8004240:	3301      	adds	r3, #1
 8004242:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004246:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 800424a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800424e:	429a      	cmp	r2, r3
 8004250:	f4ff af58 	bcc.w	8004104 <get_st_biases+0x328>
                          packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8004254:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	17da      	asrs	r2, r3, #31
 800425c:	461c      	mov	r4, r3
 800425e:	4615      	mov	r5, r2
 8004260:	1423      	asrs	r3, r4, #16
 8004262:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004266:	0423      	lsls	r3, r4, #16
 8004268:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800426c:	2283      	movs	r2, #131	@ 0x83
 800426e:	2300      	movs	r3, #0
 8004270:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8004274:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004278:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800427c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004280:	f7fc fd0a 	bl	8000c98 <__aeabi_ldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4610      	mov	r0, r2
 800428a:	4619      	mov	r1, r3
 800428c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004290:	2200      	movs	r2, #0
 8004292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004296:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800429a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800429e:	f7fc fcfb 	bl	8000c98 <__aeabi_ldivmod>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042aa:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 80042ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042b0:	3304      	adds	r3, #4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	17da      	asrs	r2, r3, #31
 80042b6:	4698      	mov	r8, r3
 80042b8:	4691      	mov	r9, r2
 80042ba:	ea4f 4328 	mov.w	r3, r8, asr #16
 80042be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80042c2:	ea4f 4308 	mov.w	r3, r8, lsl #16
 80042c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042ca:	2283      	movs	r2, #131	@ 0x83
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042d6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80042da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80042de:	f7fc fcdb 	bl	8000c98 <__aeabi_ldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4610      	mov	r0, r2
 80042e8:	4619      	mov	r1, r3
 80042ea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80042ee:	2200      	movs	r2, #0
 80042f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80042f8:	f7fc fcce 	bl	8000c98 <__aeabi_ldivmod>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004308:	1d1a      	adds	r2, r3, #4
 800430a:	4603      	mov	r3, r0
 800430c:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 800430e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004312:	3308      	adds	r3, #8
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	17da      	asrs	r2, r3, #31
 8004318:	469a      	mov	sl, r3
 800431a:	4693      	mov	fp, r2
 800431c:	ea4f 432a 	mov.w	r3, sl, asr #16
 8004320:	677b      	str	r3, [r7, #116]	@ 0x74
 8004322:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8004326:	673b      	str	r3, [r7, #112]	@ 0x70
 8004328:	2283      	movs	r2, #131	@ 0x83
 800432a:	2300      	movs	r3, #0
 800432c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800432e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004330:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004334:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004338:	f7fc fcae 	bl	8000c98 <__aeabi_ldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004348:	2200      	movs	r2, #0
 800434a:	663b      	str	r3, [r7, #96]	@ 0x60
 800434c:	667a      	str	r2, [r7, #100]	@ 0x64
 800434e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004352:	f7fc fca1 	bl	8000c98 <__aeabi_ldivmod>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004362:	f103 0208 	add.w	r2, r3, #8
 8004366:	4603      	mov	r3, r0
 8004368:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 800436a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	17da      	asrs	r2, r3, #31
 8004372:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004374:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004376:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800437a:	460b      	mov	r3, r1
 800437c:	141b      	asrs	r3, r3, #16
 800437e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004380:	460b      	mov	r3, r1
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	653b      	str	r3, [r7, #80]	@ 0x50
 8004386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800438a:	2300      	movs	r3, #0
 800438c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800438e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004390:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004394:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8004398:	f7fc fc7e 	bl	8000c98 <__aeabi_ldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80043a8:	2200      	movs	r2, #0
 80043aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80043ac:	647a      	str	r2, [r7, #68]	@ 0x44
 80043ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043b2:	f7fc fc71 	bl	8000c98 <__aeabi_ldivmod>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043be:	601a      	str	r2, [r3, #0]
                      packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 80043c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043c4:	3304      	adds	r3, #4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	17da      	asrs	r2, r3, #31
 80043ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80043d2:	460b      	mov	r3, r1
 80043d4:	141b      	asrs	r3, r3, #16
 80043d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d8:	460b      	mov	r3, r1
 80043da:	041b      	lsls	r3, r3, #16
 80043dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043e2:	2300      	movs	r3, #0
 80043e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80043e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043ec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80043f0:	f7fc fc52 	bl	8000c98 <__aeabi_ldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4610      	mov	r0, r2
 80043fa:	4619      	mov	r1, r3
 80043fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004400:	2200      	movs	r2, #0
 8004402:	623b      	str	r3, [r7, #32]
 8004404:	627a      	str	r2, [r7, #36]	@ 0x24
 8004406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800440a:	f7fc fc45 	bl	8000c98 <__aeabi_ldivmod>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
 8004416:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800441a:	3304      	adds	r3, #4
 800441c:	4602      	mov	r2, r0
 800441e:	601a      	str	r2, [r3, #0]
                      packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8004420:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004424:	3308      	adds	r3, #8
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	17da      	asrs	r2, r3, #31
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	61fa      	str	r2, [r7, #28]
 800442e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004432:	460b      	mov	r3, r1
 8004434:	141b      	asrs	r3, r3, #16
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	460b      	mov	r3, r1
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004442:	2300      	movs	r3, #0
 8004444:	60ba      	str	r2, [r7, #8]
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800444c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004450:	f7fc fc22 	bl	8000c98 <__aeabi_ldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004460:	2200      	movs	r2, #0
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800446a:	f7fc fc15 	bl	8000c98 <__aeabi_ldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800447a:	3308      	adds	r3, #8
 800447c:	4602      	mov	r2, r0
 800447e:	601a      	str	r2, [r3, #0]
                      packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8004480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004484:	3308      	adds	r3, #8
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	dd0a      	ble.n	80044a2 <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 800448c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004490:	3308      	adds	r3, #8
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004498:	3308      	adds	r3, #8
 800449a:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	e009      	b.n	80044b6 <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 80044a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80044a6:	3308      	adds	r3, #8
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80044ae:	3308      	adds	r3, #8
 80044b0:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 80044b4:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	37e0      	adds	r7, #224	@ 0xe0
 80044bc:	46bd      	mov	sp, r7
 80044be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c2:	bf00      	nop

080044c4 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08e      	sub	sp, #56	@ 0x38
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 80044ce:	2302      	movs	r3, #2
 80044d0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 80044d4:	4b64      	ldr	r3, [pc, #400]	@ (8004668 <mpu_run_self_test+0x1a4>)
 80044d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 80044de:	2000      	movs	r0, #0
 80044e0:	f000 f9e6 	bl	80048b0 <mpu_set_dmp_state>
        dmp_was_on = 1;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80044ea:	e002      	b.n	80044f2 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 80044f2:	f107 030c 	add.w	r3, r7, #12
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fd80 	bl	8002ffc <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 80044fc:	f107 030f 	add.w	r3, r7, #15
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fe03 	bl	800310c <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fea0 	bl	8003250 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8004510:	f107 030a 	add.w	r3, r7, #10
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe ff27 	bl	8003368 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 800451a:	4b53      	ldr	r3, [pc, #332]	@ (8004668 <mpu_run_self_test+0x1a4>)
 800451c:	7a9b      	ldrb	r3, [r3, #10]
 800451e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8004522:	f107 030e 	add.w	r3, r7, #14
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff f814 	bl	8003554 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 800452c:	2300      	movs	r3, #0
 800452e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004530:	e00a      	b.n	8004548 <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8004532:	2200      	movs	r2, #0
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff fc50 	bl	8003ddc <get_st_biases>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8004542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004544:	3301      	adds	r3, #1
 8004546:	637b      	str	r3, [r7, #52]	@ 0x34
 8004548:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800454c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800454e:	429a      	cmp	r2, r3
 8004550:	dbef      	blt.n	8004532 <mpu_run_self_test+0x6e>
 8004552:	e000      	b.n	8004556 <mpu_run_self_test+0x92>
            break;
 8004554:	bf00      	nop
    if (ii == tries) {
 8004556:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800455a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800455c:	429a      	cmp	r2, r3
 800455e:	d102      	bne.n	8004566 <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8004564:	e045      	b.n	80045f2 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 8004566:	2300      	movs	r3, #0
 8004568:	637b      	str	r3, [r7, #52]	@ 0x34
 800456a:	e00d      	b.n	8004588 <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 800456c:	f107 0110 	add.w	r1, r7, #16
 8004570:	f107 031c 	add.w	r3, r7, #28
 8004574:	2201      	movs	r2, #1
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fc30 	bl	8003ddc <get_st_biases>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8004582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004584:	3301      	adds	r3, #1
 8004586:	637b      	str	r3, [r7, #52]	@ 0x34
 8004588:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800458c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800458e:	429a      	cmp	r2, r3
 8004590:	dbec      	blt.n	800456c <mpu_run_self_test+0xa8>
 8004592:	e000      	b.n	8004596 <mpu_run_self_test+0xd2>
            break;
 8004594:	bf00      	nop
    if (ii == tries) {
 8004596:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800459a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800459c:	429a      	cmp	r2, r3
 800459e:	d102      	bne.n	80045a6 <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 80045a4:	e025      	b.n	80045f2 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 80045a6:	f107 0310 	add.w	r3, r7, #16
 80045aa:	4619      	mov	r1, r3
 80045ac:	6838      	ldr	r0, [r7, #0]
 80045ae:	f7ff fad1 	bl	8003b54 <accel_self_test>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 80045b8:	f107 031c 	add.w	r3, r7, #28
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff fb4c 	bl	8003c5c <gyro_self_test>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    result = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!gyro_result)
 80045ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d103      	bne.n	80045de <mpu_run_self_test+0x11a>
        result |= 0x01;
 80045d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!accel_result)
 80045de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d104      	bne.n	80045f0 <mpu_run_self_test+0x12c>
        result |= 0x02;
 80045e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e8:	f043 0302 	orr.w	r3, r3, #2
 80045ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ee:	e000      	b.n	80045f2 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 80045f0:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 80045f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004668 <mpu_run_self_test+0x1a4>)
 80045f4:	22ff      	movs	r2, #255	@ 0xff
 80045f6:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80045f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004668 <mpu_run_self_test+0x1a4>)
 80045fa:	22ff      	movs	r2, #255	@ 0xff
 80045fc:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80045fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004668 <mpu_run_self_test+0x1a4>)
 8004600:	22ff      	movs	r2, #255	@ 0xff
 8004602:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8004604:	4b18      	ldr	r3, [pc, #96]	@ (8004668 <mpu_run_self_test+0x1a4>)
 8004606:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800460a:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 800460c:	4b16      	ldr	r3, [pc, #88]	@ (8004668 <mpu_run_self_test+0x1a4>)
 800460e:	22ff      	movs	r2, #255	@ 0xff
 8004610:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8004612:	4b15      	ldr	r3, [pc, #84]	@ (8004668 <mpu_run_self_test+0x1a4>)
 8004614:	22ff      	movs	r2, #255	@ 0xff
 8004616:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8004618:	4b13      	ldr	r3, [pc, #76]	@ (8004668 <mpu_run_self_test+0x1a4>)
 800461a:	2201      	movs	r2, #1
 800461c:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 800461e:	89bb      	ldrh	r3, [r7, #12]
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe fd1f 	bl	8003064 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe fda9 	bl	8003180 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 800462e:	893b      	ldrh	r3, [r7, #8]
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe fe4b 	bl	80032cc <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 8004636:	897b      	ldrh	r3, [r7, #10]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe feaf 	bl	800339c <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 800463e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe ffea 	bl	800361c <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 8004648:	7bbb      	ldrb	r3, [r7, #14]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe ff94 	bl	8003578 <mpu_configure_fifo>

    if (dmp_was_on)
 8004650:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 8004658:	2001      	movs	r0, #1
 800465a:	f000 f929 	bl	80048b0 <mpu_set_dmp_state>

    return result;
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8004660:	4618      	mov	r0, r3
 8004662:	3738      	adds	r7, #56	@ 0x38
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	2000001c 	.word	0x2000001c

0800466c <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
                  unsigned char *data)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	603a      	str	r2, [r7, #0]
 8004676:	80fb      	strh	r3, [r7, #6]
 8004678:	460b      	mov	r3, r1
 800467a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <mpu_write_mem+0x1c>
        return -1;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	e03d      	b.n	8004704 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8004688:	4b20      	ldr	r3, [pc, #128]	@ (800470c <mpu_write_mem+0xa0>)
 800468a:	7a9b      	ldrb	r3, [r3, #10]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d102      	bne.n	8004696 <mpu_write_mem+0x2a>
        return -1;
 8004690:	f04f 33ff 	mov.w	r3, #4294967295
 8004694:	e036      	b.n	8004704 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	b29b      	uxth	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80046a6:	7b7b      	ldrb	r3, [r7, #13]
 80046a8:	461a      	mov	r2, r3
 80046aa:	88bb      	ldrh	r3, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	4a17      	ldr	r2, [pc, #92]	@ (800470c <mpu_write_mem+0xa0>)
 80046b0:	6852      	ldr	r2, [r2, #4]
 80046b2:	8952      	ldrh	r2, [r2, #10]
 80046b4:	4293      	cmp	r3, r2
 80046b6:	dd02      	ble.n	80046be <mpu_write_mem+0x52>
        return -1;
 80046b8:	f04f 33ff 	mov.w	r3, #4294967295
 80046bc:	e022      	b.n	8004704 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80046be:	4b13      	ldr	r3, [pc, #76]	@ (800470c <mpu_write_mem+0xa0>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	7818      	ldrb	r0, [r3, #0]
 80046c4:	4b11      	ldr	r3, [pc, #68]	@ (800470c <mpu_write_mem+0xa0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	7e19      	ldrb	r1, [r3, #24]
 80046ca:	f107 030c 	add.w	r3, r7, #12
 80046ce:	2202      	movs	r2, #2
 80046d0:	f001 fdbd 	bl	800624e <MPU_Write_Len>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <mpu_write_mem+0x74>
        return -1;
 80046da:	f04f 33ff 	mov.w	r3, #4294967295
 80046de:	e011      	b.n	8004704 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 80046e0:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <mpu_write_mem+0xa0>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	7818      	ldrb	r0, [r3, #0]
 80046e6:	4b09      	ldr	r3, [pc, #36]	@ (800470c <mpu_write_mem+0xa0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	7d59      	ldrb	r1, [r3, #21]
 80046ec:	88bb      	ldrh	r3, [r7, #4]
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f001 fdac 	bl	800624e <MPU_Write_Len>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <mpu_write_mem+0x96>
        return -1;
 80046fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004700:	e000      	b.n	8004704 <mpu_write_mem+0x98>
    return 0;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	2000001c 	.word	0x2000001c

08004710 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
                 unsigned char *data)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	603a      	str	r2, [r7, #0]
 800471a:	80fb      	strh	r3, [r7, #6]
 800471c:	460b      	mov	r3, r1
 800471e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <mpu_read_mem+0x1c>
        return -1;
 8004726:	f04f 33ff 	mov.w	r3, #4294967295
 800472a:	e03d      	b.n	80047a8 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 800472c:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <mpu_read_mem+0xa0>)
 800472e:	7a9b      	ldrb	r3, [r3, #10]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <mpu_read_mem+0x2a>
        return -1;
 8004734:	f04f 33ff 	mov.w	r3, #4294967295
 8004738:	e036      	b.n	80047a8 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	b29b      	uxth	r3, r3
 8004740:	b2db      	uxtb	r3, r3
 8004742:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800474a:	7b7b      	ldrb	r3, [r7, #13]
 800474c:	461a      	mov	r2, r3
 800474e:	88bb      	ldrh	r3, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	4a17      	ldr	r2, [pc, #92]	@ (80047b0 <mpu_read_mem+0xa0>)
 8004754:	6852      	ldr	r2, [r2, #4]
 8004756:	8952      	ldrh	r2, [r2, #10]
 8004758:	4293      	cmp	r3, r2
 800475a:	dd02      	ble.n	8004762 <mpu_read_mem+0x52>
        return -1;
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
 8004760:	e022      	b.n	80047a8 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8004762:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <mpu_read_mem+0xa0>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	7818      	ldrb	r0, [r3, #0]
 8004768:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <mpu_read_mem+0xa0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	7e19      	ldrb	r1, [r3, #24]
 800476e:	f107 030c 	add.w	r3, r7, #12
 8004772:	2202      	movs	r2, #2
 8004774:	f001 fd6b 	bl	800624e <MPU_Write_Len>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <mpu_read_mem+0x74>
        return -1;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295
 8004782:	e011      	b.n	80047a8 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8004784:	4b0a      	ldr	r3, [pc, #40]	@ (80047b0 <mpu_read_mem+0xa0>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	7818      	ldrb	r0, [r3, #0]
 800478a:	4b09      	ldr	r3, [pc, #36]	@ (80047b0 <mpu_read_mem+0xa0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	7d59      	ldrb	r1, [r3, #21]
 8004790:	88bb      	ldrh	r3, [r7, #4]
 8004792:	b2da      	uxtb	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f001 fd9c 	bl	80062d2 <MPU_Read_Len>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <mpu_read_mem+0x96>
        return -1;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295
 80047a4:	e000      	b.n	80047a8 <mpu_read_mem+0x98>
    return 0;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	2000001c 	.word	0x2000001c

080047b4 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
                      unsigned short start_addr, unsigned short sample_rate)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	@ 0x28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	4611      	mov	r1, r2
 80047be:	461a      	mov	r2, r3
 80047c0:	4603      	mov	r3, r0
 80047c2:	81fb      	strh	r3, [r7, #14]
 80047c4:	460b      	mov	r3, r1
 80047c6:	81bb      	strh	r3, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 80047cc:	4b37      	ldr	r3, [pc, #220]	@ (80048ac <mpu_load_firmware+0xf8>)
 80047ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 80047d6:	f04f 33ff 	mov.w	r3, #4294967295
 80047da:	e062      	b.n	80048a2 <mpu_load_firmware+0xee>

    if (!firmware)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d102      	bne.n	80047e8 <mpu_load_firmware+0x34>
        return -1;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295
 80047e6:	e05c      	b.n	80048a2 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 80047e8:	2300      	movs	r3, #0
 80047ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80047ec:	e034      	b.n	8004858 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 80047ee:	89fa      	ldrh	r2, [r7, #14]
 80047f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	bfa8      	it	ge
 80047f8:	2310      	movge	r3, #16
 80047fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80047fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	441a      	add	r2, r3
 8004802:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8004804:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff ff30 	bl	800466c <mpu_write_mem>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <mpu_load_firmware+0x64>
            return -1;
 8004812:	f04f 33ff 	mov.w	r3, #4294967295
 8004816:	e044      	b.n	80048a2 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 8004818:	f107 0214 	add.w	r2, r7, #20
 800481c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800481e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ff75 	bl	8004710 <mpu_read_mem>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <mpu_load_firmware+0x7e>
            return -1;
 800482c:	f04f 33ff 	mov.w	r3, #4294967295
 8004830:	e037      	b.n	80048a2 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 8004832:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	4413      	add	r3, r2
 8004838:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800483a:	f107 0114 	add.w	r1, r7, #20
 800483e:	4618      	mov	r0, r3
 8004840:	f00c ff43 	bl	80116ca <memcmp>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <mpu_load_firmware+0x9c>
            return -2;
 800484a:	f06f 0301 	mvn.w	r3, #1
 800484e:	e028      	b.n	80048a2 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8004850:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004852:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004854:	4413      	add	r3, r2
 8004856:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004858:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800485a:	89fb      	ldrh	r3, [r7, #14]
 800485c:	429a      	cmp	r2, r3
 800485e:	d3c6      	bcc.n	80047ee <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8004860:	89bb      	ldrh	r3, [r7, #12]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	b29b      	uxth	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 800486a:	89bb      	ldrh	r3, [r7, #12]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8004870:	4b0e      	ldr	r3, [pc, #56]	@ (80048ac <mpu_load_firmware+0xf8>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	7818      	ldrb	r0, [r3, #0]
 8004876:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <mpu_load_firmware+0xf8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	7e99      	ldrb	r1, [r3, #26]
 800487c:	f107 0310 	add.w	r3, r7, #16
 8004880:	2202      	movs	r2, #2
 8004882:	f001 fce4 	bl	800624e <MPU_Write_Len>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <mpu_load_firmware+0xde>
        return -1;
 800488c:	f04f 33ff 	mov.w	r3, #4294967295
 8004890:	e007      	b.n	80048a2 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8004892:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <mpu_load_firmware+0xf8>)
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800489a:	4a04      	ldr	r2, [pc, #16]	@ (80048ac <mpu_load_firmware+0xf8>)
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	84d3      	strh	r3, [r2, #38]	@ 0x26
    return 0;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3728      	adds	r7, #40	@ 0x28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	2000001c 	.word	0x2000001c

080048b0 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 80048ba:	4b26      	ldr	r3, [pc, #152]	@ (8004954 <mpu_set_dmp_state+0xa4>)
 80048bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048c0:	79fa      	ldrb	r2, [r7, #7]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d101      	bne.n	80048ca <mpu_set_dmp_state+0x1a>
        return 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e040      	b.n	800494c <mpu_set_dmp_state+0x9c>

    if (enable) {
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d027      	beq.n	8004920 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 80048d0:	4b20      	ldr	r3, [pc, #128]	@ (8004954 <mpu_set_dmp_state+0xa4>)
 80048d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <mpu_set_dmp_state+0x30>
            return -1;
 80048da:	f04f 33ff 	mov.w	r3, #4294967295
 80048de:	e035      	b.n	800494c <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 80048e0:	2000      	movs	r0, #0
 80048e2:	f7fe f8af 	bl	8002a44 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 80048e6:	2000      	movs	r0, #0
 80048e8:	f7fe ff9c 	bl	8003824 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 80048ec:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <mpu_set_dmp_state+0xa4>)
 80048ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fe fd53 	bl	800339c <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80048fa:	4b16      	ldr	r3, [pc, #88]	@ (8004954 <mpu_set_dmp_state+0xa4>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	7818      	ldrb	r0, [r3, #0]
 8004900:	f107 030f 	add.w	r3, r7, #15
 8004904:	2201      	movs	r2, #1
 8004906:	2123      	movs	r1, #35	@ 0x23
 8004908:	f001 fca1 	bl	800624e <MPU_Write_Len>
        st.chip_cfg.dmp_on = 1;
 800490c:	4b11      	ldr	r3, [pc, #68]	@ (8004954 <mpu_set_dmp_state+0xa4>)
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8004914:	2001      	movs	r0, #1
 8004916:	f7fe f895 	bl	8002a44 <set_int_enable>
        mpu_reset_fifo();
 800491a:	f7fe fa6b 	bl	8002df4 <mpu_reset_fifo>
 800491e:	e014      	b.n	800494a <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8004920:	2000      	movs	r0, #0
 8004922:	f7fe f88f 	bl	8002a44 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8004926:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <mpu_set_dmp_state+0xa4>)
 8004928:	7c1b      	ldrb	r3, [r3, #16]
 800492a:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800492c:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <mpu_set_dmp_state+0xa4>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	7818      	ldrb	r0, [r3, #0]
 8004932:	f107 030f 	add.w	r3, r7, #15
 8004936:	2201      	movs	r2, #1
 8004938:	2123      	movs	r1, #35	@ 0x23
 800493a:	f001 fc88 	bl	800624e <MPU_Write_Len>
        st.chip_cfg.dmp_on = 0;
 800493e:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <mpu_set_dmp_state+0xa4>)
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mpu_reset_fifo();
 8004946:	f7fe fa55 	bl	8002df4 <mpu_reset_fifo>
    }
    return 0;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	2000001c 	.word	0x2000001c

08004958 <run_self_test>:
                                           0, 1, 0,
                                           0, 0, 1
                                         };

uint8_t run_self_test(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08a      	sub	sp, #40	@ 0x28
 800495c:	af00      	add	r7, sp, #0
    int result;
    //char test_packet[4] = {0};
    long gyro[3], accel[3];
    result = mpu_run_self_test(gyro, accel);
 800495e:	f107 0208 	add.w	r2, r7, #8
 8004962:	f107 0314 	add.w	r3, r7, #20
 8004966:	4611      	mov	r1, r2
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fdab 	bl	80044c4 <mpu_run_self_test>
 800496e:	6278      	str	r0, [r7, #36]	@ 0x24
    if (result == 0x3)
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	2b03      	cmp	r3, #3
 8004974:	d14a      	bne.n	8004a0c <run_self_test+0xb4>
        /* Test passed. We can trust the gyro data here, so let's push it down
        * to the DMP.
        */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);
 8004976:	1d3b      	adds	r3, r7, #4
 8004978:	4618      	mov	r0, r3
 800497a:	f7fe fd75 	bl	8003468 <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004988:	edd7 7a01 	vldr	s15, [r7, #4]
 800498c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004994:	ee17 3a90 	vmov	r3, s15
 8004998:	617b      	str	r3, [r7, #20]
        gyro[1] = (long)(gyro[1] * sens);
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	ee07 3a90 	vmov	s15, r3
 80049a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80049a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049b0:	ee17 3a90 	vmov	r3, s15
 80049b4:	61bb      	str	r3, [r7, #24]
        gyro[2] = (long)(gyro[2] * sens);
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80049c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049cc:	ee17 3a90 	vmov	r3, s15
 80049d0:	61fb      	str	r3, [r7, #28]
        dmp_set_gyro_bias(gyro);
 80049d2:	f107 0314 	add.w	r3, r7, #20
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fb28 	bl	800502c <dmp_set_gyro_bias>
//        mpu_get_accel_sens(&accel_sens);
        accel_sens=0;
 80049dc:	2300      	movs	r3, #0
 80049de:	847b      	strh	r3, [r7, #34]	@ 0x22
        accel[0] *= accel_sens;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80049e4:	fb02 f303 	mul.w	r3, r2, r3
 80049e8:	60bb      	str	r3, [r7, #8]
        accel[1] *= accel_sens;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	60fb      	str	r3, [r7, #12]
        accel[2] *= accel_sens;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80049f8:	fb02 f303 	mul.w	r3, r2, r3
 80049fc:	613b      	str	r3, [r7, #16]
        dmp_set_accel_bias(accel);
 80049fe:	f107 0308 	add.w	r3, r7, #8
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fc1c 	bl	8005240 <dmp_set_accel_bias>
        return 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <run_self_test+0xb6>
    } else return 1;
 8004a0c:	2301      	movs	r3, #1
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3728      	adds	r7, #40	@ 0x28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <inv_orientation_matrix_to_scalar>:

unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f821 	bl	8004a66 <inv_row_2_scale>
 8004a24:	4603      	mov	r3, r0
 8004a26:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3303      	adds	r3, #3
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 f81a 	bl	8004a66 <inv_row_2_scale>
 8004a32:	4603      	mov	r3, r0
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	b21a      	sxth	r2, r3
 8004a38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	b21b      	sxth	r3, r3
 8004a40:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3306      	adds	r3, #6
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f80d 	bl	8004a66 <inv_row_2_scale>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	019b      	lsls	r3, r3, #6
 8004a50:	b21a      	sxth	r2, r3
 8004a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	b21b      	sxth	r3, r3
 8004a5a:	81fb      	strh	r3, [r7, #14]


    return scalar;
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <inv_row_2_scale>:

unsigned short inv_row_2_scale(const signed char *row)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b085      	sub	sp, #20
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f993 3000 	ldrsb.w	r3, [r3]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	dd02      	ble.n	8004a7e <inv_row_2_scale+0x18>
        b = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	81fb      	strh	r3, [r7, #14]
 8004a7c:	e02d      	b.n	8004ada <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f993 3000 	ldrsb.w	r3, [r3]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	da02      	bge.n	8004a8e <inv_row_2_scale+0x28>
        b = 4;
 8004a88:	2304      	movs	r3, #4
 8004a8a:	81fb      	strh	r3, [r7, #14]
 8004a8c:	e025      	b.n	8004ada <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3301      	adds	r3, #1
 8004a92:	f993 3000 	ldrsb.w	r3, [r3]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	dd02      	ble.n	8004aa0 <inv_row_2_scale+0x3a>
        b = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	81fb      	strh	r3, [r7, #14]
 8004a9e:	e01c      	b.n	8004ada <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	da02      	bge.n	8004ab2 <inv_row_2_scale+0x4c>
        b = 5;
 8004aac:	2305      	movs	r3, #5
 8004aae:	81fb      	strh	r3, [r7, #14]
 8004ab0:	e013      	b.n	8004ada <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3302      	adds	r3, #2
 8004ab6:	f993 3000 	ldrsb.w	r3, [r3]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	dd02      	ble.n	8004ac4 <inv_row_2_scale+0x5e>
        b = 2;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	81fb      	strh	r3, [r7, #14]
 8004ac2:	e00a      	b.n	8004ada <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3302      	adds	r3, #2
 8004ac8:	f993 3000 	ldrsb.w	r3, [r3]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da02      	bge.n	8004ad6 <inv_row_2_scale+0x70>
        b = 6;
 8004ad0:	2306      	movs	r3, #6
 8004ad2:	81fb      	strh	r3, [r7, #14]
 8004ad4:	e001      	b.n	8004ada <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 8004ad6:	2307      	movs	r3, #7
 8004ad8:	81fb      	strh	r3, [r7, #14]
    return b;
 8004ada:	89fb      	ldrh	r3, [r7, #14]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <mget_ms>:

void mget_ms(unsigned long *time)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]

}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <mpu_dmp_init>:


uint8_t mpu_dmp_init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
    uint8_t res=0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	71fb      	strb	r3, [r7, #7]
    MPU_IIC_Init();
 8004b06:	f7fd ff77 	bl	80029f8 <IIC_GPIO_Init>
    if(mpu_init()==0)
 8004b0a:	f7fd fff5 	bl	8002af8 <mpu_init>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d157      	bne.n	8004bc4 <mpu_dmp_init+0xc8>
    {
        res=mpu_set_sensors(INV_XYZ_GYRO|INV_XYZ_ACCEL);
 8004b14:	2078      	movs	r0, #120	@ 0x78
 8004b16:	f7fe fd81 	bl	800361c <mpu_set_sensors>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	71fb      	strb	r3, [r7, #7]
        if(res)return 1;
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <mpu_dmp_init+0x2c>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e050      	b.n	8004bca <mpu_dmp_init+0xce>
        res=mpu_configure_fifo(INV_XYZ_GYRO|INV_XYZ_ACCEL);
 8004b28:	2078      	movs	r0, #120	@ 0x78
 8004b2a:	f7fe fd25 	bl	8003578 <mpu_configure_fifo>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
        if(res)return 2;
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <mpu_dmp_init+0x40>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e046      	b.n	8004bca <mpu_dmp_init+0xce>
        res=mpu_set_sample_rate(DEFAULT_MPU_HZ);
 8004b3c:	20c8      	movs	r0, #200	@ 0xc8
 8004b3e:	f7fe fc2d 	bl	800339c <mpu_set_sample_rate>
 8004b42:	4603      	mov	r3, r0
 8004b44:	71fb      	strb	r3, [r7, #7]
        if(res)return 3;
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <mpu_dmp_init+0x54>
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e03c      	b.n	8004bca <mpu_dmp_init+0xce>
        res=dmp_load_motion_driver_firmware();
 8004b50:	f000 f970 	bl	8004e34 <dmp_load_motion_driver_firmware>
 8004b54:	4603      	mov	r3, r0
 8004b56:	71fb      	strb	r3, [r7, #7]
        if(res)return 4;
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <mpu_dmp_init+0x66>
 8004b5e:	2304      	movs	r3, #4
 8004b60:	e033      	b.n	8004bca <mpu_dmp_init+0xce>
        res=dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));
 8004b62:	481c      	ldr	r0, [pc, #112]	@ (8004bd4 <mpu_dmp_init+0xd8>)
 8004b64:	f7ff ff57 	bl	8004a16 <inv_orientation_matrix_to_scalar>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f972 	bl	8004e54 <dmp_set_orientation>
 8004b70:	4603      	mov	r3, r0
 8004b72:	71fb      	strb	r3, [r7, #7]
        if(res)return 5;
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <mpu_dmp_init+0x82>
 8004b7a:	2305      	movs	r3, #5
 8004b7c:	e025      	b.n	8004bca <mpu_dmp_init+0xce>
        res=dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT|DMP_FEATURE_TAP|
 8004b7e:	f240 1073 	movw	r0, #371	@ 0x173
 8004b82:	f000 fee9 	bl	8005958 <dmp_enable_feature>
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
                               DMP_FEATURE_ANDROID_ORIENT|DMP_FEATURE_SEND_RAW_ACCEL|DMP_FEATURE_SEND_CAL_GYRO|
                               DMP_FEATURE_GYRO_CAL);
        if(res)return 6;
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <mpu_dmp_init+0x98>
 8004b90:	2306      	movs	r3, #6
 8004b92:	e01a      	b.n	8004bca <mpu_dmp_init+0xce>
        res=dmp_set_fifo_rate(DEFAULT_MPU_HZ);
 8004b94:	20c8      	movs	r0, #200	@ 0xc8
 8004b96:	f000 fc55 	bl	8005444 <dmp_set_fifo_rate>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
        if(res)return 7;
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <mpu_dmp_init+0xac>
 8004ba4:	2307      	movs	r3, #7
 8004ba6:	e010      	b.n	8004bca <mpu_dmp_init+0xce>
        res=run_self_test();
 8004ba8:	f7ff fed6 	bl	8004958 <run_self_test>
 8004bac:	4603      	mov	r3, r0
 8004bae:	71fb      	strb	r3, [r7, #7]
//        if(res)return 8;
        res=mpu_set_dmp_state(1);
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	f7ff fe7d 	bl	80048b0 <mpu_set_dmp_state>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	71fb      	strb	r3, [r7, #7]
        if(res)return 9;
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <mpu_dmp_init+0xcc>
 8004bc0:	2309      	movs	r3, #9
 8004bc2:	e002      	b.n	8004bca <mpu_dmp_init+0xce>
    } else return 10;
 8004bc4:	230a      	movs	r3, #10
 8004bc6:	e000      	b.n	8004bca <mpu_dmp_init+0xce>
    return 0;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000048 	.word	0x20000048

08004bd8 <mpu_dmp_get_data>:

uint8_t mpu_dmp_get_data(float *pitch,float *roll,float *yaw)
{
 8004bd8:	b5b0      	push	{r4, r5, r7, lr}
 8004bda:	b094      	sub	sp, #80	@ 0x50
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
    float q0=1.0f,q1=0.0f,q2=0.0f,q3=0.0f;
 8004be4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004be8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
    unsigned long sensor_timestamp;
    short gyro[3], accel[3], sensors;
    unsigned char more;
    long quat[4];
    if(dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more))return 1;
 8004bfc:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8004c00:	f107 0210 	add.w	r2, r7, #16
 8004c04:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004c08:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8004c0c:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	4623      	mov	r3, r4
 8004c1a:	f001 f887 	bl	8005d2c <dmp_read_fifo>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <mpu_dmp_get_data+0x50>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0f8      	b.n	8004e1a <mpu_dmp_get_data+0x242>
    if (sensors & INV_XYZ_ACCEL)
    send_packet(PACKET_TYPE_ACCEL, accel); */
    /* Unlike gyro and accel, quaternions are written to the FIFO in the body frame, q30.
     * The orientation is set by the scalar passed to dmp_set_orientation during initialization.
    **/
    if(sensors&INV_WXYZ_QUAT)
 8004c28:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80f0 	beq.w	8004e18 <mpu_dmp_get_data+0x240>
    {
        q0 = quat[0] / q30;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c42:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8004e30 <mpu_dmp_get_data+0x258>
 8004c46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c4a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        q1 = quat[1] / q30;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c58:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8004e30 <mpu_dmp_get_data+0x258>
 8004c5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c60:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        q2 = quat[2] / q30;
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c6e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004e30 <mpu_dmp_get_data+0x258>
 8004c72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c76:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        q3 = quat[3] / q30;
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	ee07 3a90 	vmov	s15, r3
 8004c80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c84:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8004e30 <mpu_dmp_get_data+0x258>
 8004c88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c8c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

        *pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
 8004c90:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004c94:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8004c98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004c9c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ca4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004ca8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004cac:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb8:	ee17 0a90 	vmov	r0, s15
 8004cbc:	f7fb fc4c 	bl	8000558 <__aeabi_f2d>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	ec43 2b10 	vmov	d0, r2, r3
 8004cc8:	f010 f93c 	bl	8014f44 <asin>
 8004ccc:	ec51 0b10 	vmov	r0, r1, d0
 8004cd0:	a355      	add	r3, pc, #340	@ (adr r3, 8004e28 <mpu_dmp_get_data+0x250>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	f7fb fc97 	bl	8000608 <__aeabi_dmul>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4610      	mov	r0, r2
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f7fb ff89 	bl	8000bf8 <__aeabi_d2f>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	601a      	str	r2, [r3, #0]
        *roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
 8004cec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004cf0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004cf4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cfc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004d00:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004d04:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d10:	ee17 0a90 	vmov	r0, s15
 8004d14:	f7fb fc20 	bl	8000558 <__aeabi_f2d>
 8004d18:	4604      	mov	r4, r0
 8004d1a:	460d      	mov	r5, r1
 8004d1c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004d20:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8004d24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d28:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d30:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004d34:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004d38:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d4c:	ee17 0a90 	vmov	r0, s15
 8004d50:	f7fb fc02 	bl	8000558 <__aeabi_f2d>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	ec43 2b11 	vmov	d1, r2, r3
 8004d5c:	ec45 4b10 	vmov	d0, r4, r5
 8004d60:	f010 f924 	bl	8014fac <atan2>
 8004d64:	ec51 0b10 	vmov	r0, r1, d0
 8004d68:	a32f      	add	r3, pc, #188	@ (adr r3, 8004e28 <mpu_dmp_get_data+0x250>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f7fb fc4b 	bl	8000608 <__aeabi_dmul>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f7fb ff3d 	bl	8000bf8 <__aeabi_d2f>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	601a      	str	r2, [r3, #0]
        *yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
 8004d84:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004d88:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d90:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8004d94:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004da4:	ee17 0a90 	vmov	r0, s15
 8004da8:	f7fb fbd6 	bl	8000558 <__aeabi_f2d>
 8004dac:	4604      	mov	r4, r0
 8004dae:	460d      	mov	r5, r1
 8004db0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004db4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004db8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004dbc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dc4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004dc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004dcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004dd0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004dd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ddc:	ee17 0a90 	vmov	r0, s15
 8004de0:	f7fb fbba 	bl	8000558 <__aeabi_f2d>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	ec43 2b11 	vmov	d1, r2, r3
 8004dec:	ec45 4b10 	vmov	d0, r4, r5
 8004df0:	f010 f8dc 	bl	8014fac <atan2>
 8004df4:	ec51 0b10 	vmov	r0, r1, d0
 8004df8:	a30b      	add	r3, pc, #44	@ (adr r3, 8004e28 <mpu_dmp_get_data+0x250>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb fc03 	bl	8000608 <__aeabi_dmul>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f7fb fef5 	bl	8000bf8 <__aeabi_d2f>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]
    } else return 2;
    return 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <mpu_dmp_get_data+0x242>
    } else return 2;
 8004e18:	2302      	movs	r3, #2
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3748      	adds	r7, #72	@ 0x48
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bdb0      	pop	{r4, r5, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	f3af 8000 	nop.w
 8004e28:	66666666 	.word	0x66666666
 8004e2c:	404ca666 	.word	0x404ca666
 8004e30:	4e800000 	.word	0x4e800000

08004e34 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8004e38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e3c:	23c8      	movs	r3, #200	@ 0xc8
 8004e3e:	4904      	ldr	r1, [pc, #16]	@ (8004e50 <dmp_load_motion_driver_firmware+0x1c>)
 8004e40:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 8004e44:	f7ff fcb6 	bl	80047b4 <mpu_load_firmware>
 8004e48:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	08015bf0 	.word	0x08015bf0

08004e54 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8004e5e:	4a6e      	ldr	r2, [pc, #440]	@ (8005018 <dmp_set_orientation+0x1c4>)
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	4611      	mov	r1, r2
 8004e68:	8019      	strh	r1, [r3, #0]
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	0c12      	lsrs	r2, r2, #16
 8004e6e:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8004e70:	4a6a      	ldr	r2, [pc, #424]	@ (800501c <dmp_set_orientation+0x1c8>)
 8004e72:	f107 0310 	add.w	r3, r7, #16
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	4611      	mov	r1, r2
 8004e7a:	8019      	strh	r1, [r3, #0]
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	0c12      	lsrs	r2, r2, #16
 8004e80:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8004e82:	4a67      	ldr	r2, [pc, #412]	@ (8005020 <dmp_set_orientation+0x1cc>)
 8004e84:	f107 030c 	add.w	r3, r7, #12
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	8019      	strh	r1, [r3, #0]
 8004e8e:	3302      	adds	r3, #2
 8004e90:	0c12      	lsrs	r2, r2, #16
 8004e92:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8004e94:	4a63      	ldr	r2, [pc, #396]	@ (8005024 <dmp_set_orientation+0x1d0>)
 8004e96:	f107 0308 	add.w	r3, r7, #8
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	8019      	strh	r1, [r3, #0]
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	0c12      	lsrs	r2, r2, #16
 8004ea4:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	3320      	adds	r3, #32
 8004eae:	443b      	add	r3, r7
 8004eb0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004eb4:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	08db      	lsrs	r3, r3, #3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	3320      	adds	r3, #32
 8004ec2:	443b      	add	r3, r7
 8004ec4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004ec8:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	099b      	lsrs	r3, r3, #6
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	3320      	adds	r3, #32
 8004ed6:	443b      	add	r3, r7
 8004ed8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004edc:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	3320      	adds	r3, #32
 8004ee6:	443b      	add	r3, r7
 8004ee8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004eec:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	08db      	lsrs	r3, r3, #3
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	3320      	adds	r3, #32
 8004efa:	443b      	add	r3, r7
 8004efc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004f00:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	099b      	lsrs	r3, r3, #6
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	3320      	adds	r3, #32
 8004f0e:	443b      	add	r3, r7
 8004f10:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004f14:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8004f16:	f107 031c 	add.w	r3, r7, #28
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2103      	movs	r1, #3
 8004f1e:	f240 4026 	movw	r0, #1062	@ 0x426
 8004f22:	f7ff fba3 	bl	800466c <mpu_write_mem>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <dmp_set_orientation+0xde>
        return -1;
 8004f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f30:	e06e      	b.n	8005010 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8004f32:	f107 0318 	add.w	r3, r7, #24
 8004f36:	461a      	mov	r2, r3
 8004f38:	2103      	movs	r1, #3
 8004f3a:	f240 402a 	movw	r0, #1066	@ 0x42a
 8004f3e:	f7ff fb95 	bl	800466c <mpu_write_mem>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <dmp_set_orientation+0xfa>
        return -1;
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4c:	e060      	b.n	8005010 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8004f4e:	f107 031c 	add.w	r3, r7, #28
 8004f52:	f107 020c 	add.w	r2, r7, #12
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	4611      	mov	r1, r2
 8004f5a:	8019      	strh	r1, [r3, #0]
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	0c12      	lsrs	r2, r2, #16
 8004f60:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8004f62:	f107 0318 	add.w	r3, r7, #24
 8004f66:	f107 0208 	add.w	r2, r7, #8
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	8019      	strh	r1, [r3, #0]
 8004f70:	3302      	adds	r3, #2
 8004f72:	0c12      	lsrs	r2, r2, #16
 8004f74:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8004f80:	7f3b      	ldrb	r3, [r7, #28]
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8004f8a:	7e3b      	ldrb	r3, [r7, #24]
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 8004f9e:	7f7b      	ldrb	r3, [r7, #29]
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8004fa8:	7e7b      	ldrb	r3, [r7, #25]
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8004fbc:	7fbb      	ldrb	r3, [r7, #30]
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8004fc6:	7ebb      	ldrb	r3, [r7, #26]
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8004fd0:	f107 031c 	add.w	r3, r7, #28
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2103      	movs	r1, #3
 8004fd8:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8004fdc:	f7ff fb46 	bl	800466c <mpu_write_mem>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <dmp_set_orientation+0x198>
        return -1;
 8004fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fea:	e011      	b.n	8005010 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8004fec:	f107 0318 	add.w	r3, r7, #24
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2103      	movs	r1, #3
 8004ff4:	f240 4031 	movw	r0, #1073	@ 0x431
 8004ff8:	f7ff fb38 	bl	800466c <mpu_write_mem>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <dmp_set_orientation+0x1b4>
        return -1;
 8005002:	f04f 33ff 	mov.w	r3, #4294967295
 8005006:	e003      	b.n	8005010 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8005008:	4a07      	ldr	r2, [pc, #28]	@ (8005028 <dmp_set_orientation+0x1d4>)
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	8113      	strh	r3, [r2, #8]
    return 0;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3720      	adds	r7, #32
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	08015ab8 	.word	0x08015ab8
 800501c:	08015abc 	.word	0x08015abc
 8005020:	08015ac0 	.word	0x08015ac0
 8005024:	08015ac4 	.word	0x08015ac4
 8005028:	20000624 	.word	0x20000624

0800502c <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 800502c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005030:	b08c      	sub	sp, #48	@ 0x30
 8005032:	af00      	add	r7, sp, #0
 8005034:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 8005036:	4b80      	ldr	r3, [pc, #512]	@ (8005238 <dmp_set_gyro_bias+0x20c>)
 8005038:	891b      	ldrh	r3, [r3, #8]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
    if (dmp.orient & 4)
 8005048:	4b7b      	ldr	r3, [pc, #492]	@ (8005238 <dmp_set_gyro_bias+0x20c>)
 800504a:	891b      	ldrh	r3, [r3, #8]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	425b      	negs	r3, r3
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800505a:	4b77      	ldr	r3, [pc, #476]	@ (8005238 <dmp_set_gyro_bias+0x20c>)
 800505c:	891b      	ldrh	r3, [r3, #8]
 800505e:	08db      	lsrs	r3, r3, #3
 8005060:	b29b      	uxth	r3, r3
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (dmp.orient & 0x20)
 8005070:	4b71      	ldr	r3, [pc, #452]	@ (8005238 <dmp_set_gyro_bias+0x20c>)
 8005072:	891b      	ldrh	r3, [r3, #8]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 800507c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507e:	425b      	negs	r3, r3
 8005080:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8005082:	4b6d      	ldr	r3, [pc, #436]	@ (8005238 <dmp_set_gyro_bias+0x20c>)
 8005084:	891b      	ldrh	r3, [r3, #8]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	b29b      	uxth	r3, r3
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dmp.orient & 0x100)
 8005098:	4b67      	ldr	r3, [pc, #412]	@ (8005238 <dmp_set_gyro_bias+0x20c>)
 800509a:	891b      	ldrh	r3, [r3, #8]
 800509c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 80050a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a6:	425b      	negs	r3, r3
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	17da      	asrs	r2, r3, #31
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	617a      	str	r2, [r7, #20]
 80050b2:	4b62      	ldr	r3, [pc, #392]	@ (800523c <dmp_set_gyro_bias+0x210>)
 80050b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80050b8:	460a      	mov	r2, r1
 80050ba:	fb03 f202 	mul.w	r2, r3, r2
 80050be:	2300      	movs	r3, #0
 80050c0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80050c4:	4601      	mov	r1, r0
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	4a5b      	ldr	r2, [pc, #364]	@ (800523c <dmp_set_gyro_bias+0x210>)
 80050ce:	6939      	ldr	r1, [r7, #16]
 80050d0:	fba1 ab02 	umull	sl, fp, r1, r2
 80050d4:	445b      	add	r3, fp
 80050d6:	469b      	mov	fp, r3
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80050e4:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 80050e8:	ea4f 73ab 	mov.w	r3, fp, asr #30
 80050ec:	4613      	mov	r3, r2
 80050ee:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 80050f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f2:	17da      	asrs	r2, r3, #31
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	60fa      	str	r2, [r7, #12]
 80050f8:	4b50      	ldr	r3, [pc, #320]	@ (800523c <dmp_set_gyro_bias+0x210>)
 80050fa:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80050fe:	465a      	mov	r2, fp
 8005100:	fb03 f202 	mul.w	r2, r3, r2
 8005104:	2300      	movs	r3, #0
 8005106:	4651      	mov	r1, sl
 8005108:	fb01 f303 	mul.w	r3, r1, r3
 800510c:	4413      	add	r3, r2
 800510e:	4a4b      	ldr	r2, [pc, #300]	@ (800523c <dmp_set_gyro_bias+0x210>)
 8005110:	4651      	mov	r1, sl
 8005112:	fba1 8902 	umull	r8, r9, r1, r2
 8005116:	444b      	add	r3, r9
 8005118:	4699      	mov	r9, r3
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8005126:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800512a:	ea4f 73a9 	mov.w	r3, r9, asr #30
 800512e:	4613      	mov	r3, r2
 8005130:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8005132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005134:	17da      	asrs	r2, r3, #31
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	4b40      	ldr	r3, [pc, #256]	@ (800523c <dmp_set_gyro_bias+0x210>)
 800513c:	e9d7 8900 	ldrd	r8, r9, [r7]
 8005140:	464a      	mov	r2, r9
 8005142:	fb03 f202 	mul.w	r2, r3, r2
 8005146:	2300      	movs	r3, #0
 8005148:	4641      	mov	r1, r8
 800514a:	fb01 f303 	mul.w	r3, r1, r3
 800514e:	4413      	add	r3, r2
 8005150:	4a3a      	ldr	r2, [pc, #232]	@ (800523c <dmp_set_gyro_bias+0x210>)
 8005152:	4641      	mov	r1, r8
 8005154:	fba1 4502 	umull	r4, r5, r1, r2
 8005158:	442b      	add	r3, r5
 800515a:	461d      	mov	r5, r3
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	0fa2      	lsrs	r2, r4, #30
 8005166:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800516a:	17ab      	asrs	r3, r5, #30
 800516c:	4613      	mov	r3, r2
 800516e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	161b      	asrs	r3, r3, #24
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	141b      	asrs	r3, r3, #16
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	121b      	asrs	r3, r3, #8
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 8005196:	f107 0320 	add.w	r3, r7, #32
 800519a:	461a      	mov	r2, r3
 800519c:	2104      	movs	r1, #4
 800519e:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
 80051a2:	f7ff fa63 	bl	800466c <mpu_write_mem>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <dmp_set_gyro_bias+0x186>
        return -1;
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295
 80051b0:	e03c      	b.n	800522c <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 80051b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b4:	161b      	asrs	r3, r3, #24
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 80051bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051be:	141b      	asrs	r3, r3, #16
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 80051c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c8:	121b      	asrs	r3, r3, #8
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 80051d8:	f107 0320 	add.w	r3, r7, #32
 80051dc:	461a      	mov	r2, r3
 80051de:	2104      	movs	r1, #4
 80051e0:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
 80051e4:	f7ff fa42 	bl	800466c <mpu_write_mem>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <dmp_set_gyro_bias+0x1c8>
        return -1;
 80051ee:	f04f 33ff 	mov.w	r3, #4294967295
 80051f2:	e01b      	b.n	800522c <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 80051f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f6:	161b      	asrs	r3, r3, #24
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 80051fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005200:	141b      	asrs	r3, r3, #16
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 8005208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800520a:	121b      	asrs	r3, r3, #8
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8005212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 800521a:	f107 0320 	add.w	r3, r7, #32
 800521e:	461a      	mov	r2, r3
 8005220:	2104      	movs	r1, #4
 8005222:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 8005226:	f7ff fa21 	bl	800466c <mpu_write_mem>
 800522a:	4603      	mov	r3, r0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3730      	adds	r7, #48	@ 0x30
 8005230:	46bd      	mov	sp, r7
 8005232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005236:	bf00      	nop
 8005238:	20000624 	.word	0x20000624
 800523c:	02cae309 	.word	0x02cae309

08005240 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8005240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005244:	b094      	sub	sp, #80	@ 0x50
 8005246:	af00      	add	r7, sp, #0
 8005248:	6278      	str	r0, [r7, #36]	@ 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 800524a:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe f942 	bl	80034d8 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8005254:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005256:	b29b      	uxth	r3, r3
 8005258:	2200      	movs	r2, #0
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	61fa      	str	r2, [r7, #28]
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	69f9      	ldr	r1, [r7, #28]
 8005268:	03cb      	lsls	r3, r1, #15
 800526a:	69b9      	ldr	r1, [r7, #24]
 800526c:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8005270:	69b9      	ldr	r1, [r7, #24]
 8005272:	03ca      	lsls	r2, r1, #15
 8005274:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 8005278:	4b71      	ldr	r3, [pc, #452]	@ (8005440 <dmp_set_accel_bias+0x200>)
 800527a:	891b      	ldrh	r3, [r3, #8]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005284:	4413      	add	r3, r2
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (dmp.orient & 4)
 800528a:	4b6d      	ldr	r3, [pc, #436]	@ (8005440 <dmp_set_accel_bias+0x200>)
 800528c:	891b      	ldrh	r3, [r3, #8]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 8005296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005298:	425b      	negs	r3, r3
 800529a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800529c:	4b68      	ldr	r3, [pc, #416]	@ (8005440 <dmp_set_accel_bias+0x200>)
 800529e:	891b      	ldrh	r3, [r3, #8]
 80052a0:	08db      	lsrs	r3, r3, #3
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ac:	4413      	add	r3, r2
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (dmp.orient & 0x20)
 80052b2:	4b63      	ldr	r3, [pc, #396]	@ (8005440 <dmp_set_accel_bias+0x200>)
 80052b4:	891b      	ldrh	r3, [r3, #8]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 80052be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052c0:	425b      	negs	r3, r3
 80052c2:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 80052c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005440 <dmp_set_accel_bias+0x200>)
 80052c6:	891b      	ldrh	r3, [r3, #8]
 80052c8:	099b      	lsrs	r3, r3, #6
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d4:	4413      	add	r3, r2
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	647b      	str	r3, [r7, #68]	@ 0x44
    if (dmp.orient & 0x100)
 80052da:	4b59      	ldr	r3, [pc, #356]	@ (8005440 <dmp_set_accel_bias+0x200>)
 80052dc:	891b      	ldrh	r3, [r3, #8]
 80052de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 80052e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e8:	425b      	negs	r3, r3
 80052ea:	647b      	str	r3, [r7, #68]	@ 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 80052ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ee:	17da      	asrs	r2, r3, #31
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	617a      	str	r2, [r7, #20]
 80052f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80052fa:	460a      	mov	r2, r1
 80052fc:	fb02 f203 	mul.w	r2, r2, r3
 8005300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005302:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8005306:	4601      	mov	r1, r0
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	4413      	add	r3, r2
 800530e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005310:	6939      	ldr	r1, [r7, #16]
 8005312:	fba2 ab01 	umull	sl, fp, r2, r1
 8005316:	445b      	add	r3, fp
 8005318:	469b      	mov	fp, r3
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8005326:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800532a:	ea4f 73ab 	mov.w	r3, fp, asr #30
 800532e:	4613      	mov	r3, r2
 8005330:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8005332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005334:	17da      	asrs	r2, r3, #31
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	60fa      	str	r2, [r7, #12]
 800533a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005340:	465a      	mov	r2, fp
 8005342:	fb02 f203 	mul.w	r2, r2, r3
 8005346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005348:	4651      	mov	r1, sl
 800534a:	fb01 f303 	mul.w	r3, r1, r3
 800534e:	4413      	add	r3, r2
 8005350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005352:	4651      	mov	r1, sl
 8005354:	fba2 8901 	umull	r8, r9, r2, r1
 8005358:	444b      	add	r3, r9
 800535a:	4699      	mov	r9, r3
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8005368:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800536c:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8005370:	4613      	mov	r3, r2
 8005372:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8005374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005376:	17da      	asrs	r2, r3, #31
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800537e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8005382:	464a      	mov	r2, r9
 8005384:	fb02 f203 	mul.w	r2, r2, r3
 8005388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800538a:	4641      	mov	r1, r8
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	4413      	add	r3, r2
 8005392:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005394:	4641      	mov	r1, r8
 8005396:	fba2 4501 	umull	r4, r5, r2, r1
 800539a:	442b      	add	r3, r5
 800539c:	461d      	mov	r5, r3
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	0fa2      	lsrs	r2, r4, #30
 80053a8:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80053ac:	17ab      	asrs	r3, r5, #30
 80053ae:	4613      	mov	r3, r2
 80053b0:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 80053b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b4:	161b      	asrs	r3, r3, #24
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 80053bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053be:	141b      	asrs	r3, r3, #16
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 80053c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c8:	121b      	asrs	r3, r3, #8
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 80053d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 80053d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053da:	161b      	asrs	r3, r3, #24
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 80053e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053e4:	141b      	asrs	r3, r3, #16
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 80053ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ee:	121b      	asrs	r3, r3, #8
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 80053f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 80053fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005400:	161b      	asrs	r3, r3, #24
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8005408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800540a:	141b      	asrs	r3, r3, #16
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 8005412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005414:	121b      	asrs	r3, r3, #8
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 800541c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8005424:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005428:	461a      	mov	r2, r3
 800542a:	210c      	movs	r1, #12
 800542c:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8005430:	f7ff f91c 	bl	800466c <mpu_write_mem>
 8005434:	4603      	mov	r3, r0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3750      	adds	r7, #80	@ 0x50
 800543a:	46bd      	mov	sp, r7
 800543c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005440:	20000624 	.word	0x20000624

08005444 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800544e:	4a1f      	ldr	r2, [pc, #124]	@ (80054cc <dmp_set_fifo_rate+0x88>)
 8005450:	f107 0310 	add.w	r3, r7, #16
 8005454:	ca07      	ldmia	r2, {r0, r1, r2}
 8005456:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	2bc8      	cmp	r3, #200	@ 0xc8
 800545e:	d902      	bls.n	8005466 <dmp_set_fifo_rate+0x22>
        return -1;
 8005460:	f04f 33ff 	mov.w	r3, #4294967295
 8005464:	e02e      	b.n	80054c4 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	22c8      	movs	r2, #200	@ 0xc8
 800546a:	fb92 f3f3 	sdiv	r3, r2, r3
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8005474:	8bfb      	ldrh	r3, [r7, #30]
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	b29b      	uxth	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 800547e:	8bfb      	ldrh	r3, [r7, #30]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8005484:	f107 0308 	add.w	r3, r7, #8
 8005488:	461a      	mov	r2, r3
 800548a:	2102      	movs	r1, #2
 800548c:	f240 2016 	movw	r0, #534	@ 0x216
 8005490:	f7ff f8ec 	bl	800466c <mpu_write_mem>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <dmp_set_fifo_rate+0x5c>
        return -1;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	e011      	b.n	80054c4 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	461a      	mov	r2, r3
 80054a6:	210c      	movs	r1, #12
 80054a8:	f640 20c1 	movw	r0, #2753	@ 0xac1
 80054ac:	f7ff f8de 	bl	800466c <mpu_write_mem>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <dmp_set_fifo_rate+0x78>
        return -1;
 80054b6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ba:	e003      	b.n	80054c4 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 80054bc:	4a04      	ldr	r2, [pc, #16]	@ (80054d0 <dmp_set_fifo_rate+0x8c>)
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	8193      	strh	r3, [r2, #12]
    return 0;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	08015ac8 	.word	0x08015ac8
 80054d0:	20000624 	.word	0x20000624

080054d4 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	460a      	mov	r2, r1
 80054de:	71fb      	strb	r3, [r7, #7]
 80054e0:	4613      	mov	r3, r2
 80054e2:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <dmp_set_tap_thresh+0x22>
 80054ee:	88bb      	ldrh	r3, [r7, #4]
 80054f0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80054f4:	d902      	bls.n	80054fc <dmp_set_tap_thresh+0x28>
        return -1;
 80054f6:	f04f 33ff 	mov.w	r3, #4294967295
 80054fa:	e10b      	b.n	8005714 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 80054fc:	88bb      	ldrh	r3, [r7, #4]
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005506:	eddf 6a85 	vldr	s13, [pc, #532]	@ 800571c <dmp_set_tap_thresh+0x248>
 800550a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800550e:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8005512:	f107 030b 	add.w	r3, r7, #11
 8005516:	4618      	mov	r0, r3
 8005518:	f7fd fdf8 	bl	800310c <mpu_get_accel_fsr>
    switch (accel_fsr) {
 800551c:	7afb      	ldrb	r3, [r7, #11]
 800551e:	3b02      	subs	r3, #2
 8005520:	2b0e      	cmp	r3, #14
 8005522:	d87d      	bhi.n	8005620 <dmp_set_tap_thresh+0x14c>
 8005524:	a201      	add	r2, pc, #4	@ (adr r2, 800552c <dmp_set_tap_thresh+0x58>)
 8005526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552a:	bf00      	nop
 800552c:	08005569 	.word	0x08005569
 8005530:	08005621 	.word	0x08005621
 8005534:	08005597 	.word	0x08005597
 8005538:	08005621 	.word	0x08005621
 800553c:	08005621 	.word	0x08005621
 8005540:	08005621 	.word	0x08005621
 8005544:	080055c5 	.word	0x080055c5
 8005548:	08005621 	.word	0x08005621
 800554c:	08005621 	.word	0x08005621
 8005550:	08005621 	.word	0x08005621
 8005554:	08005621 	.word	0x08005621
 8005558:	08005621 	.word	0x08005621
 800555c:	08005621 	.word	0x08005621
 8005560:	08005621 	.word	0x08005621
 8005564:	080055f3 	.word	0x080055f3
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8005568:	edd7 7a04 	vldr	s15, [r7, #16]
 800556c:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005720 <dmp_set_tap_thresh+0x24c>
 8005570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005578:	ee17 3a90 	vmov	r3, s15
 800557c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800557e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005582:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005724 <dmp_set_tap_thresh+0x250>
 8005586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800558a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800558e:	ee17 3a90 	vmov	r3, s15
 8005592:	82bb      	strh	r3, [r7, #20]
        break;
 8005594:	e047      	b.n	8005626 <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8005596:	edd7 7a04 	vldr	s15, [r7, #16]
 800559a:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8005728 <dmp_set_tap_thresh+0x254>
 800559e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a6:	ee17 3a90 	vmov	r3, s15
 80055aa:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 80055ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80055b0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800572c <dmp_set_tap_thresh+0x258>
 80055b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055bc:	ee17 3a90 	vmov	r3, s15
 80055c0:	82bb      	strh	r3, [r7, #20]
        break;
 80055c2:	e030      	b.n	8005626 <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 80055c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80055c8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8005730 <dmp_set_tap_thresh+0x25c>
 80055cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d4:	ee17 3a90 	vmov	r3, s15
 80055d8:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 80055da:	edd7 7a04 	vldr	s15, [r7, #16]
 80055de:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8005734 <dmp_set_tap_thresh+0x260>
 80055e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ea:	ee17 3a90 	vmov	r3, s15
 80055ee:	82bb      	strh	r3, [r7, #20]
        break;
 80055f0:	e019      	b.n	8005626 <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 80055f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80055f6:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005738 <dmp_set_tap_thresh+0x264>
 80055fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005602:	ee17 3a90 	vmov	r3, s15
 8005606:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8005608:	edd7 7a04 	vldr	s15, [r7, #16]
 800560c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800573c <dmp_set_tap_thresh+0x268>
 8005610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005618:	ee17 3a90 	vmov	r3, s15
 800561c:	82bb      	strh	r3, [r7, #20]
        break;
 800561e:	e002      	b.n	8005626 <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8005620:	f04f 33ff 	mov.w	r3, #4294967295
 8005624:	e076      	b.n	8005714 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8005626:	8afb      	ldrh	r3, [r7, #22]
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	b29b      	uxth	r3, r3
 800562c:	b2db      	uxtb	r3, r3
 800562e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8005630:	8afb      	ldrh	r3, [r7, #22]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8005636:	8abb      	ldrh	r3, [r7, #20]
 8005638:	0a1b      	lsrs	r3, r3, #8
 800563a:	b29b      	uxth	r3, r3
 800563c:	b2db      	uxtb	r3, r3
 800563e:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8005640:	8abb      	ldrh	r3, [r7, #20]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01c      	beq.n	800568a <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8005650:	f107 030c 	add.w	r3, r7, #12
 8005654:	461a      	mov	r2, r3
 8005656:	2102      	movs	r1, #2
 8005658:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 800565c:	f7ff f806 	bl	800466c <mpu_write_mem>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <dmp_set_tap_thresh+0x198>
            return -1;
 8005666:	f04f 33ff 	mov.w	r3, #4294967295
 800566a:	e053      	b.n	8005714 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 800566c:	f107 030c 	add.w	r3, r7, #12
 8005670:	3302      	adds	r3, #2
 8005672:	461a      	mov	r2, r3
 8005674:	2102      	movs	r1, #2
 8005676:	f44f 7092 	mov.w	r0, #292	@ 0x124
 800567a:	f7fe fff7 	bl	800466c <mpu_write_mem>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <dmp_set_tap_thresh+0x1b6>
            return -1;
 8005684:	f04f 33ff 	mov.w	r3, #4294967295
 8005688:	e044      	b.n	8005714 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01c      	beq.n	80056ce <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8005694:	f107 030c 	add.w	r3, r7, #12
 8005698:	461a      	mov	r2, r3
 800569a:	2102      	movs	r1, #2
 800569c:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 80056a0:	f7fe ffe4 	bl	800466c <mpu_write_mem>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <dmp_set_tap_thresh+0x1dc>
            return -1;
 80056aa:	f04f 33ff 	mov.w	r3, #4294967295
 80056ae:	e031      	b.n	8005714 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 80056b0:	f107 030c 	add.w	r3, r7, #12
 80056b4:	3302      	adds	r3, #2
 80056b6:	461a      	mov	r2, r3
 80056b8:	2102      	movs	r1, #2
 80056ba:	f44f 7094 	mov.w	r0, #296	@ 0x128
 80056be:	f7fe ffd5 	bl	800466c <mpu_write_mem>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <dmp_set_tap_thresh+0x1fa>
            return -1;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	e022      	b.n	8005714 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01c      	beq.n	8005712 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 80056d8:	f107 030c 	add.w	r3, r7, #12
 80056dc:	461a      	mov	r2, r3
 80056de:	2102      	movs	r1, #2
 80056e0:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 80056e4:	f7fe ffc2 	bl	800466c <mpu_write_mem>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <dmp_set_tap_thresh+0x220>
            return -1;
 80056ee:	f04f 33ff 	mov.w	r3, #4294967295
 80056f2:	e00f      	b.n	8005714 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 80056f4:	f107 030c 	add.w	r3, r7, #12
 80056f8:	3302      	adds	r3, #2
 80056fa:	461a      	mov	r2, r3
 80056fc:	2102      	movs	r1, #2
 80056fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005702:	f7fe ffb3 	bl	800466c <mpu_write_mem>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <dmp_set_tap_thresh+0x23e>
            return -1;
 800570c:	f04f 33ff 	mov.w	r3, #4294967295
 8005710:	e000      	b.n	8005714 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	43480000 	.word	0x43480000
 8005720:	46800000 	.word	0x46800000
 8005724:	46400000 	.word	0x46400000
 8005728:	46000000 	.word	0x46000000
 800572c:	45c00000 	.word	0x45c00000
 8005730:	45800000 	.word	0x45800000
 8005734:	45400000 	.word	0x45400000
 8005738:	45000000 	.word	0x45000000
 800573c:	44c00000 	.word	0x44c00000

08005740 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800575e:	b2db      	uxtb	r3, r3
 8005760:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	f043 030c 	orr.w	r3, r3, #12
 8005772:	b2db      	uxtb	r3, r3
 8005774:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	f043 0303 	orr.w	r3, r3, #3
 8005786:	b2db      	uxtb	r3, r3
 8005788:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800578a:	f107 030f 	add.w	r3, r7, #15
 800578e:	461a      	mov	r2, r3
 8005790:	2101      	movs	r1, #1
 8005792:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 8005796:	f7fe ff69 	bl	800466c <mpu_write_mem>
 800579a:	4603      	mov	r3, r0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <dmp_set_tap_count+0x16>
        min_taps = 1;
 80057b4:	2301      	movs	r3, #1
 80057b6:	71fb      	strb	r3, [r7, #7]
 80057b8:	e004      	b.n	80057c4 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d901      	bls.n	80057c4 <dmp_set_tap_count+0x20>
        min_taps = 4;
 80057c0:	2304      	movs	r3, #4
 80057c2:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 80057cc:	f107 030f 	add.w	r3, r7, #15
 80057d0:	461a      	mov	r2, r3
 80057d2:	2101      	movs	r1, #1
 80057d4:	f240 104f 	movw	r0, #335	@ 0x14f
 80057d8:	f7fe ff48 	bl	800466c <mpu_write_mem>
 80057dc:	4603      	mov	r3, r0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80057f2:	88fb      	ldrh	r3, [r7, #6]
 80057f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005828 <dmp_set_tap_time+0x40>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	089b      	lsrs	r3, r3, #2
 80057fc:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80057fe:	89fb      	ldrh	r3, [r7, #14]
 8005800:	0a1b      	lsrs	r3, r3, #8
 8005802:	b29b      	uxth	r3, r3
 8005804:	b2db      	uxtb	r3, r3
 8005806:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8005808:	89fb      	ldrh	r3, [r7, #14]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800580e:	f107 030c 	add.w	r3, r7, #12
 8005812:	461a      	mov	r2, r3
 8005814:	2102      	movs	r1, #2
 8005816:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 800581a:	f7fe ff27 	bl	800466c <mpu_write_mem>
 800581e:	4603      	mov	r3, r0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	cccccccd 	.word	0xcccccccd

0800582c <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	4a0c      	ldr	r2, [pc, #48]	@ (800586c <dmp_set_tap_time_multi+0x40>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	089b      	lsrs	r3, r3, #2
 8005840:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8005842:	89fb      	ldrh	r3, [r7, #14]
 8005844:	0a1b      	lsrs	r3, r3, #8
 8005846:	b29b      	uxth	r3, r3
 8005848:	b2db      	uxtb	r3, r3
 800584a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800584c:	89fb      	ldrh	r3, [r7, #14]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 8005852:	f107 030c 	add.w	r3, r7, #12
 8005856:	461a      	mov	r2, r3
 8005858:	2102      	movs	r1, #2
 800585a:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 800585e:	f7fe ff05 	bl	800466c <mpu_write_mem>
 8005862:	4603      	mov	r3, r0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	cccccccd 	.word	0xcccccccd

08005870 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a13      	ldr	r2, [pc, #76]	@ (80058cc <dmp_set_shake_reject_thresh+0x5c>)
 8005880:	fb82 1203 	smull	r1, r2, r2, r3
 8005884:	1192      	asrs	r2, r2, #6
 8005886:	17db      	asrs	r3, r3, #31
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	887a      	ldrh	r2, [r7, #2]
 800588c:	fb02 f303 	mul.w	r3, r2, r3
 8005890:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	161b      	asrs	r3, r3, #24
 8005896:	b2db      	uxtb	r3, r3
 8005898:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	141b      	asrs	r3, r3, #16
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	121b      	asrs	r3, r3, #8
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 80058b0:	f107 0308 	add.w	r3, r7, #8
 80058b4:	461a      	mov	r2, r3
 80058b6:	2104      	movs	r1, #4
 80058b8:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 80058bc:	f7fe fed6 	bl	800466c <mpu_write_mem>
 80058c0:	4603      	mov	r3, r0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	10624dd3 	.word	0x10624dd3

080058d0 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005910 <dmp_set_shake_reject_time+0x40>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	089b      	lsrs	r3, r3, #2
 80058e4:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	0a1b      	lsrs	r3, r3, #8
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 80058f6:	f107 030c 	add.w	r3, r7, #12
 80058fa:	461a      	mov	r2, r3
 80058fc:	2102      	movs	r1, #2
 80058fe:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 8005902:	f7fe feb3 	bl	800466c <mpu_write_mem>
 8005906:	4603      	mov	r3, r0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	cccccccd 	.word	0xcccccccd

08005914 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	4a0c      	ldr	r2, [pc, #48]	@ (8005954 <dmp_set_shake_reject_timeout+0x40>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	089b      	lsrs	r3, r3, #2
 8005928:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	b29b      	uxth	r3, r3
 8005930:	b2db      	uxtb	r3, r3
 8005932:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 800593a:	f107 030c 	add.w	r3, r7, #12
 800593e:	461a      	mov	r2, r3
 8005940:	2102      	movs	r1, #2
 8005942:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 8005946:	f7fe fe91 	bl	800466c <mpu_write_mem>
 800594a:	4603      	mov	r3, r0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	cccccccd 	.word	0xcccccccd

08005958 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8005962:	2302      	movs	r3, #2
 8005964:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8005966:	23ca      	movs	r3, #202	@ 0xca
 8005968:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 800596a:	23e3      	movs	r3, #227	@ 0xe3
 800596c:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800596e:	2309      	movs	r3, #9
 8005970:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 8005972:	f107 030c 	add.w	r3, r7, #12
 8005976:	461a      	mov	r2, r3
 8005978:	2104      	movs	r1, #4
 800597a:	2068      	movs	r0, #104	@ 0x68
 800597c:	f7fe fe76 	bl	800466c <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8005980:	23a3      	movs	r3, #163	@ 0xa3
 8005982:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8005984:	88fb      	ldrh	r3, [r7, #6]
 8005986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	d006      	beq.n	800599c <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 800598e:	23c0      	movs	r3, #192	@ 0xc0
 8005990:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 8005992:	23c8      	movs	r3, #200	@ 0xc8
 8005994:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8005996:	23c2      	movs	r3, #194	@ 0xc2
 8005998:	73fb      	strb	r3, [r7, #15]
 800599a:	e005      	b.n	80059a8 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 800599c:	23a3      	movs	r3, #163	@ 0xa3
 800599e:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 80059a0:	23a3      	movs	r3, #163	@ 0xa3
 80059a2:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 80059a4:	23a3      	movs	r3, #163	@ 0xa3
 80059a6:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80059a8:	88fb      	ldrh	r3, [r7, #6]
 80059aa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d006      	beq.n	80059c0 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 80059b2:	23c4      	movs	r3, #196	@ 0xc4
 80059b4:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 80059b6:	23cc      	movs	r3, #204	@ 0xcc
 80059b8:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 80059ba:	23c6      	movs	r3, #198	@ 0xc6
 80059bc:	74bb      	strb	r3, [r7, #18]
 80059be:	e005      	b.n	80059cc <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 80059c0:	23a3      	movs	r3, #163	@ 0xa3
 80059c2:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 80059c4:	23a3      	movs	r3, #163	@ 0xa3
 80059c6:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 80059c8:	23a3      	movs	r3, #163	@ 0xa3
 80059ca:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 80059cc:	23a3      	movs	r3, #163	@ 0xa3
 80059ce:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 80059d0:	23a3      	movs	r3, #163	@ 0xa3
 80059d2:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 80059d4:	23a3      	movs	r3, #163	@ 0xa3
 80059d6:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 80059d8:	f107 030c 	add.w	r3, r7, #12
 80059dc:	461a      	mov	r2, r3
 80059de:	210a      	movs	r1, #10
 80059e0:	f640 20a7 	movw	r0, #2727	@ 0xaa7
 80059e4:	f7fe fe42 	bl	800466c <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 80059f2:	2320      	movs	r3, #32
 80059f4:	733b      	strb	r3, [r7, #12]
 80059f6:	e001      	b.n	80059fc <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 80059f8:	23d8      	movs	r3, #216	@ 0xd8
 80059fa:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	461a      	mov	r2, r3
 8005a02:	2101      	movs	r1, #1
 8005a04:	f640 20b6 	movw	r0, #2742	@ 0xab6
 8005a08:	f7fe fe30 	bl	800466c <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 8005a16:	2001      	movs	r0, #1
 8005a18:	f000 f8c6 	bl	8005ba8 <dmp_enable_gyro_cal>
 8005a1c:	e002      	b.n	8005a24 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8005a1e:	2000      	movs	r0, #0
 8005a20:	f000 f8c2 	bl	8005ba8 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01d      	beq.n	8005a6a <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d008      	beq.n	8005a4a <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8005a38:	23b2      	movs	r3, #178	@ 0xb2
 8005a3a:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8005a3c:	238b      	movs	r3, #139	@ 0x8b
 8005a3e:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8005a40:	23b6      	movs	r3, #182	@ 0xb6
 8005a42:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8005a44:	239b      	movs	r3, #155	@ 0x9b
 8005a46:	73fb      	strb	r3, [r7, #15]
 8005a48:	e007      	b.n	8005a5a <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 8005a4a:	23b0      	movs	r3, #176	@ 0xb0
 8005a4c:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8005a4e:	2380      	movs	r3, #128	@ 0x80
 8005a50:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8005a52:	23b4      	movs	r3, #180	@ 0xb4
 8005a54:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 8005a56:	2390      	movs	r3, #144	@ 0x90
 8005a58:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8005a5a:	f107 030c 	add.w	r3, r7, #12
 8005a5e:	461a      	mov	r2, r3
 8005a60:	2104      	movs	r1, #4
 8005a62:	f640 20a2 	movw	r0, #2722	@ 0xaa2
 8005a66:	f7fe fe01 	bl	800466c <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d025      	beq.n	8005ac0 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8005a74:	23f8      	movs	r3, #248	@ 0xf8
 8005a76:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8005a78:	f107 030c 	add.w	r3, r7, #12
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2101      	movs	r1, #1
 8005a80:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8005a84:	f7fe fdf2 	bl	800466c <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8005a88:	21fa      	movs	r1, #250	@ 0xfa
 8005a8a:	2007      	movs	r0, #7
 8005a8c:	f7ff fd22 	bl	80054d4 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8005a90:	2007      	movs	r0, #7
 8005a92:	f7ff fe55 	bl	8005740 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8005a96:	2001      	movs	r0, #1
 8005a98:	f7ff fe84 	bl	80057a4 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8005a9c:	2064      	movs	r0, #100	@ 0x64
 8005a9e:	f7ff fea3 	bl	80057e8 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8005aa2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005aa6:	f7ff fec1 	bl	800582c <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8005aaa:	21c8      	movs	r1, #200	@ 0xc8
 8005aac:	483c      	ldr	r0, [pc, #240]	@ (8005ba0 <dmp_enable_feature+0x248>)
 8005aae:	f7ff fedf 	bl	8005870 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8005ab2:	2028      	movs	r0, #40	@ 0x28
 8005ab4:	f7ff ff0c 	bl	80058d0 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8005ab8:	200a      	movs	r0, #10
 8005aba:	f7ff ff2b 	bl	8005914 <dmp_set_shake_reject_timeout>
 8005abe:	e009      	b.n	8005ad4 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8005ac0:	23d8      	movs	r3, #216	@ 0xd8
 8005ac2:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8005ac4:	f107 030c 	add.w	r3, r7, #12
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2101      	movs	r1, #1
 8005acc:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8005ad0:	f7fe fdcc 	bl	800466c <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8005ade:	23d9      	movs	r3, #217	@ 0xd9
 8005ae0:	733b      	strb	r3, [r7, #12]
 8005ae2:	e001      	b.n	8005ae8 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 8005ae4:	23d8      	movs	r3, #216	@ 0xd8
 8005ae6:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8005ae8:	f107 030c 	add.w	r3, r7, #12
 8005aec:	461a      	mov	r2, r3
 8005aee:	2101      	movs	r1, #1
 8005af0:	f240 703d 	movw	r0, #1853	@ 0x73d
 8005af4:	f7fe fdba 	bl	800466c <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8005b02:	2001      	movs	r0, #1
 8005b04:	f000 f880 	bl	8005c08 <dmp_enable_lp_quat>
 8005b08:	e002      	b.n	8005b10 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	f000 f87c 	bl	8005c08 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	f000 f89b 	bl	8005c56 <dmp_enable_6x_lp_quat>
 8005b20:	e002      	b.n	8005b28 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8005b22:	2000      	movs	r0, #0
 8005b24:	f000 f897 	bl	8005c56 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	f043 0308 	orr.w	r3, r3, #8
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	4b1c      	ldr	r3, [pc, #112]	@ (8005ba4 <dmp_enable_feature+0x24c>)
 8005b32:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8005b34:	f7fd f95e 	bl	8002df4 <mpu_reset_fifo>

    dmp.packet_length = 0;
 8005b38:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba4 <dmp_enable_feature+0x24c>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d005      	beq.n	8005b54 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8005b48:	4b16      	ldr	r3, [pc, #88]	@ (8005ba4 <dmp_enable_feature+0x24c>)
 8005b4a:	7b9b      	ldrb	r3, [r3, #14]
 8005b4c:	3306      	adds	r3, #6
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4b14      	ldr	r3, [pc, #80]	@ (8005ba4 <dmp_enable_feature+0x24c>)
 8005b52:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8005b5e:	4b11      	ldr	r3, [pc, #68]	@ (8005ba4 <dmp_enable_feature+0x24c>)
 8005b60:	7b9b      	ldrb	r3, [r3, #14]
 8005b62:	3306      	adds	r3, #6
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba4 <dmp_enable_feature+0x24c>)
 8005b68:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	f003 0314 	and.w	r3, r3, #20
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8005b74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <dmp_enable_feature+0x24c>)
 8005b76:	7b9b      	ldrb	r3, [r3, #14]
 8005b78:	3310      	adds	r3, #16
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ba4 <dmp_enable_feature+0x24c>)
 8005b7e:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8005b80:	88fb      	ldrh	r3, [r7, #6]
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d005      	beq.n	8005b96 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8005b8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <dmp_enable_feature+0x24c>)
 8005b8c:	7b9b      	ldrb	r3, [r3, #14]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <dmp_enable_feature+0x24c>)
 8005b94:	739a      	strb	r2, [r3, #14]

    return 0;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	02cae309 	.word	0x02cae309
 8005ba4:	20000624 	.word	0x20000624

08005ba8 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00f      	beq.n	8005bd8 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8005bb8:	4a11      	ldr	r2, [pc, #68]	@ (8005c00 <dmp_enable_gyro_cal+0x58>)
 8005bba:	f107 0314 	add.w	r3, r7, #20
 8005bbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bc0:	c303      	stmia	r3!, {r0, r1}
 8005bc2:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8005bc4:	f107 0314 	add.w	r3, r7, #20
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2109      	movs	r1, #9
 8005bcc:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 8005bd0:	f7fe fd4c 	bl	800466c <mpu_write_mem>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	e00e      	b.n	8005bf6 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8005bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005c04 <dmp_enable_gyro_cal+0x5c>)
 8005bda:	f107 0308 	add.w	r3, r7, #8
 8005bde:	ca07      	ldmia	r2, {r0, r1, r2}
 8005be0:	c303      	stmia	r3!, {r0, r1}
 8005be2:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8005be4:	f107 0308 	add.w	r3, r7, #8
 8005be8:	461a      	mov	r2, r3
 8005bea:	2109      	movs	r1, #9
 8005bec:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 8005bf0:	f7fe fd3c 	bl	800466c <mpu_write_mem>
 8005bf4:	4603      	mov	r3, r0
    }
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3720      	adds	r7, #32
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	08015ad4 	.word	0x08015ad4
 8005c04:	08015ae0 	.word	0x08015ae0

08005c08 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d008      	beq.n	8005c2a <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8005c18:	23c0      	movs	r3, #192	@ 0xc0
 8005c1a:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8005c1c:	23c2      	movs	r3, #194	@ 0xc2
 8005c1e:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8005c20:	23c4      	movs	r3, #196	@ 0xc4
 8005c22:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8005c24:	23c6      	movs	r3, #198	@ 0xc6
 8005c26:	73fb      	strb	r3, [r7, #15]
 8005c28:	e006      	b.n	8005c38 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8005c2a:	f107 030c 	add.w	r3, r7, #12
 8005c2e:	2204      	movs	r2, #4
 8005c30:	218b      	movs	r1, #139	@ 0x8b
 8005c32:	4618      	mov	r0, r3
 8005c34:	f00b fd59 	bl	80116ea <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8005c38:	f107 030c 	add.w	r3, r7, #12
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2104      	movs	r1, #4
 8005c40:	f640 2098 	movw	r0, #2712	@ 0xa98
 8005c44:	f7fe fd12 	bl	800466c <mpu_write_mem>

    return mpu_reset_fifo();
 8005c48:	f7fd f8d4 	bl	8002df4 <mpu_reset_fifo>
 8005c4c:	4603      	mov	r3, r0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d008      	beq.n	8005c78 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8005c66:	2320      	movs	r3, #32
 8005c68:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8005c6a:	2328      	movs	r3, #40	@ 0x28
 8005c6c:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8005c6e:	2330      	movs	r3, #48	@ 0x30
 8005c70:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8005c72:	2338      	movs	r3, #56	@ 0x38
 8005c74:	73fb      	strb	r3, [r7, #15]
 8005c76:	e006      	b.n	8005c86 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8005c78:	f107 030c 	add.w	r3, r7, #12
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	21a3      	movs	r1, #163	@ 0xa3
 8005c80:	4618      	mov	r0, r3
 8005c82:	f00b fd32 	bl	80116ea <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8005c86:	f107 030c 	add.w	r3, r7, #12
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2104      	movs	r1, #4
 8005c8e:	f640 209e 	movw	r0, #2718	@ 0xa9e
 8005c92:	f7fe fceb 	bl	800466c <mpu_write_mem>

    return mpu_reset_fifo();
 8005c96:	f7fd f8ad 	bl	8002df4 <mpu_reset_fifo>
 8005c9a:	4603      	mov	r3, r0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3303      	adds	r3, #3
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005cb6:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3303      	adds	r3, #3
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cc2:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d012      	beq.n	8005cf8 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 8005cd2:	7bbb      	ldrb	r3, [r7, #14]
 8005cd4:	08db      	lsrs	r3, r3, #3
 8005cd6:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8005cd8:	7bbb      	ldrb	r3, [r7, #14]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 8005ce4:	4b10      	ldr	r3, [pc, #64]	@ (8005d28 <decode_gesture+0x84>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8005cec:	4b0e      	ldr	r3, [pc, #56]	@ (8005d28 <decode_gesture+0x84>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	7b39      	ldrb	r1, [r7, #12]
 8005cf2:	7b7a      	ldrb	r2, [r7, #13]
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f003 0308 	and.w	r3, r3, #8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 8005d06:	4b08      	ldr	r3, [pc, #32]	@ (8005d28 <decode_gesture+0x84>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d006      	beq.n	8005d1c <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8005d0e:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <decode_gesture+0x84>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	7bfa      	ldrb	r2, [r7, #15]
 8005d14:	0992      	lsrs	r2, r2, #6
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3
    }

    return 0;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000624 	.word	0x20000624

08005d2c <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b092      	sub	sp, #72	@ 0x48
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8005d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d42:	2200      	movs	r2, #0
 8005d44:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8005d46:	4bae      	ldr	r3, [pc, #696]	@ (8006000 <dmp_read_fifo+0x2d4>)
 8005d48:	7b9b      	ldrb	r3, [r3, #14]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f107 0320 	add.w	r3, r7, #32
 8005d50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d52:	4619      	mov	r1, r3
 8005d54:	f7fd fce8 	bl	8003728 <mpu_read_fifo_stream>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <dmp_read_fifo+0x38>
        return -1;
 8005d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d62:	e148      	b.n	8005ff6 <dmp_read_fifo+0x2ca>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8005d64:	4ba6      	ldr	r3, [pc, #664]	@ (8006000 <dmp_read_fifo+0x2d4>)
 8005d66:	895b      	ldrh	r3, [r3, #10]
 8005d68:	f003 0314 	and.w	r3, r3, #20
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 808a 	beq.w	8005e86 <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8005d72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d76:	061a      	lsls	r2, r3, #24
 8005d78:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005d7c:	041b      	lsls	r3, r3, #16
 8005d7e:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8005d80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005d84:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8005d86:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8005d88:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005d8c:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8005d92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d96:	061a      	lsls	r2, r3, #24
 8005d98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d9c:	041b      	lsls	r3, r3, #16
 8005d9e:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8005da0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005da4:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8005da6:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8005da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dac:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8005db2:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8005db4:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8005db6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dba:	061a      	lsls	r2, r3, #24
 8005dbc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005dc0:	041b      	lsls	r3, r3, #16
 8005dc2:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8005dc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005dc8:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8005dca:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8005dcc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005dd0:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8005dd6:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8005dd8:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8005dda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005dde:	061a      	lsls	r2, r3, #24
 8005de0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005de4:	041b      	lsls	r3, r3, #16
 8005de6:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8005de8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dec:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8005dee:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8005df0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005df4:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8005dfa:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8005dfc:	601a      	str	r2, [r3, #0]
        ii += 16;
 8005dfe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005e02:	3310      	adds	r3, #16
 8005e04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	141b      	asrs	r3, r3, #16
 8005e0e:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	141b      	asrs	r3, r3, #16
 8005e18:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	141b      	asrs	r3, r3, #16
 8005e22:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	330c      	adds	r3, #12
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	141b      	asrs	r3, r3, #16
 8005e2c:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	fb03 f202 	mul.w	r2, r3, r2
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	6979      	ldr	r1, [r7, #20]
 8005e3a:	fb01 f303 	mul.w	r3, r1, r3
 8005e3e:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	69b9      	ldr	r1, [r7, #24]
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8005e48:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	69f9      	ldr	r1, [r7, #28]
 8005e4e:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8005e52:	4413      	add	r3, r2
 8005e54:	643b      	str	r3, [r7, #64]	@ 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8005e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e5c:	db03      	blt.n	8005e66 <dmp_read_fifo+0x13a>
 8005e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e60:	f1b3 5f88 	cmp.w	r3, #285212672	@ 0x11000000
 8005e64:	dd07      	ble.n	8005e76 <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8005e66:	f7fc ffc5 	bl	8002df4 <mpu_reset_fifo>
            sensors[0] = 0;
 8005e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	801a      	strh	r2, [r3, #0]
            return -1;
 8005e70:	f04f 33ff 	mov.w	r3, #4294967295
 8005e74:	e0bf      	b.n	8005ff6 <dmp_read_fifo+0x2ca>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8005e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e80:	b21a      	sxth	r2, r3
 8005e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e84:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8005e86:	4b5e      	ldr	r3, [pc, #376]	@ (8006000 <dmp_read_fifo+0x2d4>)
 8005e88:	895b      	ldrh	r3, [r3, #10]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04c      	beq.n	8005f2c <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8005e92:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005e96:	3348      	adds	r3, #72	@ 0x48
 8005e98:	443b      	add	r3, r7
 8005e9a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	b21a      	sxth	r2, r3
 8005ea2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	3348      	adds	r3, #72	@ 0x48
 8005eaa:	443b      	add	r3, r7
 8005eac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005eb0:	b21b      	sxth	r3, r3
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	b21a      	sxth	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8005eba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	3348      	adds	r3, #72	@ 0x48
 8005ec2:	443b      	add	r3, r7
 8005ec4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	b219      	sxth	r1, r3
 8005ecc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005ed0:	3303      	adds	r3, #3
 8005ed2:	3348      	adds	r3, #72	@ 0x48
 8005ed4:	443b      	add	r3, r7
 8005ed6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005eda:	b21a      	sxth	r2, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	3302      	adds	r3, #2
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	b212      	sxth	r2, r2
 8005ee4:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8005ee6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005eea:	3304      	adds	r3, #4
 8005eec:	3348      	adds	r3, #72	@ 0x48
 8005eee:	443b      	add	r3, r7
 8005ef0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	b219      	sxth	r1, r3
 8005ef8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005efc:	3305      	adds	r3, #5
 8005efe:	3348      	adds	r3, #72	@ 0x48
 8005f00:	443b      	add	r3, r7
 8005f02:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f06:	b21a      	sxth	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	b212      	sxth	r2, r2
 8005f10:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8005f12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005f16:	3306      	adds	r3, #6
 8005f18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8005f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f22:	f043 0308 	orr.w	r3, r3, #8
 8005f26:	b21a      	sxth	r2, r3
 8005f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f2a:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8005f2c:	4b34      	ldr	r3, [pc, #208]	@ (8006000 <dmp_read_fifo+0x2d4>)
 8005f2e:	895b      	ldrh	r3, [r3, #10]
 8005f30:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d04c      	beq.n	8005fd2 <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8005f38:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005f3c:	3348      	adds	r3, #72	@ 0x48
 8005f3e:	443b      	add	r3, r7
 8005f40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	b21a      	sxth	r2, r3
 8005f48:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	3348      	adds	r3, #72	@ 0x48
 8005f50:	443b      	add	r3, r7
 8005f52:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	b21a      	sxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8005f60:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005f64:	3302      	adds	r3, #2
 8005f66:	3348      	adds	r3, #72	@ 0x48
 8005f68:	443b      	add	r3, r7
 8005f6a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	b219      	sxth	r1, r3
 8005f72:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005f76:	3303      	adds	r3, #3
 8005f78:	3348      	adds	r3, #72	@ 0x48
 8005f7a:	443b      	add	r3, r7
 8005f7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f80:	b21a      	sxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3302      	adds	r3, #2
 8005f86:	430a      	orrs	r2, r1
 8005f88:	b212      	sxth	r2, r2
 8005f8a:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8005f8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005f90:	3304      	adds	r3, #4
 8005f92:	3348      	adds	r3, #72	@ 0x48
 8005f94:	443b      	add	r3, r7
 8005f96:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	b219      	sxth	r1, r3
 8005f9e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005fa2:	3305      	adds	r3, #5
 8005fa4:	3348      	adds	r3, #72	@ 0x48
 8005fa6:	443b      	add	r3, r7
 8005fa8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005fac:	b21a      	sxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	b212      	sxth	r2, r2
 8005fb6:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8005fb8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005fbc:	3306      	adds	r3, #6
 8005fbe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8005fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fc8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8005fcc:	b21a      	sxth	r2, r3
 8005fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fd0:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8005fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006000 <dmp_read_fifo+0x2d4>)
 8005fd4:	895b      	ldrh	r3, [r3, #10]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 8005fde:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005fe2:	f107 0220 	add.w	r2, r7, #32
 8005fe6:	4413      	add	r3, r2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff fe5b 	bl	8005ca4 <decode_gesture>

    get_ms(timestamp);
 8005fee:	6838      	ldr	r0, [r7, #0]
 8005ff0:	f7fe fd7a 	bl	8004ae8 <mget_ms>
    return 0;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3748      	adds	r7, #72	@ 0x48
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000624 	.word	0x20000624

08006004 <MPU_Init>:
float roll,pitch,yaw;
short gyrox,gyroy,gyroz;
short	aacx,aacy,aacz;

uint8_t MPU_Init(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
    uint8_t res;

    MPU_IIC_Init();
 800600a:	f7fc fcf5 	bl	80029f8 <IIC_GPIO_Init>
    MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X80);
 800600e:	2180      	movs	r1, #128	@ 0x80
 8006010:	206b      	movs	r0, #107	@ 0x6b
 8006012:	f000 f9b0 	bl	8006376 <MPU_Write_Byte>
    delay_ms(100);
 8006016:	2064      	movs	r0, #100	@ 0x64
 8006018:	f000 ff8a 	bl	8006f30 <HAL_Delay>
    MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X00);
 800601c:	2100      	movs	r1, #0
 800601e:	206b      	movs	r0, #107	@ 0x6b
 8006020:	f000 f9a9 	bl	8006376 <MPU_Write_Byte>
    MPU_Set_Gyro_Fsr(3);
 8006024:	2003      	movs	r0, #3
 8006026:	f000 f830 	bl	800608a <MPU_Set_Gyro_Fsr>
    MPU_Set_Accel_Fsr(0);
 800602a:	2000      	movs	r0, #0
 800602c:	f000 f83e 	bl	80060ac <MPU_Set_Accel_Fsr>
    MPU_Set_Rate(200);
 8006030:	20c8      	movs	r0, #200	@ 0xc8
 8006032:	f000 f87d 	bl	8006130 <MPU_Set_Rate>
    MPU_Write_Byte(MPU_INT_EN_REG,0X00);
 8006036:	2100      	movs	r1, #0
 8006038:	2038      	movs	r0, #56	@ 0x38
 800603a:	f000 f99c 	bl	8006376 <MPU_Write_Byte>
    MPU_Write_Byte(MPU_USER_CTRL_REG,0X00);
 800603e:	2100      	movs	r1, #0
 8006040:	206a      	movs	r0, #106	@ 0x6a
 8006042:	f000 f998 	bl	8006376 <MPU_Write_Byte>
    MPU_Write_Byte(MPU_FIFO_EN_REG,0X00);
 8006046:	2100      	movs	r1, #0
 8006048:	2023      	movs	r0, #35	@ 0x23
 800604a:	f000 f994 	bl	8006376 <MPU_Write_Byte>
    MPU_Write_Byte(MPU_INTBP_CFG_REG,0X80);
 800604e:	2180      	movs	r1, #128	@ 0x80
 8006050:	2037      	movs	r0, #55	@ 0x37
 8006052:	f000 f990 	bl	8006376 <MPU_Write_Byte>
    res=MPU_Read_Byte(MPU_DEVICE_ID_REG);
 8006056:	2075      	movs	r0, #117	@ 0x75
 8006058:	f000 f9bd 	bl	80063d6 <MPU_Read_Byte>
 800605c:	4603      	mov	r3, r0
 800605e:	71fb      	strb	r3, [r7, #7]
    if(res==MPU_ADDR)
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	2b68      	cmp	r3, #104	@ 0x68
 8006064:	d10c      	bne.n	8006080 <MPU_Init+0x7c>
    {
        MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X01);
 8006066:	2101      	movs	r1, #1
 8006068:	206b      	movs	r0, #107	@ 0x6b
 800606a:	f000 f984 	bl	8006376 <MPU_Write_Byte>
        MPU_Write_Byte(MPU_PWR_MGMT2_REG,0X00);
 800606e:	2100      	movs	r1, #0
 8006070:	206c      	movs	r0, #108	@ 0x6c
 8006072:	f000 f980 	bl	8006376 <MPU_Write_Byte>
        MPU_Set_Rate(100);
 8006076:	2064      	movs	r0, #100	@ 0x64
 8006078:	f000 f85a 	bl	8006130 <MPU_Set_Rate>
    } else return res;
    return res;
 800607c:	79fb      	ldrb	r3, [r7, #7]
 800607e:	e000      	b.n	8006082 <MPU_Init+0x7e>
    } else return res;
 8006080:	79fb      	ldrb	r3, [r7, #7]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <MPU_Set_Gyro_Fsr>:


uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	4603      	mov	r3, r0
 8006092:	71fb      	strb	r3, [r7, #7]
    return MPU_Write_Byte(MPU_GYRO_CFG_REG,fsr<<3);
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	b2db      	uxtb	r3, r3
 800609a:	4619      	mov	r1, r3
 800609c:	201b      	movs	r0, #27
 800609e:	f000 f96a 	bl	8006376 <MPU_Write_Byte>
 80060a2:	4603      	mov	r3, r0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <MPU_Set_Accel_Fsr>:


uint8_t MPU_Set_Accel_Fsr(uint8_t fsr)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	71fb      	strb	r3, [r7, #7]
    return MPU_Write_Byte(MPU_ACCEL_CFG_REG,fsr<<3);
 80060b6:	79fb      	ldrb	r3, [r7, #7]
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	4619      	mov	r1, r3
 80060be:	201c      	movs	r0, #28
 80060c0:	f000 f959 	bl	8006376 <MPU_Write_Byte>
 80060c4:	4603      	mov	r3, r0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <MPU_Set_LPF>:

uint8_t MPU_Set_LPF(uint16_t lpf)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	4603      	mov	r3, r0
 80060d6:	80fb      	strh	r3, [r7, #6]
    uint8_t data=0;
 80060d8:	2300      	movs	r3, #0
 80060da:	73fb      	strb	r3, [r7, #15]
    if(lpf>=188)data=1;
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	2bbb      	cmp	r3, #187	@ 0xbb
 80060e0:	d902      	bls.n	80060e8 <MPU_Set_LPF+0x1a>
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
 80060e6:	e019      	b.n	800611c <MPU_Set_LPF+0x4e>
    else if(lpf>=98)data=2;
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	2b61      	cmp	r3, #97	@ 0x61
 80060ec:	d902      	bls.n	80060f4 <MPU_Set_LPF+0x26>
 80060ee:	2302      	movs	r3, #2
 80060f0:	73fb      	strb	r3, [r7, #15]
 80060f2:	e013      	b.n	800611c <MPU_Set_LPF+0x4e>
    else if(lpf>=42)data=3;
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	2b29      	cmp	r3, #41	@ 0x29
 80060f8:	d902      	bls.n	8006100 <MPU_Set_LPF+0x32>
 80060fa:	2303      	movs	r3, #3
 80060fc:	73fb      	strb	r3, [r7, #15]
 80060fe:	e00d      	b.n	800611c <MPU_Set_LPF+0x4e>
    else if(lpf>=20)data=4;
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	2b13      	cmp	r3, #19
 8006104:	d902      	bls.n	800610c <MPU_Set_LPF+0x3e>
 8006106:	2304      	movs	r3, #4
 8006108:	73fb      	strb	r3, [r7, #15]
 800610a:	e007      	b.n	800611c <MPU_Set_LPF+0x4e>
    else if(lpf>=10)data=5;
 800610c:	88fb      	ldrh	r3, [r7, #6]
 800610e:	2b09      	cmp	r3, #9
 8006110:	d902      	bls.n	8006118 <MPU_Set_LPF+0x4a>
 8006112:	2305      	movs	r3, #5
 8006114:	73fb      	strb	r3, [r7, #15]
 8006116:	e001      	b.n	800611c <MPU_Set_LPF+0x4e>
    else data=6;
 8006118:	2306      	movs	r3, #6
 800611a:	73fb      	strb	r3, [r7, #15]
    return MPU_Write_Byte(MPU_CFG_REG,data);
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	4619      	mov	r1, r3
 8006120:	201a      	movs	r0, #26
 8006122:	f000 f928 	bl	8006376 <MPU_Write_Byte>
 8006126:	4603      	mov	r3, r0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <MPU_Set_Rate>:

uint8_t MPU_Set_Rate(uint16_t rate)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    if(rate>1000)rate=1000;
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006140:	d902      	bls.n	8006148 <MPU_Set_Rate+0x18>
 8006142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006146:	80fb      	strh	r3, [r7, #6]
    if(rate<4)rate=4;
 8006148:	88fb      	ldrh	r3, [r7, #6]
 800614a:	2b03      	cmp	r3, #3
 800614c:	d801      	bhi.n	8006152 <MPU_Set_Rate+0x22>
 800614e:	2304      	movs	r3, #4
 8006150:	80fb      	strh	r3, [r7, #6]
    data=1000/rate-1;
 8006152:	88fb      	ldrh	r3, [r7, #6]
 8006154:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006158:	fb92 f3f3 	sdiv	r3, r2, r3
 800615c:	b2db      	uxtb	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	73fb      	strb	r3, [r7, #15]
    data=MPU_Write_Byte(MPU_SAMPLE_RATE_REG,data);
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	4619      	mov	r1, r3
 8006166:	2019      	movs	r0, #25
 8006168:	f000 f905 	bl	8006376 <MPU_Write_Byte>
 800616c:	4603      	mov	r3, r0
 800616e:	73fb      	strb	r3, [r7, #15]
    return MPU_Set_LPF(rate/2);
 8006170:	88fb      	ldrh	r3, [r7, #6]
 8006172:	085b      	lsrs	r3, r3, #1
 8006174:	b29b      	uxth	r3, r3
 8006176:	4618      	mov	r0, r3
 8006178:	f7ff ffa9 	bl	80060ce <MPU_Set_LPF>
 800617c:	4603      	mov	r3, r0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <MPU_Get_Gyroscope>:
    return temp*100;;
}


uint8_t MPU_Get_Gyroscope(short *gx,short *gy,short *gz)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b086      	sub	sp, #24
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
    uint8_t buf[6],res;
    res=MPU_Read_Len(MPU_ADDR,MPU_GYRO_XOUTH_REG,6,buf);
 8006192:	f107 0310 	add.w	r3, r7, #16
 8006196:	2206      	movs	r2, #6
 8006198:	2143      	movs	r1, #67	@ 0x43
 800619a:	2068      	movs	r0, #104	@ 0x68
 800619c:	f000 f899 	bl	80062d2 <MPU_Read_Len>
 80061a0:	4603      	mov	r3, r0
 80061a2:	75fb      	strb	r3, [r7, #23]
    if(res==0)
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d11a      	bne.n	80061e0 <MPU_Get_Gyroscope+0x5a>
    {
        *gx=((uint16_t)buf[0]<<8)|buf[1];
 80061aa:	7c3b      	ldrb	r3, [r7, #16]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	b21a      	sxth	r2, r3
 80061b0:	7c7b      	ldrb	r3, [r7, #17]
 80061b2:	b21b      	sxth	r3, r3
 80061b4:	4313      	orrs	r3, r2
 80061b6:	b21a      	sxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	801a      	strh	r2, [r3, #0]
        *gy=((uint16_t)buf[2]<<8)|buf[3];
 80061bc:	7cbb      	ldrb	r3, [r7, #18]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	b21a      	sxth	r2, r3
 80061c2:	7cfb      	ldrb	r3, [r7, #19]
 80061c4:	b21b      	sxth	r3, r3
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b21a      	sxth	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	801a      	strh	r2, [r3, #0]
        *gz=((uint16_t)buf[4]<<8)|buf[5];
 80061ce:	7d3b      	ldrb	r3, [r7, #20]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	b21a      	sxth	r2, r3
 80061d4:	7d7b      	ldrb	r3, [r7, #21]
 80061d6:	b21b      	sxth	r3, r3
 80061d8:	4313      	orrs	r3, r2
 80061da:	b21a      	sxth	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	801a      	strh	r2, [r3, #0]
    }
    return res;;
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <MPU_Get_Accelerometer>:


uint8_t MPU_Get_Accelerometer(short *ax,short *ay,short *az)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b086      	sub	sp, #24
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
    uint8_t buf[6],res;
    res=MPU_Read_Len(MPU_ADDR,MPU_ACCEL_XOUTH_REG,6,buf);
 80061f6:	f107 0310 	add.w	r3, r7, #16
 80061fa:	2206      	movs	r2, #6
 80061fc:	213b      	movs	r1, #59	@ 0x3b
 80061fe:	2068      	movs	r0, #104	@ 0x68
 8006200:	f000 f867 	bl	80062d2 <MPU_Read_Len>
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]
    if(res==0)
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d11a      	bne.n	8006244 <MPU_Get_Accelerometer+0x5a>
    {
        *ax=((uint16_t)buf[0]<<8)|buf[1];
 800620e:	7c3b      	ldrb	r3, [r7, #16]
 8006210:	021b      	lsls	r3, r3, #8
 8006212:	b21a      	sxth	r2, r3
 8006214:	7c7b      	ldrb	r3, [r7, #17]
 8006216:	b21b      	sxth	r3, r3
 8006218:	4313      	orrs	r3, r2
 800621a:	b21a      	sxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	801a      	strh	r2, [r3, #0]
        *ay=((uint16_t)buf[2]<<8)|buf[3];
 8006220:	7cbb      	ldrb	r3, [r7, #18]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	b21a      	sxth	r2, r3
 8006226:	7cfb      	ldrb	r3, [r7, #19]
 8006228:	b21b      	sxth	r3, r3
 800622a:	4313      	orrs	r3, r2
 800622c:	b21a      	sxth	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	801a      	strh	r2, [r3, #0]
        *az=((uint16_t)buf[4]<<8)|buf[5];
 8006232:	7d3b      	ldrb	r3, [r7, #20]
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	b21a      	sxth	r2, r3
 8006238:	7d7b      	ldrb	r3, [r7, #21]
 800623a:	b21b      	sxth	r3, r3
 800623c:	4313      	orrs	r3, r2
 800623e:	b21a      	sxth	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	801a      	strh	r2, [r3, #0]
    }
    return res;;
 8006244:	7dfb      	ldrb	r3, [r7, #23]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <MPU_Write_Len>:

uint8_t MPU_Write_Len(uint8_t addr,uint8_t reg,uint8_t len,uint8_t *buf)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	603b      	str	r3, [r7, #0]
 8006256:	4603      	mov	r3, r0
 8006258:	71fb      	strb	r3, [r7, #7]
 800625a:	460b      	mov	r3, r1
 800625c:	71bb      	strb	r3, [r7, #6]
 800625e:	4613      	mov	r3, r2
 8006260:	717b      	strb	r3, [r7, #5]
    uint8_t i;
    MPU_IIC_Start();
 8006262:	f7fc faaf 	bl	80027c4 <IIC_Start>
    MPU_IIC_Send_Byte((addr<<1)|0);
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	b2db      	uxtb	r3, r3
 800626c:	4618      	mov	r0, r3
 800626e:	f7fc fae1 	bl	8002834 <IIC_Send_Byte>
    if(MPU_IIC_Wait_Ack())
 8006272:	f7fc fb59 	bl	8002928 <IIC_Wait_Ack>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <MPU_Write_Len+0x36>
    {
        MPU_IIC_Stop();
 800627c:	f7fc fac2 	bl	8002804 <IIC_Stop>
        return 1;
 8006280:	2301      	movs	r3, #1
 8006282:	e022      	b.n	80062ca <MPU_Write_Len+0x7c>
    }
    MPU_IIC_Send_Byte(reg);
 8006284:	79bb      	ldrb	r3, [r7, #6]
 8006286:	4618      	mov	r0, r3
 8006288:	f7fc fad4 	bl	8002834 <IIC_Send_Byte>
    MPU_IIC_Wait_Ack();
 800628c:	f7fc fb4c 	bl	8002928 <IIC_Wait_Ack>
    for(i=0; i<len; i++)
 8006290:	2300      	movs	r3, #0
 8006292:	73fb      	strb	r3, [r7, #15]
 8006294:	e012      	b.n	80062bc <MPU_Write_Len+0x6e>
    {
        MPU_IIC_Send_Byte(buf[i]);
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	4413      	add	r3, r2
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fc fac8 	bl	8002834 <IIC_Send_Byte>
        if(MPU_IIC_Wait_Ack())
 80062a4:	f7fc fb40 	bl	8002928 <IIC_Wait_Ack>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <MPU_Write_Len+0x68>
        {
            MPU_IIC_Stop();
 80062ae:	f7fc faa9 	bl	8002804 <IIC_Stop>
            return 1;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e009      	b.n	80062ca <MPU_Write_Len+0x7c>
    for(i=0; i<len; i++)
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	3301      	adds	r3, #1
 80062ba:	73fb      	strb	r3, [r7, #15]
 80062bc:	7bfa      	ldrb	r2, [r7, #15]
 80062be:	797b      	ldrb	r3, [r7, #5]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d3e8      	bcc.n	8006296 <MPU_Write_Len+0x48>
        }
    }
    MPU_IIC_Stop();
 80062c4:	f7fc fa9e 	bl	8002804 <IIC_Stop>
    return 0;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <MPU_Read_Len>:

uint8_t MPU_Read_Len(uint8_t addr,uint8_t reg,uint8_t len,uint8_t *buf)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	4603      	mov	r3, r0
 80062dc:	71fb      	strb	r3, [r7, #7]
 80062de:	460b      	mov	r3, r1
 80062e0:	71bb      	strb	r3, [r7, #6]
 80062e2:	4613      	mov	r3, r2
 80062e4:	717b      	strb	r3, [r7, #5]
    MPU_IIC_Start();
 80062e6:	f7fc fa6d 	bl	80027c4 <IIC_Start>
    MPU_IIC_Send_Byte((addr<<1)|0);
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fc fa9f 	bl	8002834 <IIC_Send_Byte>
    if(MPU_IIC_Wait_Ack())
 80062f6:	f7fc fb17 	bl	8002928 <IIC_Wait_Ack>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <MPU_Read_Len+0x36>
    {
        MPU_IIC_Stop();
 8006300:	f7fc fa80 	bl	8002804 <IIC_Stop>
        return 1;
 8006304:	2301      	movs	r3, #1
 8006306:	e032      	b.n	800636e <MPU_Read_Len+0x9c>
    }
    MPU_IIC_Send_Byte(reg);
 8006308:	79bb      	ldrb	r3, [r7, #6]
 800630a:	4618      	mov	r0, r3
 800630c:	f7fc fa92 	bl	8002834 <IIC_Send_Byte>
    MPU_IIC_Wait_Ack();
 8006310:	f7fc fb0a 	bl	8002928 <IIC_Wait_Ack>
    MPU_IIC_Start();
 8006314:	f7fc fa56 	bl	80027c4 <IIC_Start>
    MPU_IIC_Send_Byte((addr<<1)|1);
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	b25b      	sxtb	r3, r3
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	b25b      	sxtb	r3, r3
 8006324:	b2db      	uxtb	r3, r3
 8006326:	4618      	mov	r0, r3
 8006328:	f7fc fa84 	bl	8002834 <IIC_Send_Byte>
    MPU_IIC_Wait_Ack();
 800632c:	f7fc fafc 	bl	8002928 <IIC_Wait_Ack>
    while(len)
 8006330:	e017      	b.n	8006362 <MPU_Read_Len+0x90>
    {
        if(len==1)*buf=MPU_IIC_Read_Byte(0);
 8006332:	797b      	ldrb	r3, [r7, #5]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d107      	bne.n	8006348 <MPU_Read_Len+0x76>
 8006338:	2000      	movs	r0, #0
 800633a:	f7fc fabb 	bl	80028b4 <IIC_Read_Byte>
 800633e:	4603      	mov	r3, r0
 8006340:	461a      	mov	r2, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e006      	b.n	8006356 <MPU_Read_Len+0x84>
        else *buf=MPU_IIC_Read_Byte(1);
 8006348:	2001      	movs	r0, #1
 800634a:	f7fc fab3 	bl	80028b4 <IIC_Read_Byte>
 800634e:	4603      	mov	r3, r0
 8006350:	461a      	mov	r2, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	701a      	strb	r2, [r3, #0]
        len--;
 8006356:	797b      	ldrb	r3, [r7, #5]
 8006358:	3b01      	subs	r3, #1
 800635a:	717b      	strb	r3, [r7, #5]
        buf++;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	3301      	adds	r3, #1
 8006360:	603b      	str	r3, [r7, #0]
    while(len)
 8006362:	797b      	ldrb	r3, [r7, #5]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e4      	bne.n	8006332 <MPU_Read_Len+0x60>
    }
    MPU_IIC_Stop();
 8006368:	f7fc fa4c 	bl	8002804 <IIC_Stop>
    return 0;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <MPU_Write_Byte>:


uint8_t MPU_Write_Byte(uint8_t reg,uint8_t data)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	4603      	mov	r3, r0
 800637e:	460a      	mov	r2, r1
 8006380:	71fb      	strb	r3, [r7, #7]
 8006382:	4613      	mov	r3, r2
 8006384:	71bb      	strb	r3, [r7, #6]
    MPU_IIC_Start();
 8006386:	f7fc fa1d 	bl	80027c4 <IIC_Start>
    MPU_IIC_Send_Byte((MPU_ADDR<<1)|0);
 800638a:	20d0      	movs	r0, #208	@ 0xd0
 800638c:	f7fc fa52 	bl	8002834 <IIC_Send_Byte>
    if(MPU_IIC_Wait_Ack())
 8006390:	f7fc faca 	bl	8002928 <IIC_Wait_Ack>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <MPU_Write_Byte+0x2c>
    {
        MPU_IIC_Stop();
 800639a:	f7fc fa33 	bl	8002804 <IIC_Stop>
        return 1;
 800639e:	2301      	movs	r3, #1
 80063a0:	e015      	b.n	80063ce <MPU_Write_Byte+0x58>
    }
    MPU_IIC_Send_Byte(reg);
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fc fa45 	bl	8002834 <IIC_Send_Byte>
    MPU_IIC_Wait_Ack();
 80063aa:	f7fc fabd 	bl	8002928 <IIC_Wait_Ack>
    MPU_IIC_Send_Byte(data);
 80063ae:	79bb      	ldrb	r3, [r7, #6]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fc fa3f 	bl	8002834 <IIC_Send_Byte>
    if(MPU_IIC_Wait_Ack())
 80063b6:	f7fc fab7 	bl	8002928 <IIC_Wait_Ack>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <MPU_Write_Byte+0x52>
    {
        MPU_IIC_Stop();
 80063c0:	f7fc fa20 	bl	8002804 <IIC_Stop>
        return 1;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e002      	b.n	80063ce <MPU_Write_Byte+0x58>
    }
    MPU_IIC_Stop();
 80063c8:	f7fc fa1c 	bl	8002804 <IIC_Stop>
    return 0;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <MPU_Read_Byte>:

uint8_t MPU_Read_Byte(uint8_t reg)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	4603      	mov	r3, r0
 80063de:	71fb      	strb	r3, [r7, #7]
    uint8_t res;
    MPU_IIC_Start();
 80063e0:	f7fc f9f0 	bl	80027c4 <IIC_Start>
    MPU_IIC_Send_Byte((MPU_ADDR<<1)|0);
 80063e4:	20d0      	movs	r0, #208	@ 0xd0
 80063e6:	f7fc fa25 	bl	8002834 <IIC_Send_Byte>
    MPU_IIC_Wait_Ack();
 80063ea:	f7fc fa9d 	bl	8002928 <IIC_Wait_Ack>
    MPU_IIC_Send_Byte(reg);
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fc fa1f 	bl	8002834 <IIC_Send_Byte>
    MPU_IIC_Wait_Ack();
 80063f6:	f7fc fa97 	bl	8002928 <IIC_Wait_Ack>
    MPU_IIC_Start();
 80063fa:	f7fc f9e3 	bl	80027c4 <IIC_Start>
    MPU_IIC_Send_Byte((MPU_ADDR<<1)|1);
 80063fe:	20d1      	movs	r0, #209	@ 0xd1
 8006400:	f7fc fa18 	bl	8002834 <IIC_Send_Byte>
    MPU_IIC_Wait_Ack();
 8006404:	f7fc fa90 	bl	8002928 <IIC_Wait_Ack>
    res=MPU_IIC_Read_Byte(0);
 8006408:	2000      	movs	r0, #0
 800640a:	f7fc fa53 	bl	80028b4 <IIC_Read_Byte>
 800640e:	4603      	mov	r3, r0
 8006410:	73fb      	strb	r3, [r7, #15]
    MPU_IIC_Stop();
 8006412:	f7fc f9f7 	bl	8002804 <IIC_Stop>
    return res;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <WriteCmd>:
0xDB,0x30,0x8D,0x14, 0xAF,0x20,0x00};



void WriteCmd(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af04      	add	r7, sp, #16
	uint8_t i = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<29; i++)
 800642a:	2300      	movs	r3, #0
 800642c:	71fb      	strb	r3, [r7, #7]
 800642e:	e011      	b.n	8006454 <WriteCmd+0x34>
	{
		HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,CMD_Data+i,1,0x100);
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	4a0c      	ldr	r2, [pc, #48]	@ (8006464 <WriteCmd+0x44>)
 8006434:	4413      	add	r3, r2
 8006436:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800643a:	9202      	str	r2, [sp, #8]
 800643c:	2201      	movs	r2, #1
 800643e:	9201      	str	r2, [sp, #4]
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	2301      	movs	r3, #1
 8006444:	2200      	movs	r2, #0
 8006446:	2178      	movs	r1, #120	@ 0x78
 8006448:	4807      	ldr	r0, [pc, #28]	@ (8006468 <WriteCmd+0x48>)
 800644a:	f002 faa1 	bl	8008990 <HAL_I2C_Mem_Write>
	for(i=0; i<29; i++)
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	3301      	adds	r3, #1
 8006452:	71fb      	strb	r3, [r7, #7]
 8006454:	79fb      	ldrb	r3, [r7, #7]
 8006456:	2b1c      	cmp	r3, #28
 8006458:	d9ea      	bls.n	8006430 <WriteCmd+0x10>
	}
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20000054 	.word	0x20000054
 8006468:	20000308 	.word	0x20000308

0800646c <OLED_WR_CMD>:
//向设备写控制命令
void OLED_WR_CMD(uint8_t cmd)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af04      	add	r7, sp, #16
 8006472:	4603      	mov	r3, r0
 8006474:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 8006476:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800647a:	9302      	str	r3, [sp, #8]
 800647c:	2301      	movs	r3, #1
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	1dfb      	adds	r3, r7, #7
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	2301      	movs	r3, #1
 8006486:	2200      	movs	r2, #0
 8006488:	2178      	movs	r1, #120	@ 0x78
 800648a:	4803      	ldr	r0, [pc, #12]	@ (8006498 <OLED_WR_CMD+0x2c>)
 800648c:	f002 fa80 	bl	8008990 <HAL_I2C_Mem_Write>
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20000308 	.word	0x20000308

0800649c <OLED_WR_DATA>:
//向设备写数据
void OLED_WR_DATA(uint8_t data)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af04      	add	r7, sp, #16
 80064a2:	4603      	mov	r3, r0
 80064a4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 80064a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80064aa:	9302      	str	r3, [sp, #8]
 80064ac:	2301      	movs	r3, #1
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	1dfb      	adds	r3, r7, #7
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	2301      	movs	r3, #1
 80064b6:	2240      	movs	r2, #64	@ 0x40
 80064b8:	2178      	movs	r1, #120	@ 0x78
 80064ba:	4803      	ldr	r0, [pc, #12]	@ (80064c8 <OLED_WR_DATA+0x2c>)
 80064bc:	f002 fa68 	bl	8008990 <HAL_I2C_Mem_Write>
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20000308 	.word	0x20000308

080064cc <OLED_Init>:
//初始化oled屏幕
void OLED_Init(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 80064d0:	20c8      	movs	r0, #200	@ 0xc8
 80064d2:	f000 fd2d 	bl	8006f30 <HAL_Delay>

	WriteCmd();
 80064d6:	f7ff ffa3 	bl	8006420 <WriteCmd>
}
 80064da:	bf00      	nop
 80064dc:	bd80      	pop	{r7, pc}

080064de <OLED_Clear>:
//清屏
void OLED_Clear(void)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b082      	sub	sp, #8
 80064e2:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 80064e4:	2300      	movs	r3, #0
 80064e6:	71fb      	strb	r3, [r7, #7]
 80064e8:	e01b      	b.n	8006522 <OLED_Clear+0x44>
	{
		OLED_WR_CMD(0xb0+i);
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	3b50      	subs	r3, #80	@ 0x50
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff ffbb 	bl	800646c <OLED_WR_CMD>
		OLED_WR_CMD (0x00);
 80064f6:	2000      	movs	r0, #0
 80064f8:	f7ff ffb8 	bl	800646c <OLED_WR_CMD>
		OLED_WR_CMD (0x10);
 80064fc:	2010      	movs	r0, #16
 80064fe:	f7ff ffb5 	bl	800646c <OLED_WR_CMD>
		for(n=0;n<128;n++)
 8006502:	2300      	movs	r3, #0
 8006504:	71bb      	strb	r3, [r7, #6]
 8006506:	e005      	b.n	8006514 <OLED_Clear+0x36>
			OLED_WR_DATA(0);
 8006508:	2000      	movs	r0, #0
 800650a:	f7ff ffc7 	bl	800649c <OLED_WR_DATA>
		for(n=0;n<128;n++)
 800650e:	79bb      	ldrb	r3, [r7, #6]
 8006510:	3301      	adds	r3, #1
 8006512:	71bb      	strb	r3, [r7, #6]
 8006514:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006518:	2b00      	cmp	r3, #0
 800651a:	daf5      	bge.n	8006508 <OLED_Clear+0x2a>
	for(i=0;i<8;i++)
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	3301      	adds	r3, #1
 8006520:	71fb      	strb	r3, [r7, #7]
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	2b07      	cmp	r3, #7
 8006526:	d9e0      	bls.n	80064ea <OLED_Clear+0xc>
	}
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示
//size:选择字体 16/12
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size,uint8_t Color_Turn)
{
 8006534:	b4b0      	push	{r4, r5, r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	4611      	mov	r1, r2
 8006540:	461a      	mov	r2, r3
 8006542:	4623      	mov	r3, r4
 8006544:	71fb      	strb	r3, [r7, #7]
 8006546:	4603      	mov	r3, r0
 8006548:	71bb      	strb	r3, [r7, #6]
 800654a:	460b      	mov	r3, r1
 800654c:	717b      	strb	r3, [r7, #5]
 800654e:	4613      	mov	r3, r2
 8006550:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;
 8006552:	2300      	movs	r3, #0
 8006554:	73bb      	strb	r3, [r7, #14]
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]
		c = chr - ' ';//得到偏移后的值
 800655a:	797b      	ldrb	r3, [r7, #5]
 800655c:	3b20      	subs	r3, #32
 800655e:	73bb      	strb	r3, [r7, #14]
		if(x>128-1)
 8006560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006564:	2b00      	cmp	r3, #0
 8006566:	da04      	bge.n	8006572 <OLED_ShowChar+0x3e>
		{
			x=0;
 8006568:	2300      	movs	r3, #0
 800656a:	71fb      	strb	r3, [r7, #7]
			y = y + 2;
 800656c:	79bb      	ldrb	r3, [r7, #6]
 800656e:	3302      	adds	r3, #2
 8006570:	71bb      	strb	r3, [r7, #6]
		}
		if(Char_Size == 16)
 8006572:	793b      	ldrb	r3, [r7, #4]
 8006574:	2b10      	cmp	r3, #16
 8006576:	d165      	bne.n	8006644 <OLED_ShowChar+0x110>
		{
			for(i=0;i<8;i++)
 8006578:	2300      	movs	r3, #0
 800657a:	73fb      	strb	r3, [r7, #15]
 800657c:	e029      	b.n	80065d2 <OLED_ShowChar+0x9e>
			{
				if(Color_Turn)
 800657e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d012      	beq.n	80065ac <OLED_ShowChar+0x78>
					show_mem[y][x+i] = ~F8X16[c*16+i];
 8006586:	7bbb      	ldrb	r3, [r7, #14]
 8006588:	011a      	lsls	r2, r3, #4
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	4413      	add	r3, r2
 800658e:	4a4c      	ldr	r2, [pc, #304]	@ (80066c0 <OLED_ShowChar+0x18c>)
 8006590:	5cd1      	ldrb	r1, [r2, r3]
 8006592:	79ba      	ldrb	r2, [r7, #6]
 8006594:	79f8      	ldrb	r0, [r7, #7]
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	4403      	add	r3, r0
 800659a:	43c9      	mvns	r1, r1
 800659c:	b2c8      	uxtb	r0, r1
 800659e:	4949      	ldr	r1, [pc, #292]	@ (80066c4 <OLED_ShowChar+0x190>)
 80065a0:	01d2      	lsls	r2, r2, #7
 80065a2:	440a      	add	r2, r1
 80065a4:	4413      	add	r3, r2
 80065a6:	4602      	mov	r2, r0
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e00f      	b.n	80065cc <OLED_ShowChar+0x98>
				else
					show_mem[y][x+i] = F8X16[c*16+i];
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	011a      	lsls	r2, r3, #4
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	18d1      	adds	r1, r2, r3
 80065b4:	79ba      	ldrb	r2, [r7, #6]
 80065b6:	79f8      	ldrb	r0, [r7, #7]
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	4403      	add	r3, r0
 80065bc:	4840      	ldr	r0, [pc, #256]	@ (80066c0 <OLED_ShowChar+0x18c>)
 80065be:	5c40      	ldrb	r0, [r0, r1]
 80065c0:	4940      	ldr	r1, [pc, #256]	@ (80066c4 <OLED_ShowChar+0x190>)
 80065c2:	01d2      	lsls	r2, r2, #7
 80065c4:	440a      	add	r2, r1
 80065c6:	4413      	add	r3, r2
 80065c8:	4602      	mov	r2, r0
 80065ca:	701a      	strb	r2, [r3, #0]
			for(i=0;i<8;i++)
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	3301      	adds	r3, #1
 80065d0:	73fb      	strb	r3, [r7, #15]
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	2b07      	cmp	r3, #7
 80065d6:	d9d2      	bls.n	800657e <OLED_ShowChar+0x4a>
			}
			for(i=0;i<8;i++)
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]
 80065dc:	e02e      	b.n	800663c <OLED_ShowChar+0x108>
			{
				if(Color_Turn)
 80065de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d014      	beq.n	8006610 <OLED_ShowChar+0xdc>
					show_mem[y+1][x+i] = ~F8X16[c*16+i+8];
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	011a      	lsls	r2, r3, #4
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	4413      	add	r3, r2
 80065ee:	3308      	adds	r3, #8
 80065f0:	4a33      	ldr	r2, [pc, #204]	@ (80066c0 <OLED_ShowChar+0x18c>)
 80065f2:	5cd1      	ldrb	r1, [r2, r3]
 80065f4:	79bb      	ldrb	r3, [r7, #6]
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	79f8      	ldrb	r0, [r7, #7]
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	4403      	add	r3, r0
 80065fe:	43c9      	mvns	r1, r1
 8006600:	b2c8      	uxtb	r0, r1
 8006602:	4930      	ldr	r1, [pc, #192]	@ (80066c4 <OLED_ShowChar+0x190>)
 8006604:	01d2      	lsls	r2, r2, #7
 8006606:	440a      	add	r2, r1
 8006608:	4413      	add	r3, r2
 800660a:	4602      	mov	r2, r0
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e012      	b.n	8006636 <OLED_ShowChar+0x102>
				else
					show_mem[y+1][x+i] = F8X16[c*16+i+8];
 8006610:	7bbb      	ldrb	r3, [r7, #14]
 8006612:	011a      	lsls	r2, r3, #4
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	4413      	add	r3, r2
 8006618:	f103 0108 	add.w	r1, r3, #8
 800661c:	79bb      	ldrb	r3, [r7, #6]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	79f8      	ldrb	r0, [r7, #7]
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	4403      	add	r3, r0
 8006626:	4826      	ldr	r0, [pc, #152]	@ (80066c0 <OLED_ShowChar+0x18c>)
 8006628:	5c40      	ldrb	r0, [r0, r1]
 800662a:	4926      	ldr	r1, [pc, #152]	@ (80066c4 <OLED_ShowChar+0x190>)
 800662c:	01d2      	lsls	r2, r2, #7
 800662e:	440a      	add	r2, r1
 8006630:	4413      	add	r3, r2
 8006632:	4602      	mov	r2, r0
 8006634:	701a      	strb	r2, [r3, #0]
			for(i=0;i<8;i++)
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	3301      	adds	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b07      	cmp	r3, #7
 8006640:	d9cd      	bls.n	80065de <OLED_ShowChar+0xaa>
					show_mem[y][x+i] = ~F6x8[c][i];
				else
					show_mem[y][x+i] = F6x8[c][i];
			}
		}
}
 8006642:	e037      	b.n	80066b4 <OLED_ShowChar+0x180>
			for(i=0;i<6;i++)
 8006644:	2300      	movs	r3, #0
 8006646:	73fb      	strb	r3, [r7, #15]
 8006648:	e031      	b.n	80066ae <OLED_ShowChar+0x17a>
				if(Color_Turn)
 800664a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d016      	beq.n	8006680 <OLED_ShowChar+0x14c>
					show_mem[y][x+i] = ~F6x8[c][i];
 8006652:	7bba      	ldrb	r2, [r7, #14]
 8006654:	7bf9      	ldrb	r1, [r7, #15]
 8006656:	481c      	ldr	r0, [pc, #112]	@ (80066c8 <OLED_ShowChar+0x194>)
 8006658:	4613      	mov	r3, r2
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	4413      	add	r3, r2
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	4403      	add	r3, r0
 8006662:	440b      	add	r3, r1
 8006664:	7819      	ldrb	r1, [r3, #0]
 8006666:	79ba      	ldrb	r2, [r7, #6]
 8006668:	79f8      	ldrb	r0, [r7, #7]
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	4403      	add	r3, r0
 800666e:	43c9      	mvns	r1, r1
 8006670:	b2c8      	uxtb	r0, r1
 8006672:	4914      	ldr	r1, [pc, #80]	@ (80066c4 <OLED_ShowChar+0x190>)
 8006674:	01d2      	lsls	r2, r2, #7
 8006676:	440a      	add	r2, r1
 8006678:	4413      	add	r3, r2
 800667a:	4602      	mov	r2, r0
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e013      	b.n	80066a8 <OLED_ShowChar+0x174>
					show_mem[y][x+i] = F6x8[c][i];
 8006680:	7bba      	ldrb	r2, [r7, #14]
 8006682:	7bfc      	ldrb	r4, [r7, #15]
 8006684:	79b8      	ldrb	r0, [r7, #6]
 8006686:	79f9      	ldrb	r1, [r7, #7]
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	4419      	add	r1, r3
 800668c:	4d0e      	ldr	r5, [pc, #56]	@ (80066c8 <OLED_ShowChar+0x194>)
 800668e:	4613      	mov	r3, r2
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	4413      	add	r3, r2
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	442b      	add	r3, r5
 8006698:	4423      	add	r3, r4
 800669a:	781c      	ldrb	r4, [r3, #0]
 800669c:	4a09      	ldr	r2, [pc, #36]	@ (80066c4 <OLED_ShowChar+0x190>)
 800669e:	01c3      	lsls	r3, r0, #7
 80066a0:	4413      	add	r3, r2
 80066a2:	440b      	add	r3, r1
 80066a4:	4622      	mov	r2, r4
 80066a6:	701a      	strb	r2, [r3, #0]
			for(i=0;i<6;i++)
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	3301      	adds	r3, #1
 80066ac:	73fb      	strb	r3, [r7, #15]
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	2b05      	cmp	r3, #5
 80066b2:	d9ca      	bls.n	800664a <OLED_ShowChar+0x116>
}
 80066b4:	bf00      	nop
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bcb0      	pop	{r4, r5, r7}
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	08016a10 	.word	0x08016a10
 80066c4:	2000064c 	.word	0x2000064c
 80066c8:	080167e8 	.word	0x080167e8

080066cc <OLED_ShowString>:

//显示一个字符号串
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size,uint8_t Color_Turn)
{
 80066cc:	b590      	push	{r4, r7, lr}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	603a      	str	r2, [r7, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	4603      	mov	r3, r0
 80066d8:	71fb      	strb	r3, [r7, #7]
 80066da:	460b      	mov	r3, r1
 80066dc:	71bb      	strb	r3, [r7, #6]
 80066de:	4613      	mov	r3, r2
 80066e0:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 80066e6:	e01a      	b.n	800671e <OLED_ShowString+0x52>
	{		OLED_ShowChar(x,y,chr[j],Char_Size,Color_Turn);
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	4413      	add	r3, r2
 80066ee:	781a      	ldrb	r2, [r3, #0]
 80066f0:	797c      	ldrb	r4, [r7, #5]
 80066f2:	79b9      	ldrb	r1, [r7, #6]
 80066f4:	79f8      	ldrb	r0, [r7, #7]
 80066f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	4623      	mov	r3, r4
 80066fe:	f7ff ff19 	bl	8006534 <OLED_ShowChar>
			x+=8;
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	3308      	adds	r3, #8
 8006706:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	2b78      	cmp	r3, #120	@ 0x78
 800670c:	d904      	bls.n	8006718 <OLED_ShowString+0x4c>
 800670e:	2300      	movs	r3, #0
 8006710:	71fb      	strb	r3, [r7, #7]
 8006712:	79bb      	ldrb	r3, [r7, #6]
 8006714:	3302      	adds	r3, #2
 8006716:	71bb      	strb	r3, [r7, #6]
			j++;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	3301      	adds	r3, #1
 800671c:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	4413      	add	r3, r2
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1de      	bne.n	80066e8 <OLED_ShowString+0x1c>
	}
}
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	bd90      	pop	{r4, r7, pc}

08006734 <OLED_Refresh>:
				adder+=1;
      }
}

void OLED_Refresh(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af02      	add	r7, sp, #8
	refresh_flag = 1;
 800673a:	4b08      	ldr	r3, [pc, #32]	@ (800675c <OLED_Refresh+0x28>)
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write_DMA(&hi2c1,0x78,0x40,I2C_MEMADD_SIZE_8BIT,(uint8_t *)show_mem,128*8);
 8006740:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	4b06      	ldr	r3, [pc, #24]	@ (8006760 <OLED_Refresh+0x2c>)
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	2301      	movs	r3, #1
 800674c:	2240      	movs	r2, #64	@ 0x40
 800674e:	2178      	movs	r1, #120	@ 0x78
 8006750:	4804      	ldr	r0, [pc, #16]	@ (8006764 <OLED_Refresh+0x30>)
 8006752:	f002 fa17 	bl	8008b84 <HAL_I2C_Mem_Write_DMA>
}
 8006756:	bf00      	nop
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000a4c 	.word	0x20000a4c
 8006760:	2000064c 	.word	0x2000064c
 8006764:	20000308 	.word	0x20000308

08006768 <Vertical>:


//直立环PD控制器
//输入：期望角度、真实角度、角速度
int Vertical(float Med,float Angle,float gyro_Y)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006772:	edc7 0a02 	vstr	s1, [r7, #8]
 8006776:	ed87 1a01 	vstr	s2, [r7, #4]
	int temp;
	temp=Vertical_Kp*(Angle-Med)+Vertical_Kd*gyro_Y;
 800677a:	ed97 7a02 	vldr	s14, [r7, #8]
 800677e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006782:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006786:	4b0d      	ldr	r3, [pc, #52]	@ (80067bc <Vertical+0x54>)
 8006788:	edd3 7a00 	vldr	s15, [r3]
 800678c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006790:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <Vertical+0x58>)
 8006792:	edd3 6a00 	vldr	s13, [r3]
 8006796:	edd7 7a01 	vldr	s15, [r7, #4]
 800679a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800679e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067a6:	ee17 3a90 	vmov	r3, s15
 80067aa:	617b      	str	r3, [r7, #20]
	return temp;
 80067ac:	697b      	ldr	r3, [r7, #20]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000004 	.word	0x20000004
 80067c0:	20000008 	.word	0x20000008

080067c4 <Velocity>:

//速度环PI控制器
//输入：期望速度、左编码器、右编码器
int Velocity(float Target,int encoder_L,int encoder_R)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b089      	sub	sp, #36	@ 0x24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80067ce:	60b8      	str	r0, [r7, #8]
 80067d0:	6079      	str	r1, [r7, #4]

	static float a = 0.7;        // 低通滤波系数（0~1，越大滤波越平滑但滞后越大）
	int Err, Err_LowOut, temp;
	Velocity_Ki = Velocity_Kp / 200;  // 积分系数Ki由比例系数Kp动态计算（Ki = Kp/200）
 80067d2:	4b40      	ldr	r3, [pc, #256]	@ (80068d4 <Velocity+0x110>)
 80067d4:	ed93 7a00 	vldr	s14, [r3]
 80067d8:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80068d8 <Velocity+0x114>
 80067dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067e0:	4b3e      	ldr	r3, [pc, #248]	@ (80068dc <Velocity+0x118>)
 80067e2:	edc3 7a00 	vstr	s15, [r3]

	// 1、计算速度偏差值（实际速度-目标速度）
	Err = (encoder_L + encoder_R) - Target;
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4413      	add	r3, r2
 80067ec:	ee07 3a90 	vmov	s15, r3
 80067f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80067f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006800:	ee17 3a90 	vmov	r3, s15
 8006804:	61fb      	str	r3, [r7, #28]
	//   encoder_L/R：左右轮编码器值（反映实际速度）
	//   Target：目标速度设定值

	// 2、低通滤波（抑制高频噪声）
	Err_LowOut = (1 - a) * Err + a * Err_LowOut_last;  // 一阶惯性滤波公式
 8006806:	4b36      	ldr	r3, [pc, #216]	@ (80068e0 <Velocity+0x11c>)
 8006808:	edd3 7a00 	vldr	s15, [r3]
 800680c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006810:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800681e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006822:	4b30      	ldr	r3, [pc, #192]	@ (80068e4 <Velocity+0x120>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800682e:	4b2c      	ldr	r3, [pc, #176]	@ (80068e0 <Velocity+0x11c>)
 8006830:	edd3 7a00 	vldr	s15, [r3]
 8006834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800683c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006840:	ee17 3a90 	vmov	r3, s15
 8006844:	61bb      	str	r3, [r7, #24]
	Err_LowOut_last = Err_LowOut;  // 保存当前滤波值供下次使用
 8006846:	4a27      	ldr	r2, [pc, #156]	@ (80068e4 <Velocity+0x120>)
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	6013      	str	r3, [r2, #0]

	// 3、积分环节（消除稳态误差）
	Encoder_S += Err_LowOut;  // 累积滤波后的偏差值
 800684c:	4b26      	ldr	r3, [pc, #152]	@ (80068e8 <Velocity+0x124>)
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	4413      	add	r3, r2
 8006854:	4a24      	ldr	r2, [pc, #144]	@ (80068e8 <Velocity+0x124>)
 8006856:	6013      	str	r3, [r2, #0]

	// 4、积分限幅（防止积分饱和）
	Encoder_S = Encoder_S > 10000 ? 10000 : (Encoder_S < (-10000) ? (-10000) : Encoder_S);
 8006858:	4b23      	ldr	r3, [pc, #140]	@ (80068e8 <Velocity+0x124>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006860:	4293      	cmp	r3, r2
 8006862:	dc06      	bgt.n	8006872 <Velocity+0xae>
 8006864:	4b20      	ldr	r3, [pc, #128]	@ (80068e8 <Velocity+0x124>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a20      	ldr	r2, [pc, #128]	@ (80068ec <Velocity+0x128>)
 800686a:	4293      	cmp	r3, r2
 800686c:	bfb8      	it	lt
 800686e:	4613      	movlt	r3, r2
 8006870:	e001      	b.n	8006876 <Velocity+0xb2>
 8006872:	f242 7310 	movw	r3, #10000	@ 0x2710
 8006876:	4a1c      	ldr	r2, [pc, #112]	@ (80068e8 <Velocity+0x124>)
 8006878:	6013      	str	r3, [r2, #0]
	if (stop == 1) Encoder_S = 0, stop = 0;  // 停止信号触发时重置积分项
 800687a:	4b1d      	ldr	r3, [pc, #116]	@ (80068f0 <Velocity+0x12c>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d105      	bne.n	800688e <Velocity+0xca>
 8006882:	4b19      	ldr	r3, [pc, #100]	@ (80068e8 <Velocity+0x124>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	4b19      	ldr	r3, [pc, #100]	@ (80068f0 <Velocity+0x12c>)
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]

	// 5、速度环PID计算（仅使用PD+积分，此处省略微分）
	temp = Velocity_Kp * Err_LowOut + Velocity_Ki * Encoder_S;  // 比例项 + 积分项
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	ee07 3a90 	vmov	s15, r3
 8006894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006898:	4b0e      	ldr	r3, [pc, #56]	@ (80068d4 <Velocity+0x110>)
 800689a:	edd3 7a00 	vldr	s15, [r3]
 800689e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068a2:	4b11      	ldr	r3, [pc, #68]	@ (80068e8 <Velocity+0x124>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80068ae:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <Velocity+0x118>)
 80068b0:	edd3 7a00 	vldr	s15, [r3]
 80068b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068c0:	ee17 3a90 	vmov	r3, s15
 80068c4:	617b      	str	r3, [r7, #20]
	return temp;
 80068c6:	697b      	ldr	r3, [r7, #20]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3724      	adds	r7, #36	@ 0x24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	2000000c 	.word	0x2000000c
 80068d8:	43480000 	.word	0x43480000
 80068dc:	200003c0 	.word	0x200003c0
 80068e0:	20000088 	.word	0x20000088
 80068e4:	20000a74 	.word	0x20000a74
 80068e8:	20000a78 	.word	0x20000a78
 80068ec:	ffffd8f0 	.word	0xffffd8f0
 80068f0:	20000a70 	.word	0x20000a70

080068f4 <Turn>:


//转向环PD控制器
//输入：角速度、角度值
int Turn(float gyro_Z,int Target_turn)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80068fe:	6038      	str	r0, [r7, #0]
	int temp;
	temp=Turn_Kp*Target_turn+Turn_Kd*gyro_Z;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800690a:	4b0d      	ldr	r3, [pc, #52]	@ (8006940 <Turn+0x4c>)
 800690c:	edd3 7a00 	vldr	s15, [r3]
 8006910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006914:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <Turn+0x50>)
 8006916:	edd3 6a00 	vldr	s13, [r3]
 800691a:	edd7 7a01 	vldr	s15, [r7, #4]
 800691e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800692a:	ee17 3a90 	vmov	r3, s15
 800692e:	60fb      	str	r3, [r7, #12]
	return temp;
 8006930:	68fb      	ldr	r3, [r7, #12]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000010 	.word	0x20000010
 8006944:	20000014 	.word	0x20000014

08006948 <Control>:

void Control(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
	int PWM_out;
	//1、读取编码器和陀螺仪的数据
	Encoder_Right=Read_Speed(&htim4);
 800694e:	48b4      	ldr	r0, [pc, #720]	@ (8006c20 <Control+0x2d8>)
 8006950:	f7fb fe93 	bl	800267a <Read_Speed>
 8006954:	4603      	mov	r3, r0
 8006956:	4ab3      	ldr	r2, [pc, #716]	@ (8006c24 <Control+0x2dc>)
 8006958:	6013      	str	r3, [r2, #0]
	Encoder_Left=Read_Speed(&htim2);
 800695a:	48b3      	ldr	r0, [pc, #716]	@ (8006c28 <Control+0x2e0>)
 800695c:	f7fb fe8d 	bl	800267a <Read_Speed>
 8006960:	4603      	mov	r3, r0
 8006962:	4ab2      	ldr	r2, [pc, #712]	@ (8006c2c <Control+0x2e4>)
 8006964:	6013      	str	r3, [r2, #0]
	mpu_dmp_get_data(&pitch,&roll,&yaw);
 8006966:	4ab2      	ldr	r2, [pc, #712]	@ (8006c30 <Control+0x2e8>)
 8006968:	49b2      	ldr	r1, [pc, #712]	@ (8006c34 <Control+0x2ec>)
 800696a:	48b3      	ldr	r0, [pc, #716]	@ (8006c38 <Control+0x2f0>)
 800696c:	f7fe f934 	bl	8004bd8 <mpu_dmp_get_data>
	MPU_Get_Gyroscope(&gyrox,&gyroy,&gyroz);
 8006970:	4ab2      	ldr	r2, [pc, #712]	@ (8006c3c <Control+0x2f4>)
 8006972:	49b3      	ldr	r1, [pc, #716]	@ (8006c40 <Control+0x2f8>)
 8006974:	48b3      	ldr	r0, [pc, #716]	@ (8006c44 <Control+0x2fc>)
 8006976:	f7ff fc06 	bl	8006186 <MPU_Get_Gyroscope>
	MPU_Get_Accelerometer(&aacx,&aacy,&aacz);
 800697a:	4ab3      	ldr	r2, [pc, #716]	@ (8006c48 <Control+0x300>)
 800697c:	49b3      	ldr	r1, [pc, #716]	@ (8006c4c <Control+0x304>)
 800697e:	48b4      	ldr	r0, [pc, #720]	@ (8006c50 <Control+0x308>)
 8006980:	f7ff fc33 	bl	80061ea <MPU_Get_Accelerometer>


	// 遥控逻辑
if(is_bluetooth_connected == 1 && mode == 1){
 8006984:	4bb3      	ldr	r3, [pc, #716]	@ (8006c54 <Control+0x30c>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	f040 81c7 	bne.w	8006d1c <Control+0x3d4>
 800698e:	4bb2      	ldr	r3, [pc, #712]	@ (8006c58 <Control+0x310>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b01      	cmp	r3, #1
 8006994:	f040 81c2 	bne.w	8006d1c <Control+0x3d4>
	if(Fore == 1 && Back == 0) {  // 用户请求前进
 8006998:	4bb0      	ldr	r3, [pc, #704]	@ (8006c5c <Control+0x314>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d148      	bne.n	8006a32 <Control+0xea>
 80069a0:	4baf      	ldr	r3, [pc, #700]	@ (8006c60 <Control+0x318>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d144      	bne.n	8006a32 <Control+0xea>
	    if(distance > targetDistance) {
 80069a8:	4bae      	ldr	r3, [pc, #696]	@ (8006c64 <Control+0x31c>)
 80069aa:	ed93 7a00 	vldr	s14, [r3]
 80069ae:	4bae      	ldr	r3, [pc, #696]	@ (8006c68 <Control+0x320>)
 80069b0:	edd3 7a00 	vldr	s15, [r3]
 80069b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069bc:	dd11      	ble.n	80069e2 <Control+0x9a>
	        // 距离大于安全距离，允许正常加速前进
	        currentState = STATE_NORMAL;
 80069be:	4bab      	ldr	r3, [pc, #684]	@ (8006c6c <Control+0x324>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	701a      	strb	r2, [r3, #0]
	        Target_Speed += acceleration;  // 与手动减速对称
 80069c4:	4baa      	ldr	r3, [pc, #680]	@ (8006c70 <Control+0x328>)
 80069c6:	ed93 7a00 	vldr	s14, [r3]
 80069ca:	4baa      	ldr	r3, [pc, #680]	@ (8006c74 <Control+0x32c>)
 80069cc:	edd3 7a00 	vldr	s15, [r3]
 80069d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069d4:	4ba6      	ldr	r3, [pc, #664]	@ (8006c70 <Control+0x328>)
 80069d6:	edc3 7a00 	vstr	s15, [r3]
	        userForwardBlocked = false;
 80069da:	4ba7      	ldr	r3, [pc, #668]	@ (8006c78 <Control+0x330>)
 80069dc:	2200      	movs	r2, #0
 80069de:	701a      	strb	r2, [r3, #0]
	    if(distance > targetDistance) {
 80069e0:	e080      	b.n	8006ae4 <Control+0x19c>
	    }
	    else if(distance > minApproachDistance) {
 80069e2:	4ba0      	ldr	r3, [pc, #640]	@ (8006c64 <Control+0x31c>)
 80069e4:	ed93 7a00 	vldr	s14, [r3]
 80069e8:	4ba4      	ldr	r3, [pc, #656]	@ (8006c7c <Control+0x334>)
 80069ea:	edd3 7a00 	vldr	s15, [r3]
 80069ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f6:	dd15      	ble.n	8006a24 <Control+0xdc>
	        // 接近障碍物，允许缓慢前进
	        currentState = STATE_APPROACHING;
 80069f8:	4b9c      	ldr	r3, [pc, #624]	@ (8006c6c <Control+0x324>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
	        Target_Speed += acceleration / 2;  // 半速前进
 80069fe:	4b9d      	ldr	r3, [pc, #628]	@ (8006c74 <Control+0x32c>)
 8006a00:	edd3 7a00 	vldr	s15, [r3]
 8006a04:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006a08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006a0c:	4b98      	ldr	r3, [pc, #608]	@ (8006c70 <Control+0x328>)
 8006a0e:	edd3 7a00 	vldr	s15, [r3]
 8006a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a16:	4b96      	ldr	r3, [pc, #600]	@ (8006c70 <Control+0x328>)
 8006a18:	edc3 7a00 	vstr	s15, [r3]
	        userForwardBlocked = false;
 8006a1c:	4b96      	ldr	r3, [pc, #600]	@ (8006c78 <Control+0x330>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
	    if(distance > targetDistance) {
 8006a22:	e05f      	b.n	8006ae4 <Control+0x19c>
	    }
	    else {
	        // 距离过近，阻止前进并开始后退
	        currentState = STATE_MAINTAIN_DISTANCE;
 8006a24:	4b91      	ldr	r3, [pc, #580]	@ (8006c6c <Control+0x324>)
 8006a26:	2202      	movs	r2, #2
 8006a28:	701a      	strb	r2, [r3, #0]
	        userForwardBlocked = true;
 8006a2a:	4b93      	ldr	r3, [pc, #588]	@ (8006c78 <Control+0x330>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	701a      	strb	r2, [r3, #0]
	    if(distance > targetDistance) {
 8006a30:	e058      	b.n	8006ae4 <Control+0x19c>
	    }
	}
	else if(Back == 1 && Fore == 0) {  // 用户请求后退
 8006a32:	4b8b      	ldr	r3, [pc, #556]	@ (8006c60 <Control+0x318>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d115      	bne.n	8006a66 <Control+0x11e>
 8006a3a:	4b88      	ldr	r3, [pc, #544]	@ (8006c5c <Control+0x314>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d111      	bne.n	8006a66 <Control+0x11e>
	    currentState = STATE_MANUAL_BACKING;
 8006a42:	4b8a      	ldr	r3, [pc, #552]	@ (8006c6c <Control+0x324>)
 8006a44:	2203      	movs	r2, #3
 8006a46:	701a      	strb	r2, [r3, #0]
	    Target_Speed -= acceleration;  // 与前进加速度对称
 8006a48:	4b89      	ldr	r3, [pc, #548]	@ (8006c70 <Control+0x328>)
 8006a4a:	ed93 7a00 	vldr	s14, [r3]
 8006a4e:	4b89      	ldr	r3, [pc, #548]	@ (8006c74 <Control+0x32c>)
 8006a50:	edd3 7a00 	vldr	s15, [r3]
 8006a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a58:	4b85      	ldr	r3, [pc, #532]	@ (8006c70 <Control+0x328>)
 8006a5a:	edc3 7a00 	vstr	s15, [r3]
	    userForwardBlocked = false;
 8006a5e:	4b86      	ldr	r3, [pc, #536]	@ (8006c78 <Control+0x330>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	e03e      	b.n	8006ae4 <Control+0x19c>
	}
	else {  // 无操作，平滑减速
	    if(Target_Speed > 0) {
 8006a66:	4b82      	ldr	r3, [pc, #520]	@ (8006c70 <Control+0x328>)
 8006a68:	edd3 7a00 	vldr	s15, [r3]
 8006a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a74:	dd17      	ble.n	8006aa6 <Control+0x15e>
	        Target_Speed -= acceleration;  // 正向减速与加速对称
 8006a76:	4b7e      	ldr	r3, [pc, #504]	@ (8006c70 <Control+0x328>)
 8006a78:	ed93 7a00 	vldr	s14, [r3]
 8006a7c:	4b7d      	ldr	r3, [pc, #500]	@ (8006c74 <Control+0x32c>)
 8006a7e:	edd3 7a00 	vldr	s15, [r3]
 8006a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a86:	4b7a      	ldr	r3, [pc, #488]	@ (8006c70 <Control+0x328>)
 8006a88:	edc3 7a00 	vstr	s15, [r3]
	        if(Target_Speed < 0) Target_Speed = 0;
 8006a8c:	4b78      	ldr	r3, [pc, #480]	@ (8006c70 <Control+0x328>)
 8006a8e:	edd3 7a00 	vldr	s15, [r3]
 8006a92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a9a:	d523      	bpl.n	8006ae4 <Control+0x19c>
 8006a9c:	4b74      	ldr	r3, [pc, #464]	@ (8006c70 <Control+0x328>)
 8006a9e:	f04f 0200 	mov.w	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e01e      	b.n	8006ae4 <Control+0x19c>
	    }
	    else if(Target_Speed < 0) {
 8006aa6:	4b72      	ldr	r3, [pc, #456]	@ (8006c70 <Control+0x328>)
 8006aa8:	edd3 7a00 	vldr	s15, [r3]
 8006aac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab4:	d516      	bpl.n	8006ae4 <Control+0x19c>
	        Target_Speed += acceleration;  // 负向减速与加速对称
 8006ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8006c70 <Control+0x328>)
 8006ab8:	ed93 7a00 	vldr	s14, [r3]
 8006abc:	4b6d      	ldr	r3, [pc, #436]	@ (8006c74 <Control+0x32c>)
 8006abe:	edd3 7a00 	vldr	s15, [r3]
 8006ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8006c70 <Control+0x328>)
 8006ac8:	edc3 7a00 	vstr	s15, [r3]
	        if(Target_Speed > 0) Target_Speed = 0;
 8006acc:	4b68      	ldr	r3, [pc, #416]	@ (8006c70 <Control+0x328>)
 8006ace:	edd3 7a00 	vldr	s15, [r3]
 8006ad2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ada:	dd03      	ble.n	8006ae4 <Control+0x19c>
 8006adc:	4b64      	ldr	r3, [pc, #400]	@ (8006c70 <Control+0x328>)
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
	    }
	}

	// 障碍物自动响应逻辑（独立于用户输入）
	if(distance < emergencyDistance) {
 8006ae4:	4b5f      	ldr	r3, [pc, #380]	@ (8006c64 <Control+0x31c>)
 8006ae6:	ed93 7a00 	vldr	s14, [r3]
 8006aea:	4b65      	ldr	r3, [pc, #404]	@ (8006c80 <Control+0x338>)
 8006aec:	edd3 7a00 	vldr	s15, [r3]
 8006af0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af8:	d513      	bpl.n	8006b22 <Control+0x1da>
	    // 紧急情况：距离过近，快速后退
	    currentState = STATE_MAINTAIN_DISTANCE;
 8006afa:	4b5c      	ldr	r3, [pc, #368]	@ (8006c6c <Control+0x324>)
 8006afc:	2202      	movs	r2, #2
 8006afe:	701a      	strb	r2, [r3, #0]
	    Target_Speed -= acceleration * 2;  // 双倍减速度
 8006b00:	4b5b      	ldr	r3, [pc, #364]	@ (8006c70 <Control+0x328>)
 8006b02:	ed93 7a00 	vldr	s14, [r3]
 8006b06:	4b5b      	ldr	r3, [pc, #364]	@ (8006c74 <Control+0x32c>)
 8006b08:	edd3 7a00 	vldr	s15, [r3]
 8006b0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b14:	4b56      	ldr	r3, [pc, #344]	@ (8006c70 <Control+0x328>)
 8006b16:	edc3 7a00 	vstr	s15, [r3]
	    userForwardBlocked = true;
 8006b1a:	4b57      	ldr	r3, [pc, #348]	@ (8006c78 <Control+0x330>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	e05f      	b.n	8006be2 <Control+0x29a>
	}
	else if(distance < targetDistance) {
 8006b22:	4b50      	ldr	r3, [pc, #320]	@ (8006c64 <Control+0x31c>)
 8006b24:	ed93 7a00 	vldr	s14, [r3]
 8006b28:	4b4f      	ldr	r3, [pc, #316]	@ (8006c68 <Control+0x320>)
 8006b2a:	edd3 7a00 	vldr	s15, [r3]
 8006b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b36:	d53e      	bpl.n	8006bb6 <Control+0x26e>
	    // 距离小于安全距离，自动调整以保持距离
	    currentState = STATE_MAINTAIN_DISTANCE;
 8006b38:	4b4c      	ldr	r3, [pc, #304]	@ (8006c6c <Control+0x324>)
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	701a      	strb	r2, [r3, #0]

	    // 计算与目标距离的差值，动态调整后退速度
	    if(Target_Speed > -0.03) {  // 限制最大后退速度
 8006b3e:	4b4c      	ldr	r3, [pc, #304]	@ (8006c70 <Control+0x328>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7f9 fd08 	bl	8000558 <__aeabi_f2d>
 8006b48:	a333      	add	r3, pc, #204	@ (adr r3, 8006c18 <Control+0x2d0>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f7f9 ffeb 	bl	8000b28 <__aeabi_dcmpgt>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01c      	beq.n	8006b92 <Control+0x24a>
	        Target_Speed -= acceleration * (1 + (targetDistance - distance)/30);
 8006b58:	4b45      	ldr	r3, [pc, #276]	@ (8006c70 <Control+0x328>)
 8006b5a:	ed93 7a00 	vldr	s14, [r3]
 8006b5e:	4b42      	ldr	r3, [pc, #264]	@ (8006c68 <Control+0x320>)
 8006b60:	edd3 6a00 	vldr	s13, [r3]
 8006b64:	4b3f      	ldr	r3, [pc, #252]	@ (8006c64 <Control+0x31c>)
 8006b66:	edd3 7a00 	vldr	s15, [r3]
 8006b6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006b6e:	eeb3 6a0e 	vmov.f32	s12, #62	@ 0x41f00000  30.0
 8006b72:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b7a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8006b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c74 <Control+0x32c>)
 8006b80:	edd3 7a00 	vldr	s15, [r3]
 8006b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b8c:	4b38      	ldr	r3, [pc, #224]	@ (8006c70 <Control+0x328>)
 8006b8e:	edc3 7a00 	vstr	s15, [r3]
	    }

	    // 确保用户无法在距离过近时前进
	    userForwardBlocked = (distance < minApproachDistance);
 8006b92:	4b34      	ldr	r3, [pc, #208]	@ (8006c64 <Control+0x31c>)
 8006b94:	ed93 7a00 	vldr	s14, [r3]
 8006b98:	4b38      	ldr	r3, [pc, #224]	@ (8006c7c <Control+0x334>)
 8006b9a:	edd3 7a00 	vldr	s15, [r3]
 8006b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba6:	bf4c      	ite	mi
 8006ba8:	2301      	movmi	r3, #1
 8006baa:	2300      	movpl	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4b31      	ldr	r3, [pc, #196]	@ (8006c78 <Control+0x330>)
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	e015      	b.n	8006be2 <Control+0x29a>
	}
	else if(currentState == STATE_MAINTAIN_DISTANCE && distance > targetDistance + 5) {
 8006bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8006c6c <Control+0x324>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d111      	bne.n	8006be2 <Control+0x29a>
 8006bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006c68 <Control+0x320>)
 8006bc0:	edd3 7a00 	vldr	s15, [r3]
 8006bc4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8006bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bcc:	4b25      	ldr	r3, [pc, #148]	@ (8006c64 <Control+0x31c>)
 8006bce:	edd3 7a00 	vldr	s15, [r3]
 8006bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bda:	d502      	bpl.n	8006be2 <Control+0x29a>
	    // 已远离障碍物，恢复正常状态
	    currentState = STATE_NORMAL;
 8006bdc:	4b23      	ldr	r3, [pc, #140]	@ (8006c6c <Control+0x324>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	701a      	strb	r2, [r3, #0]
	}

	// 速度限幅
	Target_Speed = Target_Speed > SPEED_Y ? SPEED_Y : (Target_Speed < -SPEED_Y ? -SPEED_Y : Target_Speed);
 8006be2:	4b23      	ldr	r3, [pc, #140]	@ (8006c70 <Control+0x328>)
 8006be4:	edd3 7a00 	vldr	s15, [r3]
 8006be8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8006bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf4:	dd01      	ble.n	8006bfa <Control+0x2b2>
 8006bf6:	4b23      	ldr	r3, [pc, #140]	@ (8006c84 <Control+0x33c>)
 8006bf8:	e04a      	b.n	8006c90 <Control+0x348>
 8006bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8006c70 <Control+0x328>)
 8006bfc:	edd3 7a00 	vldr	s15, [r3]
 8006c00:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8006c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c0c:	d53e      	bpl.n	8006c8c <Control+0x344>
 8006c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006c88 <Control+0x340>)
 8006c10:	e03e      	b.n	8006c90 <Control+0x348>
 8006c12:	bf00      	nop
 8006c14:	f3af 8000 	nop.w
 8006c18:	eb851eb8 	.word	0xeb851eb8
 8006c1c:	bf9eb851 	.word	0xbf9eb851
 8006c20:	200004fc 	.word	0x200004fc
 8006c24:	20000620 	.word	0x20000620
 8006c28:	2000046c 	.word	0x2000046c
 8006c2c:	2000061c 	.word	0x2000061c
 8006c30:	2000063c 	.word	0x2000063c
 8006c34:	20000634 	.word	0x20000634
 8006c38:	20000638 	.word	0x20000638
 8006c3c:	20000644 	.word	0x20000644
 8006c40:	20000642 	.word	0x20000642
 8006c44:	20000640 	.word	0x20000640
 8006c48:	2000064a 	.word	0x2000064a
 8006c4c:	20000648 	.word	0x20000648
 8006c50:	20000646 	.word	0x20000646
 8006c54:	2000041f 	.word	0x2000041f
 8006c58:	200002f4 	.word	0x200002f4
 8006c5c:	2000041b 	.word	0x2000041b
 8006c60:	2000041c 	.word	0x2000041c
 8006c64:	200003c8 	.word	0x200003c8
 8006c68:	20000074 	.word	0x20000074
 8006c6c:	20000a4d 	.word	0x20000a4d
 8006c70:	20000a6c 	.word	0x20000a6c
 8006c74:	20000080 	.word	0x20000080
 8006c78:	20000a4e 	.word	0x20000a4e
 8006c7c:	20000078 	.word	0x20000078
 8006c80:	2000007c 	.word	0x2000007c
 8006c84:	40a00000 	.word	0x40a00000
 8006c88:	c0a00000 	.word	0xc0a00000
 8006c8c:	4b67      	ldr	r3, [pc, #412]	@ (8006e2c <Control+0x4e4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a66      	ldr	r2, [pc, #408]	@ (8006e2c <Control+0x4e4>)
 8006c92:	6013      	str	r3, [r2, #0]

		/*左右*/
		if((Left==0)&&(Right==0))Target_turn=0;
 8006c94:	4b66      	ldr	r3, [pc, #408]	@ (8006e30 <Control+0x4e8>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d106      	bne.n	8006caa <Control+0x362>
 8006c9c:	4b65      	ldr	r3, [pc, #404]	@ (8006e34 <Control+0x4ec>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <Control+0x362>
 8006ca4:	4b64      	ldr	r3, [pc, #400]	@ (8006e38 <Control+0x4f0>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]
		if(Left==1)Target_turn+=30;	//左转
 8006caa:	4b61      	ldr	r3, [pc, #388]	@ (8006e30 <Control+0x4e8>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d104      	bne.n	8006cbc <Control+0x374>
 8006cb2:	4b61      	ldr	r3, [pc, #388]	@ (8006e38 <Control+0x4f0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	331e      	adds	r3, #30
 8006cb8:	4a5f      	ldr	r2, [pc, #380]	@ (8006e38 <Control+0x4f0>)
 8006cba:	6013      	str	r3, [r2, #0]
		if(Right==1)Target_turn-=30;	//右转
 8006cbc:	4b5d      	ldr	r3, [pc, #372]	@ (8006e34 <Control+0x4ec>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d104      	bne.n	8006cce <Control+0x386>
 8006cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8006e38 <Control+0x4f0>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3b1e      	subs	r3, #30
 8006cca:	4a5b      	ldr	r2, [pc, #364]	@ (8006e38 <Control+0x4f0>)
 8006ccc:	6013      	str	r3, [r2, #0]
		Target_turn=Target_turn>SPEED_Z?SPEED_Z:(Target_turn<-SPEED_Z?(-SPEED_Z):Target_turn);//限幅( (20*100) * 100   )
 8006cce:	4b5a      	ldr	r3, [pc, #360]	@ (8006e38 <Control+0x4f0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b96      	cmp	r3, #150	@ 0x96
 8006cd4:	dc07      	bgt.n	8006ce6 <Control+0x39e>
 8006cd6:	4b58      	ldr	r3, [pc, #352]	@ (8006e38 <Control+0x4f0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f06f 0295 	mvn.w	r2, #149	@ 0x95
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	bfb8      	it	lt
 8006ce2:	4613      	movlt	r3, r2
 8006ce4:	e000      	b.n	8006ce8 <Control+0x3a0>
 8006ce6:	2396      	movs	r3, #150	@ 0x96
 8006ce8:	4a53      	ldr	r2, [pc, #332]	@ (8006e38 <Control+0x4f0>)
 8006cea:	6013      	str	r3, [r2, #0]

		/*转向约束*/
		if((Left==0)&&(Right==0))Turn_Kd=-4;//若无左右转向指令，则开启转向约束
 8006cec:	4b50      	ldr	r3, [pc, #320]	@ (8006e30 <Control+0x4e8>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d107      	bne.n	8006d04 <Control+0x3bc>
 8006cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8006e34 <Control+0x4ec>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d103      	bne.n	8006d04 <Control+0x3bc>
 8006cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8006e3c <Control+0x4f4>)
 8006cfe:	4a50      	ldr	r2, [pc, #320]	@ (8006e40 <Control+0x4f8>)
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	e00b      	b.n	8006d1c <Control+0x3d4>
		else if((Left==1)||(Right==1))Turn_Kd=0;//若左右转向指令接收到，则去掉转向约束
 8006d04:	4b4a      	ldr	r3, [pc, #296]	@ (8006e30 <Control+0x4e8>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d003      	beq.n	8006d14 <Control+0x3cc>
 8006d0c:	4b49      	ldr	r3, [pc, #292]	@ (8006e34 <Control+0x4ec>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d103      	bne.n	8006d1c <Control+0x3d4>
 8006d14:	4b49      	ldr	r3, [pc, #292]	@ (8006e3c <Control+0x4f4>)
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
}
	  if(roll<-45 || roll>45){         //小车可能已经倒了
 8006d1c:	4b49      	ldr	r3, [pc, #292]	@ (8006e44 <Control+0x4fc>)
 8006d1e:	edd3 7a00 	vldr	s15, [r3]
 8006d22:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8006e48 <Control+0x500>
 8006d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d2e:	d409      	bmi.n	8006d44 <Control+0x3fc>
 8006d30:	4b44      	ldr	r3, [pc, #272]	@ (8006e44 <Control+0x4fc>)
 8006d32:	edd3 7a00 	vldr	s15, [r3]
 8006d36:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8006e4c <Control+0x504>
 8006d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d42:	dd06      	ble.n	8006d52 <Control+0x40a>
		  motor_flag = 0;               //关闭电机
 8006d44:	4b42      	ldr	r3, [pc, #264]	@ (8006e50 <Control+0x508>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
	  	  Encoder_S = 0;				//速度积分清零
 8006d4a:	4b42      	ldr	r3, [pc, #264]	@ (8006e54 <Control+0x50c>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	e002      	b.n	8006d58 <Control+0x410>
	  }else
		  motor_flag=1;              //开启电机
 8006d52:	4b3f      	ldr	r3, [pc, #252]	@ (8006e50 <Control+0x508>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
	//2、将数据传入PID控制器，计算输出结果，即左右电机转速值
	if(motor_en && motor_flag){
 8006d58:	4b3f      	ldr	r3, [pc, #252]	@ (8006e58 <Control+0x510>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d05c      	beq.n	8006e1a <Control+0x4d2>
 8006d60:	4b3b      	ldr	r3, [pc, #236]	@ (8006e50 <Control+0x508>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d058      	beq.n	8006e1a <Control+0x4d2>
		  Velocity_out=Velocity(Target_Speed,Encoder_Left,Encoder_Right);
 8006d68:	4b30      	ldr	r3, [pc, #192]	@ (8006e2c <Control+0x4e4>)
 8006d6a:	edd3 7a00 	vldr	s15, [r3]
 8006d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8006e5c <Control+0x514>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a3b      	ldr	r2, [pc, #236]	@ (8006e60 <Control+0x518>)
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d7e:	f7ff fd21 	bl	80067c4 <Velocity>
 8006d82:	4603      	mov	r3, r0
 8006d84:	4a37      	ldr	r2, [pc, #220]	@ (8006e64 <Control+0x51c>)
 8006d86:	6013      	str	r3, [r2, #0]
		  Vertical_out=Vertical(Velocity_out+Med_Angle,roll,gyrox);
 8006d88:	4b36      	ldr	r3, [pc, #216]	@ (8006e64 <Control+0x51c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	ee07 3a90 	vmov	s15, r3
 8006d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d94:	4b34      	ldr	r3, [pc, #208]	@ (8006e68 <Control+0x520>)
 8006d96:	edd3 7a00 	vldr	s15, [r3]
 8006d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d9e:	4b29      	ldr	r3, [pc, #164]	@ (8006e44 <Control+0x4fc>)
 8006da0:	ed93 7a00 	vldr	s14, [r3]
 8006da4:	4b31      	ldr	r3, [pc, #196]	@ (8006e6c <Control+0x524>)
 8006da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006daa:	ee06 3a90 	vmov	s13, r3
 8006dae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006db2:	eeb0 1a66 	vmov.f32	s2, s13
 8006db6:	eef0 0a47 	vmov.f32	s1, s14
 8006dba:	eeb0 0a67 	vmov.f32	s0, s15
 8006dbe:	f7ff fcd3 	bl	8006768 <Vertical>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8006e70 <Control+0x528>)
 8006dc6:	6013      	str	r3, [r2, #0]
		  Turn_out=Turn(gyroz,Target_turn);
 8006dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8006e74 <Control+0x52c>)
 8006dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dd6:	4b18      	ldr	r3, [pc, #96]	@ (8006e38 <Control+0x4f0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8006de0:	f7ff fd88 	bl	80068f4 <Turn>
 8006de4:	4603      	mov	r3, r0
 8006de6:	4a24      	ldr	r2, [pc, #144]	@ (8006e78 <Control+0x530>)
 8006de8:	6013      	str	r3, [r2, #0]
		  PWM_out=Vertical_out;
 8006dea:	4b21      	ldr	r3, [pc, #132]	@ (8006e70 <Control+0x528>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	607b      	str	r3, [r7, #4]
		  MOTO1=PWM_out-Turn_out;
 8006df0:	4b21      	ldr	r3, [pc, #132]	@ (8006e78 <Control+0x530>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	4a20      	ldr	r2, [pc, #128]	@ (8006e7c <Control+0x534>)
 8006dfa:	6013      	str	r3, [r2, #0]
		  MOTO2=PWM_out+Turn_out;
 8006dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8006e78 <Control+0x530>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4413      	add	r3, r2
 8006e04:	4a1e      	ldr	r2, [pc, #120]	@ (8006e80 <Control+0x538>)
 8006e06:	6013      	str	r3, [r2, #0]
		  Load(MOTO1,MOTO2);
 8006e08:	4b1c      	ldr	r3, [pc, #112]	@ (8006e7c <Control+0x534>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006e80 <Control+0x538>)
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	4611      	mov	r1, r2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fb fc46 	bl	80026a4 <Load>
 8006e18:	e004      	b.n	8006e24 <Control+0x4dc>
	}

	else{
		Load(0, 0);
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	f7fb fc41 	bl	80026a4 <Load>
	}
}
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000a6c 	.word	0x20000a6c
 8006e30:	2000041d 	.word	0x2000041d
 8006e34:	2000041e 	.word	0x2000041e
 8006e38:	20000a60 	.word	0x20000a60
 8006e3c:	20000014 	.word	0x20000014
 8006e40:	c0800000 	.word	0xc0800000
 8006e44:	20000634 	.word	0x20000634
 8006e48:	c2340000 	.word	0xc2340000
 8006e4c:	42340000 	.word	0x42340000
 8006e50:	20000a50 	.word	0x20000a50
 8006e54:	20000a78 	.word	0x20000a78
 8006e58:	20000000 	.word	0x20000000
 8006e5c:	2000061c 	.word	0x2000061c
 8006e60:	20000620 	.word	0x20000620
 8006e64:	20000a58 	.word	0x20000a58
 8006e68:	20000084 	.word	0x20000084
 8006e6c:	20000640 	.word	0x20000640
 8006e70:	20000a54 	.word	0x20000a54
 8006e74:	20000644 	.word	0x20000644
 8006e78:	20000a5c 	.word	0x20000a5c
 8006e7c:	20000a64 	.word	0x20000a64
 8006e80:	20000a68 	.word	0x20000a68

08006e84 <GET_Distance>:
#include "sr04.h"


void GET_Distance(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8006e88:	2201      	movs	r2, #1
 8006e8a:	2108      	movs	r1, #8
 8006e8c:	4806      	ldr	r0, [pc, #24]	@ (8006ea8 <GET_Distance+0x24>)
 8006e8e:	f001 fbf3 	bl	8008678 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006e92:	2001      	movs	r0, #1
 8006e94:	f000 f84c 	bl	8006f30 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2108      	movs	r1, #8
 8006e9c:	4802      	ldr	r0, [pc, #8]	@ (8006ea8 <GET_Distance+0x24>)
 8006e9e:	f001 fbeb 	bl	8008678 <HAL_GPIO_WritePin>
}
 8006ea2:	bf00      	nop
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40020800 	.word	0x40020800

08006eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8006eec <HAL_Init+0x40>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8006eec <HAL_Init+0x40>)
 8006eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8006eec <HAL_Init+0x40>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8006eec <HAL_Init+0x40>)
 8006ec2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ec8:	4b08      	ldr	r3, [pc, #32]	@ (8006eec <HAL_Init+0x40>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a07      	ldr	r2, [pc, #28]	@ (8006eec <HAL_Init+0x40>)
 8006ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ed4:	2003      	movs	r0, #3
 8006ed6:	f000 fde2 	bl	8007a9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006eda:	200f      	movs	r0, #15
 8006edc:	f7fa fda6 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ee0:	f7fa fd78 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	40023c00 	.word	0x40023c00

08006ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ef4:	4b06      	ldr	r3, [pc, #24]	@ (8006f10 <HAL_IncTick+0x20>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4b06      	ldr	r3, [pc, #24]	@ (8006f14 <HAL_IncTick+0x24>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4413      	add	r3, r2
 8006f00:	4a04      	ldr	r2, [pc, #16]	@ (8006f14 <HAL_IncTick+0x24>)
 8006f02:	6013      	str	r3, [r2, #0]
}
 8006f04:	bf00      	nop
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20000090 	.word	0x20000090
 8006f14:	20000a7c 	.word	0x20000a7c

08006f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8006f1c:	4b03      	ldr	r3, [pc, #12]	@ (8006f2c <HAL_GetTick+0x14>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	20000a7c 	.word	0x20000a7c

08006f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f38:	f7ff ffee 	bl	8006f18 <HAL_GetTick>
 8006f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f48:	d005      	beq.n	8006f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f74 <HAL_Delay+0x44>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f56:	bf00      	nop
 8006f58:	f7ff ffde 	bl	8006f18 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d8f7      	bhi.n	8006f58 <HAL_Delay+0x28>
  {
  }
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20000090 	.word	0x20000090

08006f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e033      	b.n	8006ff6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fa f8ce 	bl	8001138 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fae:	f003 0310 	and.w	r3, r3, #16
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d118      	bne.n	8006fe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006fbe:	f023 0302 	bic.w	r3, r3, #2
 8006fc2:	f043 0202 	orr.w	r2, r3, #2
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fbb4 	bl	8007738 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fda:	f023 0303 	bic.w	r3, r3, #3
 8006fde:	f043 0201 	orr.w	r2, r3, #1
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	641a      	str	r2, [r3, #64]	@ 0x40
 8006fe6:	e001      	b.n	8006fec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <HAL_ADC_Start+0x1a>
 8007016:	2302      	movs	r3, #2
 8007018:	e097      	b.n	800714a <HAL_ADC_Start+0x14a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d018      	beq.n	8007062 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0201 	orr.w	r2, r2, #1
 800703e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007040:	4b45      	ldr	r3, [pc, #276]	@ (8007158 <HAL_ADC_Start+0x158>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a45      	ldr	r2, [pc, #276]	@ (800715c <HAL_ADC_Start+0x15c>)
 8007046:	fba2 2303 	umull	r2, r3, r2, r3
 800704a:	0c9a      	lsrs	r2, r3, #18
 800704c:	4613      	mov	r3, r2
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	4413      	add	r3, r2
 8007052:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8007054:	e002      	b.n	800705c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	3b01      	subs	r3, #1
 800705a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f9      	bne.n	8007056 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b01      	cmp	r3, #1
 800706e:	d15f      	bne.n	8007130 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007074:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007078:	f023 0301 	bic.w	r3, r3, #1
 800707c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007096:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800709a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ae:	d106      	bne.n	80070be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b4:	f023 0206 	bic.w	r2, r3, #6
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80070bc:	e002      	b.n	80070c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80070cc:	4b24      	ldr	r3, [pc, #144]	@ (8007160 <HAL_ADC_Start+0x160>)
 80070ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80070d8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10f      	bne.n	8007106 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d129      	bne.n	8007148 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007102:	609a      	str	r2, [r3, #8]
 8007104:	e020      	b.n	8007148 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a16      	ldr	r2, [pc, #88]	@ (8007164 <HAL_ADC_Start+0x164>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d11b      	bne.n	8007148 <HAL_ADC_Start+0x148>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d114      	bne.n	8007148 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800712c:	609a      	str	r2, [r3, #8]
 800712e:	e00b      	b.n	8007148 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007134:	f043 0210 	orr.w	r2, r3, #16
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007140:	f043 0201 	orr.w	r2, r3, #1
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20000018 	.word	0x20000018
 800715c:	431bde83 	.word	0x431bde83
 8007160:	40012300 	.word	0x40012300
 8007164:	40012000 	.word	0x40012000

08007168 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007184:	d113      	bne.n	80071ae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007194:	d10b      	bne.n	80071ae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719a:	f043 0220 	orr.w	r2, r3, #32
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e063      	b.n	8007276 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80071ae:	f7ff feb3 	bl	8006f18 <HAL_GetTick>
 80071b2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80071b4:	e021      	b.n	80071fa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071bc:	d01d      	beq.n	80071fa <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d007      	beq.n	80071d4 <HAL_ADC_PollForConversion+0x6c>
 80071c4:	f7ff fea8 	bl	8006f18 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d212      	bcs.n	80071fa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d00b      	beq.n	80071fa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	f043 0204 	orr.w	r2, r3, #4
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e03d      	b.n	8007276 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b02      	cmp	r3, #2
 8007206:	d1d6      	bne.n	80071b6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0212 	mvn.w	r2, #18
 8007210:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007216:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d123      	bne.n	8007274 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007230:	2b00      	cmp	r3, #0
 8007232:	d11f      	bne.n	8007274 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800723e:	2b00      	cmp	r3, #0
 8007240:	d006      	beq.n	8007250 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800724c:	2b00      	cmp	r3, #0
 800724e:	d111      	bne.n	8007274 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d105      	bne.n	8007274 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726c:	f043 0201 	orr.w	r2, r3, #1
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b086      	sub	sp, #24
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	617b      	str	r3, [r7, #20]
 800728a:	2300      	movs	r3, #0
 800728c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d049      	beq.n	8007348 <HAL_ADC_IRQHandler+0xca>
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d046      	beq.n	8007348 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072be:	f003 0310 	and.w	r3, r3, #16
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d105      	bne.n	80072d2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d12b      	bne.n	8007338 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d127      	bne.n	8007338 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d006      	beq.n	8007304 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007300:	2b00      	cmp	r3, #0
 8007302:	d119      	bne.n	8007338 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0220 	bic.w	r2, r2, #32
 8007312:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007318:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007324:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d105      	bne.n	8007338 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007330:	f043 0201 	orr.w	r2, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f8bd 	bl	80074b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f06f 0212 	mvn.w	r2, #18
 8007346:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f003 0304 	and.w	r3, r3, #4
 800734e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007356:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d057      	beq.n	800740e <HAL_ADC_IRQHandler+0x190>
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d054      	beq.n	800740e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007368:	f003 0310 	and.w	r3, r3, #16
 800736c:	2b00      	cmp	r3, #0
 800736e:	d105      	bne.n	800737c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007374:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d139      	bne.n	80073fe <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007390:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007394:	2b00      	cmp	r3, #0
 8007396:	d006      	beq.n	80073a6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d12b      	bne.n	80073fe <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d124      	bne.n	80073fe <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d11d      	bne.n	80073fe <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d119      	bne.n	80073fe <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073d8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d105      	bne.n	80073fe <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f6:	f043 0201 	orr.w	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa96 	bl	8007930 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f06f 020c 	mvn.w	r2, #12
 800740c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d017      	beq.n	8007454 <HAL_ADC_IRQHandler+0x1d6>
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d014      	beq.n	8007454 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b01      	cmp	r3, #1
 8007436:	d10d      	bne.n	8007454 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f841 	bl	80074cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f06f 0201 	mvn.w	r2, #1
 8007452:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007462:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d015      	beq.n	8007496 <HAL_ADC_IRQHandler+0x218>
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d012      	beq.n	8007496 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007474:	f043 0202 	orr.w	r2, r3, #2
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0220 	mvn.w	r2, #32
 8007484:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f82a 	bl	80074e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0220 	mvn.w	r2, #32
 8007494:	601a      	str	r2, [r3, #0]
  }
}
 8007496:	bf00      	nop
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_ADC_ConfigChannel+0x1c>
 800750c:	2302      	movs	r3, #2
 800750e:	e105      	b.n	800771c <HAL_ADC_ConfigChannel+0x228>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b09      	cmp	r3, #9
 800751e:	d925      	bls.n	800756c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68d9      	ldr	r1, [r3, #12]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	461a      	mov	r2, r3
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	3b1e      	subs	r3, #30
 8007536:	2207      	movs	r2, #7
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	43da      	mvns	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	400a      	ands	r2, r1
 8007544:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68d9      	ldr	r1, [r3, #12]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	4618      	mov	r0, r3
 8007558:	4603      	mov	r3, r0
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	4403      	add	r3, r0
 800755e:	3b1e      	subs	r3, #30
 8007560:	409a      	lsls	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	60da      	str	r2, [r3, #12]
 800756a:	e022      	b.n	80075b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6919      	ldr	r1, [r3, #16]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	4613      	mov	r3, r2
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	4413      	add	r3, r2
 8007580:	2207      	movs	r2, #7
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43da      	mvns	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	400a      	ands	r2, r1
 800758e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6919      	ldr	r1, [r3, #16]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	4618      	mov	r0, r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4403      	add	r3, r0
 80075a8:	409a      	lsls	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2b06      	cmp	r3, #6
 80075b8:	d824      	bhi.n	8007604 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	3b05      	subs	r3, #5
 80075cc:	221f      	movs	r2, #31
 80075ce:	fa02 f303 	lsl.w	r3, r2, r3
 80075d2:	43da      	mvns	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	400a      	ands	r2, r1
 80075da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	4618      	mov	r0, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	3b05      	subs	r3, #5
 80075f6:	fa00 f203 	lsl.w	r2, r0, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	635a      	str	r2, [r3, #52]	@ 0x34
 8007602:	e04c      	b.n	800769e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2b0c      	cmp	r3, #12
 800760a:	d824      	bhi.n	8007656 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	3b23      	subs	r3, #35	@ 0x23
 800761e:	221f      	movs	r2, #31
 8007620:	fa02 f303 	lsl.w	r3, r2, r3
 8007624:	43da      	mvns	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	400a      	ands	r2, r1
 800762c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	b29b      	uxth	r3, r3
 800763a:	4618      	mov	r0, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	4613      	mov	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	3b23      	subs	r3, #35	@ 0x23
 8007648:	fa00 f203 	lsl.w	r2, r0, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	631a      	str	r2, [r3, #48]	@ 0x30
 8007654:	e023      	b.n	800769e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	3b41      	subs	r3, #65	@ 0x41
 8007668:	221f      	movs	r2, #31
 800766a:	fa02 f303 	lsl.w	r3, r2, r3
 800766e:	43da      	mvns	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	400a      	ands	r2, r1
 8007676:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	b29b      	uxth	r3, r3
 8007684:	4618      	mov	r0, r3
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	3b41      	subs	r3, #65	@ 0x41
 8007692:	fa00 f203 	lsl.w	r2, r0, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800769e:	4b22      	ldr	r3, [pc, #136]	@ (8007728 <HAL_ADC_ConfigChannel+0x234>)
 80076a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a21      	ldr	r2, [pc, #132]	@ (800772c <HAL_ADC_ConfigChannel+0x238>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d109      	bne.n	80076c0 <HAL_ADC_ConfigChannel+0x1cc>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b12      	cmp	r3, #18
 80076b2:	d105      	bne.n	80076c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a19      	ldr	r2, [pc, #100]	@ (800772c <HAL_ADC_ConfigChannel+0x238>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d123      	bne.n	8007712 <HAL_ADC_ConfigChannel+0x21e>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b10      	cmp	r3, #16
 80076d0:	d003      	beq.n	80076da <HAL_ADC_ConfigChannel+0x1e6>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b11      	cmp	r3, #17
 80076d8:	d11b      	bne.n	8007712 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b10      	cmp	r3, #16
 80076ec:	d111      	bne.n	8007712 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80076ee:	4b10      	ldr	r3, [pc, #64]	@ (8007730 <HAL_ADC_ConfigChannel+0x23c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a10      	ldr	r2, [pc, #64]	@ (8007734 <HAL_ADC_ConfigChannel+0x240>)
 80076f4:	fba2 2303 	umull	r2, r3, r2, r3
 80076f8:	0c9a      	lsrs	r2, r3, #18
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007704:	e002      	b.n	800770c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	3b01      	subs	r3, #1
 800770a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f9      	bne.n	8007706 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	40012300 	.word	0x40012300
 800772c:	40012000 	.word	0x40012000
 8007730:	20000018 	.word	0x20000018
 8007734:	431bde83 	.word	0x431bde83

08007738 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007740:	4b79      	ldr	r3, [pc, #484]	@ (8007928 <ADC_Init+0x1f0>)
 8007742:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	431a      	orrs	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800776c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6859      	ldr	r1, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	021a      	lsls	r2, r3, #8
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6859      	ldr	r1, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6899      	ldr	r1, [r3, #8]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	4a58      	ldr	r2, [pc, #352]	@ (800792c <ADC_Init+0x1f4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d022      	beq.n	8007816 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80077de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6899      	ldr	r1, [r3, #8]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6899      	ldr	r1, [r3, #8]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	430a      	orrs	r2, r1
 8007812:	609a      	str	r2, [r3, #8]
 8007814:	e00f      	b.n	8007836 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689a      	ldr	r2, [r3, #8]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007834:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0202 	bic.w	r2, r2, #2
 8007844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6899      	ldr	r1, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	7e1b      	ldrb	r3, [r3, #24]
 8007850:	005a      	lsls	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d01b      	beq.n	800789c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007872:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007882:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6859      	ldr	r1, [r3, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788e:	3b01      	subs	r3, #1
 8007890:	035a      	lsls	r2, r3, #13
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	605a      	str	r2, [r3, #4]
 800789a:	e007      	b.n	80078ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80078ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	051a      	lsls	r2, r3, #20
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80078e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6899      	ldr	r1, [r3, #8]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80078ee:	025a      	lsls	r2, r3, #9
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6899      	ldr	r1, [r3, #8]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	029a      	lsls	r2, r3, #10
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	609a      	str	r2, [r3, #8]
}
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	40012300 	.word	0x40012300
 800792c:	0f000001 	.word	0x0f000001

08007930 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <__NVIC_SetPriorityGrouping>:
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007954:	4b0c      	ldr	r3, [pc, #48]	@ (8007988 <__NVIC_SetPriorityGrouping+0x44>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007960:	4013      	ands	r3, r2
 8007962:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800796c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007976:	4a04      	ldr	r2, [pc, #16]	@ (8007988 <__NVIC_SetPriorityGrouping+0x44>)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	60d3      	str	r3, [r2, #12]
}
 800797c:	bf00      	nop
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	e000ed00 	.word	0xe000ed00

0800798c <__NVIC_GetPriorityGrouping>:
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007990:	4b04      	ldr	r3, [pc, #16]	@ (80079a4 <__NVIC_GetPriorityGrouping+0x18>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	0a1b      	lsrs	r3, r3, #8
 8007996:	f003 0307 	and.w	r3, r3, #7
}
 800799a:	4618      	mov	r0, r3
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	e000ed00 	.word	0xe000ed00

080079a8 <__NVIC_EnableIRQ>:
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	db0b      	blt.n	80079d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	f003 021f 	and.w	r2, r3, #31
 80079c0:	4907      	ldr	r1, [pc, #28]	@ (80079e0 <__NVIC_EnableIRQ+0x38>)
 80079c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	2001      	movs	r0, #1
 80079ca:	fa00 f202 	lsl.w	r2, r0, r2
 80079ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	e000e100 	.word	0xe000e100

080079e4 <__NVIC_SetPriority>:
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	db0a      	blt.n	8007a0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	490c      	ldr	r1, [pc, #48]	@ (8007a30 <__NVIC_SetPriority+0x4c>)
 80079fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a02:	0112      	lsls	r2, r2, #4
 8007a04:	b2d2      	uxtb	r2, r2
 8007a06:	440b      	add	r3, r1
 8007a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007a0c:	e00a      	b.n	8007a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	4908      	ldr	r1, [pc, #32]	@ (8007a34 <__NVIC_SetPriority+0x50>)
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	3b04      	subs	r3, #4
 8007a1c:	0112      	lsls	r2, r2, #4
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	440b      	add	r3, r1
 8007a22:	761a      	strb	r2, [r3, #24]
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	e000e100 	.word	0xe000e100
 8007a34:	e000ed00 	.word	0xe000ed00

08007a38 <NVIC_EncodePriority>:
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b089      	sub	sp, #36	@ 0x24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f1c3 0307 	rsb	r3, r3, #7
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	bf28      	it	cs
 8007a56:	2304      	movcs	r3, #4
 8007a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	2b06      	cmp	r3, #6
 8007a60:	d902      	bls.n	8007a68 <NVIC_EncodePriority+0x30>
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	3b03      	subs	r3, #3
 8007a66:	e000      	b.n	8007a6a <NVIC_EncodePriority+0x32>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	43da      	mvns	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a80:	f04f 31ff 	mov.w	r1, #4294967295
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8a:	43d9      	mvns	r1, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a90:	4313      	orrs	r3, r2
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3724      	adds	r7, #36	@ 0x24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff ff4c 	bl	8007944 <__NVIC_SetPriorityGrouping>
}
 8007aac:	bf00      	nop
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ac6:	f7ff ff61 	bl	800798c <__NVIC_GetPriorityGrouping>
 8007aca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	6978      	ldr	r0, [r7, #20]
 8007ad2:	f7ff ffb1 	bl	8007a38 <NVIC_EncodePriority>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007adc:	4611      	mov	r1, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff ff80 	bl	80079e4 <__NVIC_SetPriority>
}
 8007ae4:	bf00      	nop
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff ff54 	bl	80079a8 <__NVIC_EnableIRQ>
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b14:	f7ff fa00 	bl	8006f18 <HAL_GetTick>
 8007b18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e099      	b.n	8007c58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0201 	bic.w	r2, r2, #1
 8007b42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b44:	e00f      	b.n	8007b66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b46:	f7ff f9e7 	bl	8006f18 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b05      	cmp	r3, #5
 8007b52:	d908      	bls.n	8007b66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2203      	movs	r2, #3
 8007b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e078      	b.n	8007c58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e8      	bne.n	8007b46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	4b38      	ldr	r3, [pc, #224]	@ (8007c60 <HAL_DMA_Init+0x158>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007baa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d107      	bne.n	8007bd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f023 0307 	bic.w	r3, r3, #7
 8007be6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d117      	bne.n	8007c2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00e      	beq.n	8007c2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fb1b 	bl	8008248 <DMA_CheckFifoParam>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2240      	movs	r2, #64	@ 0x40
 8007c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007c26:	2301      	movs	r3, #1
 8007c28:	e016      	b.n	8007c58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fad2 	bl	80081dc <DMA_CalcBaseAndBitshift>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c40:	223f      	movs	r2, #63	@ 0x3f
 8007c42:	409a      	lsls	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	f010803f 	.word	0xf010803f

08007c64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d101      	bne.n	8007c8a <HAL_DMA_Start_IT+0x26>
 8007c86:	2302      	movs	r3, #2
 8007c88:	e040      	b.n	8007d0c <HAL_DMA_Start_IT+0xa8>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d12f      	bne.n	8007cfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fa64 	bl	8008180 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cbc:	223f      	movs	r2, #63	@ 0x3f
 8007cbe:	409a      	lsls	r2, r3
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0216 	orr.w	r2, r2, #22
 8007cd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d007      	beq.n	8007cec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0208 	orr.w	r2, r2, #8
 8007cea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	e005      	b.n	8007d0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d06:	2302      	movs	r3, #2
 8007d08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d22:	f7ff f8f9 	bl	8006f18 <HAL_GetTick>
 8007d26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d008      	beq.n	8007d46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2280      	movs	r2, #128	@ 0x80
 8007d38:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e052      	b.n	8007dec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0216 	bic.w	r2, r2, #22
 8007d54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695a      	ldr	r2, [r3, #20]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d103      	bne.n	8007d76 <HAL_DMA_Abort+0x62>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0208 	bic.w	r2, r2, #8
 8007d84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0201 	bic.w	r2, r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d96:	e013      	b.n	8007dc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d98:	f7ff f8be 	bl	8006f18 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	d90c      	bls.n	8007dc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2203      	movs	r2, #3
 8007db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e015      	b.n	8007dec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e4      	bne.n	8007d98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dd2:	223f      	movs	r2, #63	@ 0x3f
 8007dd4:	409a      	lsls	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d004      	beq.n	8007e12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2280      	movs	r2, #128	@ 0x80
 8007e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e00c      	b.n	8007e2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2205      	movs	r2, #5
 8007e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0201 	bic.w	r2, r2, #1
 8007e28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e44:	4b8e      	ldr	r3, [pc, #568]	@ (8008080 <HAL_DMA_IRQHandler+0x248>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a8e      	ldr	r2, [pc, #568]	@ (8008084 <HAL_DMA_IRQHandler+0x24c>)
 8007e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4e:	0a9b      	lsrs	r3, r3, #10
 8007e50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e62:	2208      	movs	r2, #8
 8007e64:	409a      	lsls	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d01a      	beq.n	8007ea4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d013      	beq.n	8007ea4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0204 	bic.w	r2, r2, #4
 8007e8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e90:	2208      	movs	r2, #8
 8007e92:	409a      	lsls	r2, r3
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e9c:	f043 0201 	orr.w	r2, r3, #1
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	409a      	lsls	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d012      	beq.n	8007eda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	409a      	lsls	r2, r3
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed2:	f043 0202 	orr.w	r2, r3, #2
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ede:	2204      	movs	r2, #4
 8007ee0:	409a      	lsls	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d012      	beq.n	8007f10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00b      	beq.n	8007f10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007efc:	2204      	movs	r2, #4
 8007efe:	409a      	lsls	r2, r3
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f08:	f043 0204 	orr.w	r2, r3, #4
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f14:	2210      	movs	r2, #16
 8007f16:	409a      	lsls	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d043      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0308 	and.w	r3, r3, #8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d03c      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f32:	2210      	movs	r2, #16
 8007f34:	409a      	lsls	r2, r3
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d018      	beq.n	8007f7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d108      	bne.n	8007f68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d024      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
 8007f66:	e01f      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01b      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
 8007f78:	e016      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d107      	bne.n	8007f98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0208 	bic.w	r2, r2, #8
 8007f96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fac:	2220      	movs	r2, #32
 8007fae:	409a      	lsls	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 808f 	beq.w	80080d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0310 	and.w	r3, r3, #16
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 8087 	beq.w	80080d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fce:	2220      	movs	r2, #32
 8007fd0:	409a      	lsls	r2, r3
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	d136      	bne.n	8008050 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0216 	bic.w	r2, r2, #22
 8007ff0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	695a      	ldr	r2, [r3, #20]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008000:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d103      	bne.n	8008012 <HAL_DMA_IRQHandler+0x1da>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0208 	bic.w	r2, r2, #8
 8008020:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008026:	223f      	movs	r2, #63	@ 0x3f
 8008028:	409a      	lsls	r2, r3
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008042:	2b00      	cmp	r3, #0
 8008044:	d07e      	beq.n	8008144 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
        }
        return;
 800804e:	e079      	b.n	8008144 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d01d      	beq.n	800809a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10d      	bne.n	8008088 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008070:	2b00      	cmp	r3, #0
 8008072:	d031      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	4798      	blx	r3
 800807c:	e02c      	b.n	80080d8 <HAL_DMA_IRQHandler+0x2a0>
 800807e:	bf00      	nop
 8008080:	20000018 	.word	0x20000018
 8008084:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d023      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	4798      	blx	r3
 8008098:	e01e      	b.n	80080d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10f      	bne.n	80080c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0210 	bic.w	r2, r2, #16
 80080b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d032      	beq.n	8008146 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d022      	beq.n	8008132 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2205      	movs	r2, #5
 80080f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0201 	bic.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	3301      	adds	r3, #1
 8008108:	60bb      	str	r3, [r7, #8]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	429a      	cmp	r2, r3
 800810e:	d307      	bcc.n	8008120 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1f2      	bne.n	8008104 <HAL_DMA_IRQHandler+0x2cc>
 800811e:	e000      	b.n	8008122 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008120:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
 8008142:	e000      	b.n	8008146 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008144:	bf00      	nop
    }
  }
}
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800815a:	b2db      	uxtb	r3, r3
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800819c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	2b40      	cmp	r3, #64	@ 0x40
 80081ac:	d108      	bne.n	80081c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80081be:	e007      	b.n	80081d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	60da      	str	r2, [r3, #12]
}
 80081d0:	bf00      	nop
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	3b10      	subs	r3, #16
 80081ec:	4a14      	ldr	r2, [pc, #80]	@ (8008240 <DMA_CalcBaseAndBitshift+0x64>)
 80081ee:	fba2 2303 	umull	r2, r3, r2, r3
 80081f2:	091b      	lsrs	r3, r3, #4
 80081f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80081f6:	4a13      	ldr	r2, [pc, #76]	@ (8008244 <DMA_CalcBaseAndBitshift+0x68>)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b03      	cmp	r3, #3
 8008208:	d909      	bls.n	800821e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008212:	f023 0303 	bic.w	r3, r3, #3
 8008216:	1d1a      	adds	r2, r3, #4
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	659a      	str	r2, [r3, #88]	@ 0x58
 800821c:	e007      	b.n	800822e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008226:	f023 0303 	bic.w	r3, r3, #3
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	aaaaaaab 	.word	0xaaaaaaab
 8008244:	08016ff0 	.word	0x08016ff0

08008248 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008258:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d11f      	bne.n	80082a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2b03      	cmp	r3, #3
 8008266:	d856      	bhi.n	8008316 <DMA_CheckFifoParam+0xce>
 8008268:	a201      	add	r2, pc, #4	@ (adr r2, 8008270 <DMA_CheckFifoParam+0x28>)
 800826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826e:	bf00      	nop
 8008270:	08008281 	.word	0x08008281
 8008274:	08008293 	.word	0x08008293
 8008278:	08008281 	.word	0x08008281
 800827c:	08008317 	.word	0x08008317
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008284:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d046      	beq.n	800831a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008290:	e043      	b.n	800831a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008296:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800829a:	d140      	bne.n	800831e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082a0:	e03d      	b.n	800831e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082aa:	d121      	bne.n	80082f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d837      	bhi.n	8008322 <DMA_CheckFifoParam+0xda>
 80082b2:	a201      	add	r2, pc, #4	@ (adr r2, 80082b8 <DMA_CheckFifoParam+0x70>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	080082c9 	.word	0x080082c9
 80082bc:	080082cf 	.word	0x080082cf
 80082c0:	080082c9 	.word	0x080082c9
 80082c4:	080082e1 	.word	0x080082e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	73fb      	strb	r3, [r7, #15]
      break;
 80082cc:	e030      	b.n	8008330 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d025      	beq.n	8008326 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082de:	e022      	b.n	8008326 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80082e8:	d11f      	bne.n	800832a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80082ee:	e01c      	b.n	800832a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d903      	bls.n	80082fe <DMA_CheckFifoParam+0xb6>
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d003      	beq.n	8008304 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80082fc:	e018      	b.n	8008330 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	73fb      	strb	r3, [r7, #15]
      break;
 8008302:	e015      	b.n	8008330 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00e      	beq.n	800832e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	73fb      	strb	r3, [r7, #15]
      break;
 8008314:	e00b      	b.n	800832e <DMA_CheckFifoParam+0xe6>
      break;
 8008316:	bf00      	nop
 8008318:	e00a      	b.n	8008330 <DMA_CheckFifoParam+0xe8>
      break;
 800831a:	bf00      	nop
 800831c:	e008      	b.n	8008330 <DMA_CheckFifoParam+0xe8>
      break;
 800831e:	bf00      	nop
 8008320:	e006      	b.n	8008330 <DMA_CheckFifoParam+0xe8>
      break;
 8008322:	bf00      	nop
 8008324:	e004      	b.n	8008330 <DMA_CheckFifoParam+0xe8>
      break;
 8008326:	bf00      	nop
 8008328:	e002      	b.n	8008330 <DMA_CheckFifoParam+0xe8>
      break;   
 800832a:	bf00      	nop
 800832c:	e000      	b.n	8008330 <DMA_CheckFifoParam+0xe8>
      break;
 800832e:	bf00      	nop
    }
  } 
  
  return status; 
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop

08008340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008340:	b480      	push	{r7}
 8008342:	b089      	sub	sp, #36	@ 0x24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800834a:	2300      	movs	r3, #0
 800834c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800834e:	2300      	movs	r3, #0
 8008350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008352:	2300      	movs	r3, #0
 8008354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008356:	2300      	movs	r3, #0
 8008358:	61fb      	str	r3, [r7, #28]
 800835a:	e159      	b.n	8008610 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800835c:	2201      	movs	r2, #1
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	fa02 f303 	lsl.w	r3, r2, r3
 8008364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	4013      	ands	r3, r2
 800836e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	429a      	cmp	r2, r3
 8008376:	f040 8148 	bne.w	800860a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f003 0303 	and.w	r3, r3, #3
 8008382:	2b01      	cmp	r3, #1
 8008384:	d005      	beq.n	8008392 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800838e:	2b02      	cmp	r3, #2
 8008390:	d130      	bne.n	80083f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	005b      	lsls	r3, r3, #1
 800839c:	2203      	movs	r2, #3
 800839e:	fa02 f303 	lsl.w	r3, r2, r3
 80083a2:	43db      	mvns	r3, r3
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	4013      	ands	r3, r2
 80083a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	fa02 f303 	lsl.w	r3, r2, r3
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80083c8:	2201      	movs	r2, #1
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	43db      	mvns	r3, r3
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	4013      	ands	r3, r2
 80083d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	091b      	lsrs	r3, r3, #4
 80083de:	f003 0201 	and.w	r2, r3, #1
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	fa02 f303 	lsl.w	r3, r2, r3
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d017      	beq.n	8008430 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	2203      	movs	r2, #3
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	43db      	mvns	r3, r3
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	4013      	ands	r3, r2
 8008416:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	fa02 f303 	lsl.w	r3, r2, r3
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	4313      	orrs	r3, r2
 8008428:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	2b02      	cmp	r3, #2
 800843a:	d123      	bne.n	8008484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	08da      	lsrs	r2, r3, #3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3208      	adds	r2, #8
 8008444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	f003 0307 	and.w	r3, r3, #7
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	220f      	movs	r2, #15
 8008454:	fa02 f303 	lsl.w	r3, r2, r3
 8008458:	43db      	mvns	r3, r3
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	4013      	ands	r3, r2
 800845e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	691a      	ldr	r2, [r3, #16]
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	fa02 f303 	lsl.w	r3, r2, r3
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	4313      	orrs	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	08da      	lsrs	r2, r3, #3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3208      	adds	r2, #8
 800847e:	69b9      	ldr	r1, [r7, #24]
 8008480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	2203      	movs	r2, #3
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	43db      	mvns	r3, r3
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	4013      	ands	r3, r2
 800849a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f003 0203 	and.w	r2, r3, #3
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 80a2 	beq.w	800860a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
 80084ca:	4b57      	ldr	r3, [pc, #348]	@ (8008628 <HAL_GPIO_Init+0x2e8>)
 80084cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ce:	4a56      	ldr	r2, [pc, #344]	@ (8008628 <HAL_GPIO_Init+0x2e8>)
 80084d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80084d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80084d6:	4b54      	ldr	r3, [pc, #336]	@ (8008628 <HAL_GPIO_Init+0x2e8>)
 80084d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084e2:	4a52      	ldr	r2, [pc, #328]	@ (800862c <HAL_GPIO_Init+0x2ec>)
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	089b      	lsrs	r3, r3, #2
 80084e8:	3302      	adds	r3, #2
 80084ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	220f      	movs	r2, #15
 80084fa:	fa02 f303 	lsl.w	r3, r2, r3
 80084fe:	43db      	mvns	r3, r3
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	4013      	ands	r3, r2
 8008504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a49      	ldr	r2, [pc, #292]	@ (8008630 <HAL_GPIO_Init+0x2f0>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d019      	beq.n	8008542 <HAL_GPIO_Init+0x202>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a48      	ldr	r2, [pc, #288]	@ (8008634 <HAL_GPIO_Init+0x2f4>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d013      	beq.n	800853e <HAL_GPIO_Init+0x1fe>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a47      	ldr	r2, [pc, #284]	@ (8008638 <HAL_GPIO_Init+0x2f8>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00d      	beq.n	800853a <HAL_GPIO_Init+0x1fa>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a46      	ldr	r2, [pc, #280]	@ (800863c <HAL_GPIO_Init+0x2fc>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d007      	beq.n	8008536 <HAL_GPIO_Init+0x1f6>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a45      	ldr	r2, [pc, #276]	@ (8008640 <HAL_GPIO_Init+0x300>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d101      	bne.n	8008532 <HAL_GPIO_Init+0x1f2>
 800852e:	2304      	movs	r3, #4
 8008530:	e008      	b.n	8008544 <HAL_GPIO_Init+0x204>
 8008532:	2307      	movs	r3, #7
 8008534:	e006      	b.n	8008544 <HAL_GPIO_Init+0x204>
 8008536:	2303      	movs	r3, #3
 8008538:	e004      	b.n	8008544 <HAL_GPIO_Init+0x204>
 800853a:	2302      	movs	r3, #2
 800853c:	e002      	b.n	8008544 <HAL_GPIO_Init+0x204>
 800853e:	2301      	movs	r3, #1
 8008540:	e000      	b.n	8008544 <HAL_GPIO_Init+0x204>
 8008542:	2300      	movs	r3, #0
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	f002 0203 	and.w	r2, r2, #3
 800854a:	0092      	lsls	r2, r2, #2
 800854c:	4093      	lsls	r3, r2
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	4313      	orrs	r3, r2
 8008552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008554:	4935      	ldr	r1, [pc, #212]	@ (800862c <HAL_GPIO_Init+0x2ec>)
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	089b      	lsrs	r3, r3, #2
 800855a:	3302      	adds	r3, #2
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008562:	4b38      	ldr	r3, [pc, #224]	@ (8008644 <HAL_GPIO_Init+0x304>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	43db      	mvns	r3, r3
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	4013      	ands	r3, r2
 8008570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008586:	4a2f      	ldr	r2, [pc, #188]	@ (8008644 <HAL_GPIO_Init+0x304>)
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800858c:	4b2d      	ldr	r3, [pc, #180]	@ (8008644 <HAL_GPIO_Init+0x304>)
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	43db      	mvns	r3, r3
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	4013      	ands	r3, r2
 800859a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80085b0:	4a24      	ldr	r2, [pc, #144]	@ (8008644 <HAL_GPIO_Init+0x304>)
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80085b6:	4b23      	ldr	r3, [pc, #140]	@ (8008644 <HAL_GPIO_Init+0x304>)
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	43db      	mvns	r3, r3
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	4013      	ands	r3, r2
 80085c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80085da:	4a1a      	ldr	r2, [pc, #104]	@ (8008644 <HAL_GPIO_Init+0x304>)
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80085e0:	4b18      	ldr	r3, [pc, #96]	@ (8008644 <HAL_GPIO_Init+0x304>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	43db      	mvns	r3, r3
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	4013      	ands	r3, r2
 80085ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	4313      	orrs	r3, r2
 8008602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008604:	4a0f      	ldr	r2, [pc, #60]	@ (8008644 <HAL_GPIO_Init+0x304>)
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	3301      	adds	r3, #1
 800860e:	61fb      	str	r3, [r7, #28]
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	2b0f      	cmp	r3, #15
 8008614:	f67f aea2 	bls.w	800835c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008618:	bf00      	nop
 800861a:	bf00      	nop
 800861c:	3724      	adds	r7, #36	@ 0x24
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	40023800 	.word	0x40023800
 800862c:	40013800 	.word	0x40013800
 8008630:	40020000 	.word	0x40020000
 8008634:	40020400 	.word	0x40020400
 8008638:	40020800 	.word	0x40020800
 800863c:	40020c00 	.word	0x40020c00
 8008640:	40021000 	.word	0x40021000
 8008644:	40013c00 	.word	0x40013c00

08008648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691a      	ldr	r2, [r3, #16]
 8008658:	887b      	ldrh	r3, [r7, #2]
 800865a:	4013      	ands	r3, r2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008660:	2301      	movs	r3, #1
 8008662:	73fb      	strb	r3, [r7, #15]
 8008664:	e001      	b.n	800866a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	807b      	strh	r3, [r7, #2]
 8008684:	4613      	mov	r3, r2
 8008686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008688:	787b      	ldrb	r3, [r7, #1]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800868e:	887a      	ldrh	r2, [r7, #2]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008694:	e003      	b.n	800869e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008696:	887b      	ldrh	r3, [r7, #2]
 8008698:	041a      	lsls	r2, r3, #16
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	619a      	str	r2, [r3, #24]
}
 800869e:	bf00      	nop
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
	...

080086ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	4603      	mov	r3, r0
 80086b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80086b6:	4b08      	ldr	r3, [pc, #32]	@ (80086d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086b8:	695a      	ldr	r2, [r3, #20]
 80086ba:	88fb      	ldrh	r3, [r7, #6]
 80086bc:	4013      	ands	r3, r2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d006      	beq.n	80086d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80086c2:	4a05      	ldr	r2, [pc, #20]	@ (80086d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80086c8:	88fb      	ldrh	r3, [r7, #6]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7f9 f854 	bl	8001778 <HAL_GPIO_EXTI_Callback>
  }
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	40013c00 	.word	0x40013c00

080086dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e12b      	b.n	8008946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d106      	bne.n	8008708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7f8 ff38 	bl	8001578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2224      	movs	r2, #36	@ 0x24
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f022 0201 	bic.w	r2, r2, #1
 800871e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800872e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800873e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008740:	f002 ff2c 	bl	800b59c <HAL_RCC_GetPCLK1Freq>
 8008744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	4a81      	ldr	r2, [pc, #516]	@ (8008950 <HAL_I2C_Init+0x274>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d807      	bhi.n	8008760 <HAL_I2C_Init+0x84>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4a80      	ldr	r2, [pc, #512]	@ (8008954 <HAL_I2C_Init+0x278>)
 8008754:	4293      	cmp	r3, r2
 8008756:	bf94      	ite	ls
 8008758:	2301      	movls	r3, #1
 800875a:	2300      	movhi	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	e006      	b.n	800876e <HAL_I2C_Init+0x92>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4a7d      	ldr	r2, [pc, #500]	@ (8008958 <HAL_I2C_Init+0x27c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	bf94      	ite	ls
 8008768:	2301      	movls	r3, #1
 800876a:	2300      	movhi	r3, #0
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e0e7      	b.n	8008946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	4a78      	ldr	r2, [pc, #480]	@ (800895c <HAL_I2C_Init+0x280>)
 800877a:	fba2 2303 	umull	r2, r3, r2, r3
 800877e:	0c9b      	lsrs	r3, r3, #18
 8008780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4a6a      	ldr	r2, [pc, #424]	@ (8008950 <HAL_I2C_Init+0x274>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d802      	bhi.n	80087b0 <HAL_I2C_Init+0xd4>
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	3301      	adds	r3, #1
 80087ae:	e009      	b.n	80087c4 <HAL_I2C_Init+0xe8>
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80087b6:	fb02 f303 	mul.w	r3, r2, r3
 80087ba:	4a69      	ldr	r2, [pc, #420]	@ (8008960 <HAL_I2C_Init+0x284>)
 80087bc:	fba2 2303 	umull	r2, r3, r2, r3
 80087c0:	099b      	lsrs	r3, r3, #6
 80087c2:	3301      	adds	r3, #1
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	430b      	orrs	r3, r1
 80087ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80087d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	495c      	ldr	r1, [pc, #368]	@ (8008950 <HAL_I2C_Init+0x274>)
 80087e0:	428b      	cmp	r3, r1
 80087e2:	d819      	bhi.n	8008818 <HAL_I2C_Init+0x13c>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	1e59      	subs	r1, r3, #1
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80087f2:	1c59      	adds	r1, r3, #1
 80087f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80087f8:	400b      	ands	r3, r1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00a      	beq.n	8008814 <HAL_I2C_Init+0x138>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	1e59      	subs	r1, r3, #1
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	fbb1 f3f3 	udiv	r3, r1, r3
 800880c:	3301      	adds	r3, #1
 800880e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008812:	e051      	b.n	80088b8 <HAL_I2C_Init+0x1dc>
 8008814:	2304      	movs	r3, #4
 8008816:	e04f      	b.n	80088b8 <HAL_I2C_Init+0x1dc>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d111      	bne.n	8008844 <HAL_I2C_Init+0x168>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	1e58      	subs	r0, r3, #1
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6859      	ldr	r1, [r3, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	005b      	lsls	r3, r3, #1
 800882c:	440b      	add	r3, r1
 800882e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008832:	3301      	adds	r3, #1
 8008834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008838:	2b00      	cmp	r3, #0
 800883a:	bf0c      	ite	eq
 800883c:	2301      	moveq	r3, #1
 800883e:	2300      	movne	r3, #0
 8008840:	b2db      	uxtb	r3, r3
 8008842:	e012      	b.n	800886a <HAL_I2C_Init+0x18e>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	1e58      	subs	r0, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6859      	ldr	r1, [r3, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	440b      	add	r3, r1
 8008852:	0099      	lsls	r1, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	fbb0 f3f3 	udiv	r3, r0, r3
 800885a:	3301      	adds	r3, #1
 800885c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008860:	2b00      	cmp	r3, #0
 8008862:	bf0c      	ite	eq
 8008864:	2301      	moveq	r3, #1
 8008866:	2300      	movne	r3, #0
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <HAL_I2C_Init+0x196>
 800886e:	2301      	movs	r3, #1
 8008870:	e022      	b.n	80088b8 <HAL_I2C_Init+0x1dc>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10e      	bne.n	8008898 <HAL_I2C_Init+0x1bc>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	1e58      	subs	r0, r3, #1
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6859      	ldr	r1, [r3, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	440b      	add	r3, r1
 8008888:	fbb0 f3f3 	udiv	r3, r0, r3
 800888c:	3301      	adds	r3, #1
 800888e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008896:	e00f      	b.n	80088b8 <HAL_I2C_Init+0x1dc>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	1e58      	subs	r0, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6859      	ldr	r1, [r3, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	440b      	add	r3, r1
 80088a6:	0099      	lsls	r1, r3, #2
 80088a8:	440b      	add	r3, r1
 80088aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80088ae:	3301      	adds	r3, #1
 80088b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	6809      	ldr	r1, [r1, #0]
 80088bc:	4313      	orrs	r3, r2
 80088be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	69da      	ldr	r2, [r3, #28]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	431a      	orrs	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	430a      	orrs	r2, r1
 80088da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80088e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6911      	ldr	r1, [r2, #16]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	68d2      	ldr	r2, [r2, #12]
 80088f2:	4311      	orrs	r1, r2
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	6812      	ldr	r2, [r2, #0]
 80088f8:	430b      	orrs	r3, r1
 80088fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695a      	ldr	r2, [r3, #20]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	431a      	orrs	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f042 0201 	orr.w	r2, r2, #1
 8008926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2220      	movs	r2, #32
 8008932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	000186a0 	.word	0x000186a0
 8008954:	001e847f 	.word	0x001e847f
 8008958:	003d08ff 	.word	0x003d08ff
 800895c:	431bde83 	.word	0x431bde83
 8008960:	10624dd3 	.word	0x10624dd3

08008964 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008976:	2b80      	cmp	r3, #128	@ 0x80
 8008978:	d103      	bne.n	8008982 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2200      	movs	r2, #0
 8008980:	611a      	str	r2, [r3, #16]
  }
}
 8008982:	bf00      	nop
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af02      	add	r7, sp, #8
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	4608      	mov	r0, r1
 800899a:	4611      	mov	r1, r2
 800899c:	461a      	mov	r2, r3
 800899e:	4603      	mov	r3, r0
 80089a0:	817b      	strh	r3, [r7, #10]
 80089a2:	460b      	mov	r3, r1
 80089a4:	813b      	strh	r3, [r7, #8]
 80089a6:	4613      	mov	r3, r2
 80089a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80089aa:	f7fe fab5 	bl	8006f18 <HAL_GetTick>
 80089ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b20      	cmp	r3, #32
 80089ba:	f040 80d9 	bne.w	8008b70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	2319      	movs	r3, #25
 80089c4:	2201      	movs	r2, #1
 80089c6:	496d      	ldr	r1, [pc, #436]	@ (8008b7c <HAL_I2C_Mem_Write+0x1ec>)
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f001 ff51 	bl	800a870 <I2C_WaitOnFlagUntilTimeout>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80089d4:	2302      	movs	r3, #2
 80089d6:	e0cc      	b.n	8008b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d101      	bne.n	80089e6 <HAL_I2C_Mem_Write+0x56>
 80089e2:	2302      	movs	r3, #2
 80089e4:	e0c5      	b.n	8008b72 <HAL_I2C_Mem_Write+0x1e2>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d007      	beq.n	8008a0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f042 0201 	orr.w	r2, r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2221      	movs	r2, #33	@ 0x21
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2240      	movs	r2, #64	@ 0x40
 8008a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6a3a      	ldr	r2, [r7, #32]
 8008a36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4a4d      	ldr	r2, [pc, #308]	@ (8008b80 <HAL_I2C_Mem_Write+0x1f0>)
 8008a4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a4e:	88f8      	ldrh	r0, [r7, #6]
 8008a50:	893a      	ldrh	r2, [r7, #8]
 8008a52:	8979      	ldrh	r1, [r7, #10]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f001 fcac 	bl	800a3bc <I2C_RequestMemoryWrite>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d052      	beq.n	8008b10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e081      	b.n	8008b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f002 f816 	bl	800aaa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00d      	beq.n	8008a9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d107      	bne.n	8008a96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e06b      	b.n	8008b72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9e:	781a      	ldrb	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	f003 0304 	and.w	r3, r3, #4
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d11b      	bne.n	8008b10 <HAL_I2C_Mem_Write+0x180>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d017      	beq.n	8008b10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae4:	781a      	ldrb	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008afa:	3b01      	subs	r3, #1
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1aa      	bne.n	8008a6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f002 f809 	bl	800ab34 <I2C_WaitOnBTFFlagUntilTimeout>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00d      	beq.n	8008b44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	d107      	bne.n	8008b40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e016      	b.n	8008b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e000      	b.n	8008b72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008b70:	2302      	movs	r3, #2
  }
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	00100002 	.word	0x00100002
 8008b80:	ffff0000 	.word	0xffff0000

08008b84 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08a      	sub	sp, #40	@ 0x28
 8008b88:	af02      	add	r7, sp, #8
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	4611      	mov	r1, r2
 8008b90:	461a      	mov	r2, r3
 8008b92:	4603      	mov	r3, r0
 8008b94:	817b      	strh	r3, [r7, #10]
 8008b96:	460b      	mov	r3, r1
 8008b98:	813b      	strh	r3, [r7, #8]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ba2:	f7fe f9b9 	bl	8006f18 <HAL_GetTick>
 8008ba6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b20      	cmp	r3, #32
 8008bb2:	f040 8136 	bne.w	8008e22 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008bb6:	4b9d      	ldr	r3, [pc, #628]	@ (8008e2c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	08db      	lsrs	r3, r3, #3
 8008bbc:	4a9c      	ldr	r2, [pc, #624]	@ (8008e30 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8008bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc2:	0a1a      	lsrs	r2, r3, #8
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	009a      	lsls	r2, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d112      	bne.n	8008c02 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf6:	f043 0220 	orr.w	r2, r3, #32
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8008bfe:	2302      	movs	r3, #2
 8008c00:	e110      	b.n	8008e24 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d0df      	beq.n	8008bd0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d101      	bne.n	8008c1e <HAL_I2C_Mem_Write_DMA+0x9a>
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	e102      	b.n	8008e24 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d007      	beq.n	8008c44 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0201 	orr.w	r2, r2, #1
 8008c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2221      	movs	r2, #33	@ 0x21
 8008c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2240      	movs	r2, #64	@ 0x40
 8008c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4a6c      	ldr	r2, [pc, #432]	@ (8008e34 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8008c84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8008c86:	897a      	ldrh	r2, [r7, #10]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8008c8c:	893a      	ldrh	r2, [r7, #8]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8008c92:	88fa      	ldrh	r2, [r7, #6]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 80a9 	beq.w	8008dfa <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d02a      	beq.n	8008d06 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb4:	4a60      	ldr	r2, [pc, #384]	@ (8008e38 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8008cb6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cbc:	4a5f      	ldr	r2, [pc, #380]	@ (8008e3c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8008cbe:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ccc:	2200      	movs	r2, #0
 8008cce:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cdc:	2200      	movs	r2, #0
 8008cde:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce8:	4619      	mov	r1, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3310      	adds	r3, #16
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cf6:	f7fe ffb5 	bl	8007c64 <HAL_DMA_Start_IT>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008cfe:	7efb      	ldrb	r3, [r7, #27]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d166      	bne.n	8008dd2 <HAL_I2C_Mem_Write_DMA+0x24e>
 8008d04:	e013      	b.n	8008d2e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2220      	movs	r2, #32
 8008d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e07a      	b.n	8008e24 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008d2e:	88f8      	ldrh	r0, [r7, #6]
 8008d30:	893a      	ldrh	r2, [r7, #8]
 8008d32:	8979      	ldrh	r1, [r7, #10]
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	2323      	movs	r3, #35	@ 0x23
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f001 fb3c 	bl	800a3bc <I2C_RequestMemoryWrite>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d022      	beq.n	8008d90 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff f850 	bl	8007df4 <HAL_DMA_Abort_IT>
 8008d54:	4603      	mov	r3, r0
 8008d56:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d6e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0201 	bic.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e049      	b.n	8008e24 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d90:	2300      	movs	r3, #0
 8008d92:	613b      	str	r3, [r7, #16]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	613b      	str	r3, [r7, #16]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	613b      	str	r3, [r7, #16]
 8008da4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008dbc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008dcc:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e028      	b.n	8008e24 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de6:	f043 0210 	orr.w	r2, r3, #16
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e014      	b.n	8008e24 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e000      	b.n	8008e24 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008e22:	2302      	movs	r3, #2
  }
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3720      	adds	r7, #32
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000018 	.word	0x20000018
 8008e30:	14f8b589 	.word	0x14f8b589
 8008e34:	ffff0000 	.word	0xffff0000
 8008e38:	0800a4e9 	.word	0x0800a4e9
 8008e3c:	0800a6a7 	.word	0x0800a6a7

08008e40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b088      	sub	sp, #32
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e58:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e60:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e68:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	2b10      	cmp	r3, #16
 8008e6e:	d003      	beq.n	8008e78 <HAL_I2C_EV_IRQHandler+0x38>
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	2b40      	cmp	r3, #64	@ 0x40
 8008e74:	f040 80b1 	bne.w	8008fda <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10d      	bne.n	8008eae <HAL_I2C_EV_IRQHandler+0x6e>
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008e98:	d003      	beq.n	8008ea2 <HAL_I2C_EV_IRQHandler+0x62>
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008ea0:	d101      	bne.n	8008ea6 <HAL_I2C_EV_IRQHandler+0x66>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e000      	b.n	8008ea8 <HAL_I2C_EV_IRQHandler+0x68>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	f000 8114 	beq.w	80090d6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00b      	beq.n	8008ed0 <HAL_I2C_EV_IRQHandler+0x90>
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d006      	beq.n	8008ed0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f001 fedf 	bl	800ac86 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fccd 	bl	8009868 <I2C_Master_SB>
 8008ece:	e083      	b.n	8008fd8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	f003 0308 	and.w	r3, r3, #8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d008      	beq.n	8008eec <HAL_I2C_EV_IRQHandler+0xac>
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fd45 	bl	8009974 <I2C_Master_ADD10>
 8008eea:	e075      	b.n	8008fd8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d008      	beq.n	8008f08 <HAL_I2C_EV_IRQHandler+0xc8>
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d003      	beq.n	8008f08 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fd61 	bl	80099c8 <I2C_Master_ADDR>
 8008f06:	e067      	b.n	8008fd8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	f003 0304 	and.w	r3, r3, #4
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d036      	beq.n	8008f80 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f20:	f000 80db 	beq.w	80090da <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00d      	beq.n	8008f4a <HAL_I2C_EV_IRQHandler+0x10a>
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d008      	beq.n	8008f4a <HAL_I2C_EV_IRQHandler+0x10a>
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	f003 0304 	and.w	r3, r3, #4
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d103      	bne.n	8008f4a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f92d 	bl	80091a2 <I2C_MasterTransmit_TXE>
 8008f48:	e046      	b.n	8008fd8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 80c2 	beq.w	80090da <HAL_I2C_EV_IRQHandler+0x29a>
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80bc 	beq.w	80090da <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008f62:	7bbb      	ldrb	r3, [r7, #14]
 8008f64:	2b21      	cmp	r3, #33	@ 0x21
 8008f66:	d103      	bne.n	8008f70 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f9b6 	bl	80092da <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f6e:	e0b4      	b.n	80090da <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	2b40      	cmp	r3, #64	@ 0x40
 8008f74:	f040 80b1 	bne.w	80090da <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fa24 	bl	80093c6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f7e:	e0ac      	b.n	80090da <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f8e:	f000 80a4 	beq.w	80090da <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00d      	beq.n	8008fb8 <HAL_I2C_EV_IRQHandler+0x178>
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d008      	beq.n	8008fb8 <HAL_I2C_EV_IRQHandler+0x178>
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	f003 0304 	and.w	r3, r3, #4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d103      	bne.n	8008fb8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 faa0 	bl	80094f6 <I2C_MasterReceive_RXNE>
 8008fb6:	e00f      	b.n	8008fd8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f003 0304 	and.w	r3, r3, #4
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 808b 	beq.w	80090da <HAL_I2C_EV_IRQHandler+0x29a>
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 8085 	beq.w	80090da <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fb58 	bl	8009686 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008fd6:	e080      	b.n	80090da <HAL_I2C_EV_IRQHandler+0x29a>
 8008fd8:	e07f      	b.n	80090da <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d004      	beq.n	8008fec <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	61fb      	str	r3, [r7, #28]
 8008fea:	e007      	b.n	8008ffc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d011      	beq.n	800902a <HAL_I2C_EV_IRQHandler+0x1ea>
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00c      	beq.n	800902a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009020:	69b9      	ldr	r1, [r7, #24]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 ff1f 	bl	8009e66 <I2C_Slave_ADDR>
 8009028:	e05a      	b.n	80090e0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	f003 0310 	and.w	r3, r3, #16
 8009030:	2b00      	cmp	r3, #0
 8009032:	d008      	beq.n	8009046 <HAL_I2C_EV_IRQHandler+0x206>
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 ff5a 	bl	8009ef8 <I2C_Slave_STOPF>
 8009044:	e04c      	b.n	80090e0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009046:	7bbb      	ldrb	r3, [r7, #14]
 8009048:	2b21      	cmp	r3, #33	@ 0x21
 800904a:	d002      	beq.n	8009052 <HAL_I2C_EV_IRQHandler+0x212>
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	2b29      	cmp	r3, #41	@ 0x29
 8009050:	d120      	bne.n	8009094 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00d      	beq.n	8009078 <HAL_I2C_EV_IRQHandler+0x238>
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009062:	2b00      	cmp	r3, #0
 8009064:	d008      	beq.n	8009078 <HAL_I2C_EV_IRQHandler+0x238>
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	f003 0304 	and.w	r3, r3, #4
 800906c:	2b00      	cmp	r3, #0
 800906e:	d103      	bne.n	8009078 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fe3a 	bl	8009cea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009076:	e032      	b.n	80090de <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	f003 0304 	and.w	r3, r3, #4
 800907e:	2b00      	cmp	r3, #0
 8009080:	d02d      	beq.n	80090de <HAL_I2C_EV_IRQHandler+0x29e>
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009088:	2b00      	cmp	r3, #0
 800908a:	d028      	beq.n	80090de <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fe69 	bl	8009d64 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009092:	e024      	b.n	80090de <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00d      	beq.n	80090ba <HAL_I2C_EV_IRQHandler+0x27a>
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d008      	beq.n	80090ba <HAL_I2C_EV_IRQHandler+0x27a>
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	f003 0304 	and.w	r3, r3, #4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d103      	bne.n	80090ba <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fe77 	bl	8009da6 <I2C_SlaveReceive_RXNE>
 80090b8:	e012      	b.n	80090e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	f003 0304 	and.w	r3, r3, #4
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00d      	beq.n	80090e0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d008      	beq.n	80090e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fea7 	bl	8009e22 <I2C_SlaveReceive_BTF>
 80090d4:	e004      	b.n	80090e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80090d6:	bf00      	nop
 80090d8:	e002      	b.n	80090e0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090da:	bf00      	nop
 80090dc:	e000      	b.n	80090e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80090de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80090e0:	3720      	adds	r7, #32
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b083      	sub	sp, #12
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009102:	bf00      	nop
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009116:	bf00      	nop
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009122:	b480      	push	{r7}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800912a:	bf00      	nop
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
 8009142:	4613      	mov	r3, r2
 8009144:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009146:	bf00      	nop
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009152:	b480      	push	{r7}
 8009154:	b083      	sub	sp, #12
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800915a:	bf00      	nop
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009196:	bf00      	nop
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091b8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d150      	bne.n	800926a <I2C_MasterTransmit_TXE+0xc8>
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	2b21      	cmp	r3, #33	@ 0x21
 80091cc:	d14d      	bne.n	800926a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d01d      	beq.n	8009210 <I2C_MasterTransmit_TXE+0x6e>
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2b20      	cmp	r3, #32
 80091d8:	d01a      	beq.n	8009210 <I2C_MasterTransmit_TXE+0x6e>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80091e0:	d016      	beq.n	8009210 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80091f0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2211      	movs	r2, #17
 80091f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff ff6c 	bl	80090e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800920e:	e060      	b.n	80092d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800921e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800922e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2220      	movs	r2, #32
 800923a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b40      	cmp	r3, #64	@ 0x40
 8009248:	d107      	bne.n	800925a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7f8 fa62 	bl	800171c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009258:	e03b      	b.n	80092d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff ff3f 	bl	80090e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009268:	e033      	b.n	80092d2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	2b21      	cmp	r3, #33	@ 0x21
 800926e:	d005      	beq.n	800927c <I2C_MasterTransmit_TXE+0xda>
 8009270:	7bbb      	ldrb	r3, [r7, #14]
 8009272:	2b40      	cmp	r3, #64	@ 0x40
 8009274:	d12d      	bne.n	80092d2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	2b22      	cmp	r3, #34	@ 0x22
 800927a:	d12a      	bne.n	80092d2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009280:	b29b      	uxth	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d108      	bne.n	8009298 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009294:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009296:	e01c      	b.n	80092d2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b40      	cmp	r3, #64	@ 0x40
 80092a2:	d103      	bne.n	80092ac <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f88e 	bl	80093c6 <I2C_MemoryTransmit_TXE_BTF>
}
 80092aa:	e012      	b.n	80092d2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b0:	781a      	ldrb	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80092d0:	e7ff      	b.n	80092d2 <I2C_MasterTransmit_TXE+0x130>
 80092d2:	bf00      	nop
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b21      	cmp	r3, #33	@ 0x21
 80092f2:	d164      	bne.n	80093be <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d012      	beq.n	8009324 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009302:	781a      	ldrb	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009318:	b29b      	uxth	r3, r3
 800931a:	3b01      	subs	r3, #1
 800931c:	b29a      	uxth	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009322:	e04c      	b.n	80093be <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b08      	cmp	r3, #8
 8009328:	d01d      	beq.n	8009366 <I2C_MasterTransmit_BTF+0x8c>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b20      	cmp	r3, #32
 800932e:	d01a      	beq.n	8009366 <I2C_MasterTransmit_BTF+0x8c>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009336:	d016      	beq.n	8009366 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009346:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2211      	movs	r2, #17
 800934c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2220      	movs	r2, #32
 800935a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff fec1 	bl	80090e6 <HAL_I2C_MasterTxCpltCallback>
}
 8009364:	e02b      	b.n	80093be <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009374:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009384:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2220      	movs	r2, #32
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b40      	cmp	r3, #64	@ 0x40
 800939e:	d107      	bne.n	80093b0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7f8 f9b7 	bl	800171c <HAL_I2C_MemTxCpltCallback>
}
 80093ae:	e006      	b.n	80093be <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff fe94 	bl	80090e6 <HAL_I2C_MasterTxCpltCallback>
}
 80093be:	bf00      	nop
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b084      	sub	sp, #16
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d11d      	bne.n	800941a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d10b      	bne.n	80093fe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f6:	1c9a      	adds	r2, r3, #2
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80093fc:	e077      	b.n	80094ee <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009402:	b29b      	uxth	r3, r3
 8009404:	121b      	asrs	r3, r3, #8
 8009406:	b2da      	uxtb	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009418:	e069      	b.n	80094ee <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800941e:	2b01      	cmp	r3, #1
 8009420:	d10b      	bne.n	800943a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009426:	b2da      	uxtb	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009438:	e059      	b.n	80094ee <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800943e:	2b02      	cmp	r3, #2
 8009440:	d152      	bne.n	80094e8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	2b22      	cmp	r3, #34	@ 0x22
 8009446:	d10d      	bne.n	8009464 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009456:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009462:	e044      	b.n	80094ee <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d015      	beq.n	800949a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	2b21      	cmp	r3, #33	@ 0x21
 8009472:	d112      	bne.n	800949a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009478:	781a      	ldrb	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009484:	1c5a      	adds	r2, r3, #1
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800948e:	b29b      	uxth	r3, r3
 8009490:	3b01      	subs	r3, #1
 8009492:	b29a      	uxth	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009498:	e029      	b.n	80094ee <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800949e:	b29b      	uxth	r3, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d124      	bne.n	80094ee <I2C_MemoryTransmit_TXE_BTF+0x128>
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	2b21      	cmp	r3, #33	@ 0x21
 80094a8:	d121      	bne.n	80094ee <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80094b8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094c8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2220      	movs	r2, #32
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7f8 f91b 	bl	800171c <HAL_I2C_MemTxCpltCallback>
}
 80094e6:	e002      	b.n	80094ee <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7ff fa3b 	bl	8008964 <I2C_Flush_DR>
}
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b22      	cmp	r3, #34	@ 0x22
 8009508:	f040 80b9 	bne.w	800967e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009510:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009516:	b29b      	uxth	r3, r3
 8009518:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b03      	cmp	r3, #3
 800951e:	d921      	bls.n	8009564 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	691a      	ldr	r2, [r3, #16]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952a:	b2d2      	uxtb	r2, r2
 800952c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009532:	1c5a      	adds	r2, r3, #1
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800953c:	b29b      	uxth	r3, r3
 800953e:	3b01      	subs	r3, #1
 8009540:	b29a      	uxth	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800954a:	b29b      	uxth	r3, r3
 800954c:	2b03      	cmp	r3, #3
 800954e:	f040 8096 	bne.w	800967e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009560:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8009562:	e08c      	b.n	800967e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009568:	2b02      	cmp	r3, #2
 800956a:	d07f      	beq.n	800966c <I2C_MasterReceive_RXNE+0x176>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d002      	beq.n	8009578 <I2C_MasterReceive_RXNE+0x82>
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d179      	bne.n	800966c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f001 fb23 	bl	800abc4 <I2C_WaitOnSTOPRequestThroughIT>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d14c      	bne.n	800961e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009592:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80095a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	691a      	ldr	r2, [r3, #16]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b6:	1c5a      	adds	r2, r3, #1
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b40      	cmp	r3, #64	@ 0x40
 80095dc:	d10a      	bne.n	80095f4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff fdba 	bl	8009166 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80095f2:	e044      	b.n	800967e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b08      	cmp	r3, #8
 8009600:	d002      	beq.n	8009608 <I2C_MasterReceive_RXNE+0x112>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b20      	cmp	r3, #32
 8009606:	d103      	bne.n	8009610 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	631a      	str	r2, [r3, #48]	@ 0x30
 800960e:	e002      	b.n	8009616 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2212      	movs	r2, #18
 8009614:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7ff fd6f 	bl	80090fa <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800961c:	e02f      	b.n	800967e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800962c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	691a      	ldr	r2, [r3, #16]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009638:	b2d2      	uxtb	r2, r2
 800963a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800964a:	b29b      	uxth	r3, r3
 800964c:	3b01      	subs	r3, #1
 800964e:	b29a      	uxth	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2220      	movs	r2, #32
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff fd88 	bl	800917a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800966a:	e008      	b.n	800967e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800967a:	605a      	str	r2, [r3, #4]
}
 800967c:	e7ff      	b.n	800967e <I2C_MasterReceive_RXNE+0x188>
 800967e:	bf00      	nop
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009692:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009698:	b29b      	uxth	r3, r3
 800969a:	2b04      	cmp	r3, #4
 800969c:	d11b      	bne.n	80096d6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096ac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b8:	b2d2      	uxtb	r2, r2
 80096ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	3b01      	subs	r3, #1
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80096d4:	e0c4      	b.n	8009860 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096da:	b29b      	uxth	r3, r3
 80096dc:	2b03      	cmp	r3, #3
 80096de:	d129      	bne.n	8009734 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096ee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d00a      	beq.n	800970c <I2C_MasterReceive_BTF+0x86>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d007      	beq.n	800970c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800970a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800971e:	1c5a      	adds	r2, r3, #1
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009728:	b29b      	uxth	r3, r3
 800972a:	3b01      	subs	r3, #1
 800972c:	b29a      	uxth	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009732:	e095      	b.n	8009860 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009738:	b29b      	uxth	r3, r3
 800973a:	2b02      	cmp	r3, #2
 800973c:	d17d      	bne.n	800983a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d002      	beq.n	800974a <I2C_MasterReceive_BTF+0xc4>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b10      	cmp	r3, #16
 8009748:	d108      	bne.n	800975c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	e016      	b.n	800978a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b04      	cmp	r3, #4
 8009760:	d002      	beq.n	8009768 <I2C_MasterReceive_BTF+0xe2>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2b02      	cmp	r3, #2
 8009766:	d108      	bne.n	800977a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	e007      	b.n	800978a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009788:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	691a      	ldr	r2, [r3, #16]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009794:	b2d2      	uxtb	r2, r2
 8009796:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	3b01      	subs	r3, #1
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691a      	ldr	r2, [r3, #16]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ba:	b2d2      	uxtb	r2, r2
 80097bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80097e4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2220      	movs	r2, #32
 80097ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b40      	cmp	r3, #64	@ 0x40
 80097f8:	d10a      	bne.n	8009810 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff fcac 	bl	8009166 <HAL_I2C_MemRxCpltCallback>
}
 800980e:	e027      	b.n	8009860 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b08      	cmp	r3, #8
 800981c:	d002      	beq.n	8009824 <I2C_MasterReceive_BTF+0x19e>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b20      	cmp	r3, #32
 8009822:	d103      	bne.n	800982c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	631a      	str	r2, [r3, #48]	@ 0x30
 800982a:	e002      	b.n	8009832 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2212      	movs	r2, #18
 8009830:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff fc61 	bl	80090fa <HAL_I2C_MasterRxCpltCallback>
}
 8009838:	e012      	b.n	8009860 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	691a      	ldr	r2, [r3, #16]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009844:	b2d2      	uxtb	r2, r2
 8009846:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009856:	b29b      	uxth	r3, r3
 8009858:	3b01      	subs	r3, #1
 800985a:	b29a      	uxth	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009860:	bf00      	nop
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b40      	cmp	r3, #64	@ 0x40
 800987a:	d117      	bne.n	80098ac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009880:	2b00      	cmp	r3, #0
 8009882:	d109      	bne.n	8009898 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009888:	b2db      	uxtb	r3, r3
 800988a:	461a      	mov	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009894:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009896:	e067      	b.n	8009968 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800989c:	b2db      	uxtb	r3, r3
 800989e:	f043 0301 	orr.w	r3, r3, #1
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	611a      	str	r2, [r3, #16]
}
 80098aa:	e05d      	b.n	8009968 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098b4:	d133      	bne.n	800991e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b21      	cmp	r3, #33	@ 0x21
 80098c0:	d109      	bne.n	80098d6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80098d2:	611a      	str	r2, [r3, #16]
 80098d4:	e008      	b.n	80098e8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	f043 0301 	orr.w	r3, r3, #1
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d004      	beq.n	80098fa <I2C_Master_SB+0x92>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d108      	bne.n	800990c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d032      	beq.n	8009968 <I2C_Master_SB+0x100>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009908:	2b00      	cmp	r3, #0
 800990a:	d02d      	beq.n	8009968 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800991a:	605a      	str	r2, [r3, #4]
}
 800991c:	e024      	b.n	8009968 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10e      	bne.n	8009944 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800992a:	b29b      	uxth	r3, r3
 800992c:	11db      	asrs	r3, r3, #7
 800992e:	b2db      	uxtb	r3, r3
 8009930:	f003 0306 	and.w	r3, r3, #6
 8009934:	b2db      	uxtb	r3, r3
 8009936:	f063 030f 	orn	r3, r3, #15
 800993a:	b2da      	uxtb	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	611a      	str	r2, [r3, #16]
}
 8009942:	e011      	b.n	8009968 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009948:	2b01      	cmp	r3, #1
 800994a:	d10d      	bne.n	8009968 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009950:	b29b      	uxth	r3, r3
 8009952:	11db      	asrs	r3, r3, #7
 8009954:	b2db      	uxtb	r3, r3
 8009956:	f003 0306 	and.w	r3, r3, #6
 800995a:	b2db      	uxtb	r3, r3
 800995c:	f063 030e 	orn	r3, r3, #14
 8009960:	b2da      	uxtb	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	611a      	str	r2, [r3, #16]
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009980:	b2da      	uxtb	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <I2C_Master_ADD10+0x26>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d108      	bne.n	80099ac <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00c      	beq.n	80099bc <I2C_Master_ADD10+0x48>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d007      	beq.n	80099bc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099ba:	605a      	str	r2, [r3, #4]
  }
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b091      	sub	sp, #68	@ 0x44
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80099d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099de:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099e4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b22      	cmp	r3, #34	@ 0x22
 80099f0:	f040 8169 	bne.w	8009cc6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10f      	bne.n	8009a1c <I2C_Master_ADDR+0x54>
 80099fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009a00:	2b40      	cmp	r3, #64	@ 0x40
 8009a02:	d10b      	bne.n	8009a1c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a04:	2300      	movs	r3, #0
 8009a06:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1a:	e160      	b.n	8009cde <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d11d      	bne.n	8009a60 <I2C_Master_ADDR+0x98>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009a2c:	d118      	bne.n	8009a60 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a2e:	2300      	movs	r3, #0
 8009a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a52:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a5e:	e13e      	b.n	8009cde <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d113      	bne.n	8009a92 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	e115      	b.n	8009cbe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	f040 808a 	bne.w	8009bb2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009aa4:	d137      	bne.n	8009b16 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ab4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ac4:	d113      	bne.n	8009aee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ad4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aec:	e0e7      	b.n	8009cbe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aee:	2300      	movs	r3, #0
 8009af0:	623b      	str	r3, [r7, #32]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	623b      	str	r3, [r7, #32]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	623b      	str	r3, [r7, #32]
 8009b02:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	e0d3      	b.n	8009cbe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d02e      	beq.n	8009b7a <I2C_Master_ADDR+0x1b2>
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	2b20      	cmp	r3, #32
 8009b20:	d02b      	beq.n	8009b7a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b24:	2b12      	cmp	r3, #18
 8009b26:	d102      	bne.n	8009b2e <I2C_Master_ADDR+0x166>
 8009b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d125      	bne.n	8009b7a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b30:	2b04      	cmp	r3, #4
 8009b32:	d00e      	beq.n	8009b52 <I2C_Master_ADDR+0x18a>
 8009b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d00b      	beq.n	8009b52 <I2C_Master_ADDR+0x18a>
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3c:	2b10      	cmp	r3, #16
 8009b3e:	d008      	beq.n	8009b52 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	e007      	b.n	8009b62 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009b60:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b62:	2300      	movs	r3, #0
 8009b64:	61fb      	str	r3, [r7, #28]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	695b      	ldr	r3, [r3, #20]
 8009b6c:	61fb      	str	r3, [r7, #28]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	61fb      	str	r3, [r7, #28]
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	e0a1      	b.n	8009cbe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b88:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61bb      	str	r3, [r7, #24]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	695b      	ldr	r3, [r3, #20]
 8009b94:	61bb      	str	r3, [r7, #24]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	e085      	b.n	8009cbe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d14d      	bne.n	8009c58 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	d016      	beq.n	8009bf0 <I2C_Master_ADDR+0x228>
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d013      	beq.n	8009bf0 <I2C_Master_ADDR+0x228>
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bca:	2b10      	cmp	r3, #16
 8009bcc:	d010      	beq.n	8009bf0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bdc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	e007      	b.n	8009c00 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009bfe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c0e:	d117      	bne.n	8009c40 <I2C_Master_ADDR+0x278>
 8009c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c16:	d00b      	beq.n	8009c30 <I2C_Master_ADDR+0x268>
 8009c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d008      	beq.n	8009c30 <I2C_Master_ADDR+0x268>
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c20:	2b08      	cmp	r3, #8
 8009c22:	d005      	beq.n	8009c30 <I2C_Master_ADDR+0x268>
 8009c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c26:	2b10      	cmp	r3, #16
 8009c28:	d002      	beq.n	8009c30 <I2C_Master_ADDR+0x268>
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d107      	bne.n	8009c40 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c40:	2300      	movs	r3, #0
 8009c42:	617b      	str	r3, [r7, #20]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	617b      	str	r3, [r7, #20]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	617b      	str	r3, [r7, #20]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	e032      	b.n	8009cbe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c66:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c76:	d117      	bne.n	8009ca8 <I2C_Master_ADDR+0x2e0>
 8009c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c7e:	d00b      	beq.n	8009c98 <I2C_Master_ADDR+0x2d0>
 8009c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d008      	beq.n	8009c98 <I2C_Master_ADDR+0x2d0>
 8009c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d005      	beq.n	8009c98 <I2C_Master_ADDR+0x2d0>
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8e:	2b10      	cmp	r3, #16
 8009c90:	d002      	beq.n	8009c98 <I2C_Master_ADDR+0x2d0>
 8009c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c94:	2b20      	cmp	r3, #32
 8009c96:	d107      	bne.n	8009ca8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009ca6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ca8:	2300      	movs	r3, #0
 8009caa:	613b      	str	r3, [r7, #16]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	613b      	str	r3, [r7, #16]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	613b      	str	r3, [r7, #16]
 8009cbc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009cc4:	e00b      	b.n	8009cde <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	60fb      	str	r3, [r7, #12]
 8009cda:	68fb      	ldr	r3, [r7, #12]
}
 8009cdc:	e7ff      	b.n	8009cde <I2C_Master_ADDR+0x316>
 8009cde:	bf00      	nop
 8009ce0:	3744      	adds	r7, #68	@ 0x44
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cf8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d02b      	beq.n	8009d5c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d08:	781a      	ldrb	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	3b01      	subs	r3, #1
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d114      	bne.n	8009d5c <I2C_SlaveTransmit_TXE+0x72>
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	2b29      	cmp	r3, #41	@ 0x29
 8009d36:	d111      	bne.n	8009d5c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2221      	movs	r2, #33	@ 0x21
 8009d4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2228      	movs	r2, #40	@ 0x28
 8009d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff f9d9 	bl	800910e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009d5c:	bf00      	nop
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d011      	beq.n	8009d9a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d7a:	781a      	ldrb	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d86:	1c5a      	adds	r2, r3, #1
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	3b01      	subs	r3, #1
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009d9a:	bf00      	nop
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009db4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d02c      	beq.n	8009e1a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	691a      	ldr	r2, [r3, #16]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d114      	bne.n	8009e1a <I2C_SlaveReceive_RXNE+0x74>
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009df4:	d111      	bne.n	8009e1a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2222      	movs	r2, #34	@ 0x22
 8009e0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2228      	movs	r2, #40	@ 0x28
 8009e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff f984 	bl	8009122 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009e1a:	bf00      	nop
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d012      	beq.n	8009e5a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	691a      	ldr	r2, [r3, #16]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3e:	b2d2      	uxtb	r2, r2
 8009e40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009e80:	2b28      	cmp	r3, #40	@ 0x28
 8009e82:	d125      	bne.n	8009ed0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e92:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d101      	bne.n	8009ea2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d103      	bne.n	8009eb4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	81bb      	strh	r3, [r7, #12]
 8009eb2:	e002      	b.n	8009eba <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009ec2:	89ba      	ldrh	r2, [r7, #12]
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff f934 	bl	8009136 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009ece:	e00e      	b.n	8009eee <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60bb      	str	r3, [r7, #8]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	60bb      	str	r3, [r7, #8]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	60bb      	str	r3, [r7, #8]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8009eee:	bf00      	nop
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009f16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60bb      	str	r3, [r7, #8]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	60bb      	str	r3, [r7, #8]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f042 0201 	orr.w	r2, r2, #1
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f54:	d172      	bne.n	800a03c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
 8009f58:	2b22      	cmp	r3, #34	@ 0x22
 8009f5a:	d002      	beq.n	8009f62 <I2C_Slave_STOPF+0x6a>
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f60:	d135      	bne.n	8009fce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d005      	beq.n	8009f86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7e:	f043 0204 	orr.w	r2, r3, #4
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe f8d6 	bl	800814c <HAL_DMA_GetState>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d049      	beq.n	800a03a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009faa:	4a69      	ldr	r2, [pc, #420]	@ (800a150 <I2C_Slave_STOPF+0x258>)
 8009fac:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fd ff1e 	bl	8007df4 <HAL_DMA_Abort_IT>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d03d      	beq.n	800a03a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009fc8:	4610      	mov	r0, r2
 8009fca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fcc:	e035      	b.n	800a03a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d005      	beq.n	8009ff2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fea:	f043 0204 	orr.w	r2, r3, #4
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a000:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe f8a0 	bl	800814c <HAL_DMA_GetState>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d014      	beq.n	800a03c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a016:	4a4e      	ldr	r2, [pc, #312]	@ (800a150 <I2C_Slave_STOPF+0x258>)
 800a018:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fd fee8 	bl	8007df4 <HAL_DMA_Abort_IT>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d008      	beq.n	800a03c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a02e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a034:	4610      	mov	r0, r2
 800a036:	4798      	blx	r3
 800a038:	e000      	b.n	800a03c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a03a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a040:	b29b      	uxth	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d03e      	beq.n	800a0c4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b04      	cmp	r3, #4
 800a052:	d112      	bne.n	800a07a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	691a      	ldr	r2, [r3, #16]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05e:	b2d2      	uxtb	r2, r2
 800a060:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a070:	b29b      	uxth	r3, r3
 800a072:	3b01      	subs	r3, #1
 800a074:	b29a      	uxth	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a084:	2b40      	cmp	r3, #64	@ 0x40
 800a086:	d112      	bne.n	800a0ae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	691a      	ldr	r2, [r3, #16]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a092:	b2d2      	uxtb	r2, r2
 800a094:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d005      	beq.n	800a0c4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0bc:	f043 0204 	orr.w	r2, r3, #4
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f843 	bl	800a158 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a0d2:	e039      	b.n	800a148 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0d8:	d109      	bne.n	800a0ee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2228      	movs	r2, #40	@ 0x28
 800a0e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff f81a 	bl	8009122 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b28      	cmp	r3, #40	@ 0x28
 800a0f8:	d111      	bne.n	800a11e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a15      	ldr	r2, [pc, #84]	@ (800a154 <I2C_Slave_STOPF+0x25c>)
 800a0fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2220      	movs	r2, #32
 800a10a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7ff f81b 	bl	8009152 <HAL_I2C_ListenCpltCallback>
}
 800a11c:	e014      	b.n	800a148 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a122:	2b22      	cmp	r3, #34	@ 0x22
 800a124:	d002      	beq.n	800a12c <I2C_Slave_STOPF+0x234>
 800a126:	7bfb      	ldrb	r3, [r7, #15]
 800a128:	2b22      	cmp	r3, #34	@ 0x22
 800a12a:	d10d      	bne.n	800a148 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2220      	movs	r2, #32
 800a136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7fe ffed 	bl	8009122 <HAL_I2C_SlaveRxCpltCallback>
}
 800a148:	bf00      	nop
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	0800a721 	.word	0x0800a721
 800a154:	ffff0000 	.word	0xffff0000

0800a158 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a166:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a16e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a170:	7bbb      	ldrb	r3, [r7, #14]
 800a172:	2b10      	cmp	r3, #16
 800a174:	d002      	beq.n	800a17c <I2C_ITError+0x24>
 800a176:	7bbb      	ldrb	r3, [r7, #14]
 800a178:	2b40      	cmp	r3, #64	@ 0x40
 800a17a:	d10a      	bne.n	800a192 <I2C_ITError+0x3a>
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	2b22      	cmp	r3, #34	@ 0x22
 800a180:	d107      	bne.n	800a192 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a190:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a192:	7bfb      	ldrb	r3, [r7, #15]
 800a194:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a198:	2b28      	cmp	r3, #40	@ 0x28
 800a19a:	d107      	bne.n	800a1ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2228      	movs	r2, #40	@ 0x28
 800a1a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a1aa:	e015      	b.n	800a1d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1ba:	d00a      	beq.n	800a1d2 <I2C_ITError+0x7a>
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
 800a1be:	2b60      	cmp	r3, #96	@ 0x60
 800a1c0:	d007      	beq.n	800a1d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1e6:	d162      	bne.n	800a2ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a1f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b01      	cmp	r3, #1
 800a204:	d020      	beq.n	800a248 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a20a:	4a6a      	ldr	r2, [pc, #424]	@ (800a3b4 <I2C_ITError+0x25c>)
 800a20c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a212:	4618      	mov	r0, r3
 800a214:	f7fd fdee 	bl	8007df4 <HAL_DMA_Abort_IT>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8089 	beq.w	800a332 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f022 0201 	bic.w	r2, r2, #1
 800a22e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2220      	movs	r2, #32
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a23c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a242:	4610      	mov	r0, r2
 800a244:	4798      	blx	r3
 800a246:	e074      	b.n	800a332 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a24c:	4a59      	ldr	r2, [pc, #356]	@ (800a3b4 <I2C_ITError+0x25c>)
 800a24e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a254:	4618      	mov	r0, r3
 800a256:	f7fd fdcd 	bl	8007df4 <HAL_DMA_Abort_IT>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d068      	beq.n	800a332 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a26a:	2b40      	cmp	r3, #64	@ 0x40
 800a26c:	d10b      	bne.n	800a286 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	691a      	ldr	r2, [r3, #16]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a278:	b2d2      	uxtb	r2, r2
 800a27a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 0201 	bic.w	r2, r2, #1
 800a294:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2220      	movs	r2, #32
 800a29a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4798      	blx	r3
 800a2ac:	e041      	b.n	800a332 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b60      	cmp	r3, #96	@ 0x60
 800a2b8:	d125      	bne.n	800a306 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d2:	2b40      	cmp	r3, #64	@ 0x40
 800a2d4:	d10b      	bne.n	800a2ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	691a      	ldr	r2, [r3, #16]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e0:	b2d2      	uxtb	r2, r2
 800a2e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f022 0201 	bic.w	r2, r2, #1
 800a2fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7fe ff45 	bl	800918e <HAL_I2C_AbortCpltCallback>
 800a304:	e015      	b.n	800a332 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a310:	2b40      	cmp	r3, #64	@ 0x40
 800a312:	d10b      	bne.n	800a32c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	691a      	ldr	r2, [r3, #16]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a31e:	b2d2      	uxtb	r2, r2
 800a320:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7fe ff24 	bl	800917a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a336:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10e      	bne.n	800a360 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d109      	bne.n	800a360 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a352:	2b00      	cmp	r3, #0
 800a354:	d104      	bne.n	800a360 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d007      	beq.n	800a370 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a36e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a376:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b04      	cmp	r3, #4
 800a382:	d113      	bne.n	800a3ac <I2C_ITError+0x254>
 800a384:	7bfb      	ldrb	r3, [r7, #15]
 800a386:	2b28      	cmp	r3, #40	@ 0x28
 800a388:	d110      	bne.n	800a3ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a0a      	ldr	r2, [pc, #40]	@ (800a3b8 <I2C_ITError+0x260>)
 800a38e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2220      	movs	r2, #32
 800a39a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7fe fed3 	bl	8009152 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a3ac:	bf00      	nop
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	0800a721 	.word	0x0800a721
 800a3b8:	ffff0000 	.word	0xffff0000

0800a3bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b088      	sub	sp, #32
 800a3c0:	af02      	add	r7, sp, #8
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	817b      	strh	r3, [r7, #10]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	813b      	strh	r3, [r7, #8]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a3e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 fa3c 	bl	800a870 <I2C_WaitOnFlagUntilTimeout>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00d      	beq.n	800a41a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a40c:	d103      	bne.n	800a416 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a414:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e05f      	b.n	800a4da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a41a:	897b      	ldrh	r3, [r7, #10]
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	461a      	mov	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a428:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42c:	6a3a      	ldr	r2, [r7, #32]
 800a42e:	492d      	ldr	r1, [pc, #180]	@ (800a4e4 <I2C_RequestMemoryWrite+0x128>)
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 fa97 	bl	800a964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e04c      	b.n	800a4da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a440:	2300      	movs	r3, #0
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	617b      	str	r3, [r7, #20]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	617b      	str	r3, [r7, #20]
 800a454:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a458:	6a39      	ldr	r1, [r7, #32]
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 fb22 	bl	800aaa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00d      	beq.n	800a482 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a46a:	2b04      	cmp	r3, #4
 800a46c:	d107      	bne.n	800a47e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a47c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e02b      	b.n	800a4da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a482:	88fb      	ldrh	r3, [r7, #6]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d105      	bne.n	800a494 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a488:	893b      	ldrh	r3, [r7, #8]
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	611a      	str	r2, [r3, #16]
 800a492:	e021      	b.n	800a4d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a494:	893b      	ldrh	r3, [r7, #8]
 800a496:	0a1b      	lsrs	r3, r3, #8
 800a498:	b29b      	uxth	r3, r3
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4a4:	6a39      	ldr	r1, [r7, #32]
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f000 fafc 	bl	800aaa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00d      	beq.n	800a4ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d107      	bne.n	800a4ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e005      	b.n	800a4da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a4ce:	893b      	ldrh	r3, [r7, #8]
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	00010002 	.word	0x00010002

0800a4e8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4fc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a504:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	685a      	ldr	r2, [r3, #4]
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a51a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a528:	2200      	movs	r2, #0
 800a52a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a538:	2200      	movs	r2, #0
 800a53a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800a53c:	7cfb      	ldrb	r3, [r7, #19]
 800a53e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800a542:	2b21      	cmp	r3, #33	@ 0x21
 800a544:	d007      	beq.n	800a556 <I2C_DMAXferCplt+0x6e>
 800a546:	7cfb      	ldrb	r3, [r7, #19]
 800a548:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800a54c:	2b22      	cmp	r3, #34	@ 0x22
 800a54e:	d131      	bne.n	800a5b4 <I2C_DMAXferCplt+0xcc>
 800a550:	7cbb      	ldrb	r3, [r7, #18]
 800a552:	2b20      	cmp	r3, #32
 800a554:	d12e      	bne.n	800a5b4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a564:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2200      	movs	r2, #0
 800a56a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a56c:	7cfb      	ldrb	r3, [r7, #19]
 800a56e:	2b29      	cmp	r3, #41	@ 0x29
 800a570:	d10a      	bne.n	800a588 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	2221      	movs	r2, #33	@ 0x21
 800a576:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2228      	movs	r2, #40	@ 0x28
 800a57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a580:	6978      	ldr	r0, [r7, #20]
 800a582:	f7fe fdc4 	bl	800910e <HAL_I2C_SlaveTxCpltCallback>
 800a586:	e00c      	b.n	800a5a2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a588:	7cfb      	ldrb	r3, [r7, #19]
 800a58a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a58c:	d109      	bne.n	800a5a2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	2222      	movs	r2, #34	@ 0x22
 800a592:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	2228      	movs	r2, #40	@ 0x28
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a59c:	6978      	ldr	r0, [r7, #20]
 800a59e:	f7fe fdc0 	bl	8009122 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800a5b0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a5b2:	e074      	b.n	800a69e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d06e      	beq.n	800a69e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d107      	bne.n	800a5da <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5d8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a5e8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a5f0:	d009      	beq.n	800a606 <I2C_DMAXferCplt+0x11e>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2b08      	cmp	r3, #8
 800a5f6:	d006      	beq.n	800a606 <I2C_DMAXferCplt+0x11e>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a5fe:	d002      	beq.n	800a606 <I2C_DMAXferCplt+0x11e>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b20      	cmp	r3, #32
 800a604:	d107      	bne.n	800a616 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a614:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a624:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a634:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	2200      	movs	r2, #0
 800a63a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a640:	2b00      	cmp	r3, #0
 800a642:	d003      	beq.n	800a64c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800a644:	6978      	ldr	r0, [r7, #20]
 800a646:	f7fe fd98 	bl	800917a <HAL_I2C_ErrorCallback>
}
 800a64a:	e028      	b.n	800a69e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	2220      	movs	r2, #32
 800a650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	2b40      	cmp	r3, #64	@ 0x40
 800a65e:	d10a      	bne.n	800a676 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	2200      	movs	r2, #0
 800a66c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800a66e:	6978      	ldr	r0, [r7, #20]
 800a670:	f7fe fd79 	bl	8009166 <HAL_I2C_MemRxCpltCallback>
}
 800a674:	e013      	b.n	800a69e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2b08      	cmp	r3, #8
 800a682:	d002      	beq.n	800a68a <I2C_DMAXferCplt+0x1a2>
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b20      	cmp	r3, #32
 800a688:	d103      	bne.n	800a692 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	2200      	movs	r2, #0
 800a68e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a690:	e002      	b.n	800a698 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2212      	movs	r2, #18
 800a696:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800a698:	6978      	ldr	r0, [r7, #20]
 800a69a:	f7fe fd2e 	bl	80090fa <HAL_I2C_MasterRxCpltCallback>
}
 800a69e:	bf00      	nop
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b084      	sub	sp, #16
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d003      	beq.n	800a6d4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7fd fd47 	bl	8008168 <HAL_DMA_GetError>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d01b      	beq.n	800a718 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6ee:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a70a:	f043 0210 	orr.w	r2, r3, #16
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7fe fd31 	bl	800917a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a718:	bf00      	nop
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a728:	2300      	movs	r3, #0
 800a72a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a730:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a738:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a73a:	4b4b      	ldr	r3, [pc, #300]	@ (800a868 <I2C_DMAAbort+0x148>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	08db      	lsrs	r3, r3, #3
 800a740:	4a4a      	ldr	r2, [pc, #296]	@ (800a86c <I2C_DMAAbort+0x14c>)
 800a742:	fba2 2303 	umull	r2, r3, r2, r3
 800a746:	0a1a      	lsrs	r2, r3, #8
 800a748:	4613      	mov	r3, r2
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4413      	add	r3, r2
 800a74e:	00da      	lsls	r2, r3, #3
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d106      	bne.n	800a768 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a75e:	f043 0220 	orr.w	r2, r3, #32
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a766:	e00a      	b.n	800a77e <I2C_DMAAbort+0x5e>
    }
    count--;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a77c:	d0ea      	beq.n	800a754 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a782:	2b00      	cmp	r3, #0
 800a784:	d003      	beq.n	800a78e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a78a:	2200      	movs	r2, #0
 800a78c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a79a:	2200      	movs	r2, #0
 800a79c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f022 0201 	bic.w	r2, r2, #1
 800a7e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b60      	cmp	r3, #96	@ 0x60
 800a7ee:	d10e      	bne.n	800a80e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	2200      	movs	r2, #0
 800a804:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a806:	6978      	ldr	r0, [r7, #20]
 800a808:	f7fe fcc1 	bl	800918e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a80c:	e027      	b.n	800a85e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a80e:	7cfb      	ldrb	r3, [r7, #19]
 800a810:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a814:	2b28      	cmp	r3, #40	@ 0x28
 800a816:	d117      	bne.n	800a848 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f042 0201 	orr.w	r2, r2, #1
 800a826:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a836:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2200      	movs	r2, #0
 800a83c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	2228      	movs	r2, #40	@ 0x28
 800a842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a846:	e007      	b.n	800a858 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2220      	movs	r2, #32
 800a84c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a858:	6978      	ldr	r0, [r7, #20]
 800a85a:	f7fe fc8e 	bl	800917a <HAL_I2C_ErrorCallback>
}
 800a85e:	bf00      	nop
 800a860:	3718      	adds	r7, #24
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	20000018 	.word	0x20000018
 800a86c:	14f8b589 	.word	0x14f8b589

0800a870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	603b      	str	r3, [r7, #0]
 800a87c:	4613      	mov	r3, r2
 800a87e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a880:	e048      	b.n	800a914 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a888:	d044      	beq.n	800a914 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a88a:	f7fc fb45 	bl	8006f18 <HAL_GetTick>
 800a88e:	4602      	mov	r2, r0
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d302      	bcc.n	800a8a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d139      	bne.n	800a914 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	0c1b      	lsrs	r3, r3, #16
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d10d      	bne.n	800a8c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	695b      	ldr	r3, [r3, #20]
 800a8b0:	43da      	mvns	r2, r3
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	bf0c      	ite	eq
 800a8bc:	2301      	moveq	r3, #1
 800a8be:	2300      	movne	r3, #0
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	e00c      	b.n	800a8e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	43da      	mvns	r2, r3
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	bf0c      	ite	eq
 800a8d8:	2301      	moveq	r3, #1
 800a8da:	2300      	movne	r3, #0
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	461a      	mov	r2, r3
 800a8e0:	79fb      	ldrb	r3, [r7, #7]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d116      	bne.n	800a914 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a900:	f043 0220 	orr.w	r2, r3, #32
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	e023      	b.n	800a95c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	0c1b      	lsrs	r3, r3, #16
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d10d      	bne.n	800a93a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	43da      	mvns	r2, r3
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	4013      	ands	r3, r2
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	bf0c      	ite	eq
 800a930:	2301      	moveq	r3, #1
 800a932:	2300      	movne	r3, #0
 800a934:	b2db      	uxtb	r3, r3
 800a936:	461a      	mov	r2, r3
 800a938:	e00c      	b.n	800a954 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	43da      	mvns	r2, r3
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	4013      	ands	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	2b00      	cmp	r3, #0
 800a94a:	bf0c      	ite	eq
 800a94c:	2301      	moveq	r3, #1
 800a94e:	2300      	movne	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	461a      	mov	r2, r3
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	429a      	cmp	r2, r3
 800a958:	d093      	beq.n	800a882 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
 800a970:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a972:	e071      	b.n	800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a97e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a982:	d123      	bne.n	800a9cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a992:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a99c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2220      	movs	r2, #32
 800a9a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b8:	f043 0204 	orr.w	r2, r3, #4
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e067      	b.n	800aa9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d2:	d041      	beq.n	800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9d4:	f7fc faa0 	bl	8006f18 <HAL_GetTick>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d302      	bcc.n	800a9ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d136      	bne.n	800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	0c1b      	lsrs	r3, r3, #16
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d10c      	bne.n	800aa0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	43da      	mvns	r2, r3
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	4013      	ands	r3, r2
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	bf14      	ite	ne
 800aa06:	2301      	movne	r3, #1
 800aa08:	2300      	moveq	r3, #0
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	e00b      	b.n	800aa26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	43da      	mvns	r2, r3
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	4013      	ands	r3, r2
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	bf14      	ite	ne
 800aa20:	2301      	movne	r3, #1
 800aa22:	2300      	moveq	r3, #0
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d016      	beq.n	800aa58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2220      	movs	r2, #32
 800aa34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa44:	f043 0220 	orr.w	r2, r3, #32
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e021      	b.n	800aa9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	0c1b      	lsrs	r3, r3, #16
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d10c      	bne.n	800aa7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	43da      	mvns	r2, r3
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	bf14      	ite	ne
 800aa74:	2301      	movne	r3, #1
 800aa76:	2300      	moveq	r3, #0
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	e00b      	b.n	800aa94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	43da      	mvns	r2, r3
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	4013      	ands	r3, r2
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	bf14      	ite	ne
 800aa8e:	2301      	movne	r3, #1
 800aa90:	2300      	moveq	r3, #0
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f47f af6d 	bne.w	800a974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aab0:	e034      	b.n	800ab1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f000 f8b8 	bl	800ac28 <I2C_IsAcknowledgeFailed>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e034      	b.n	800ab2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac8:	d028      	beq.n	800ab1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaca:	f7fc fa25 	bl	8006f18 <HAL_GetTick>
 800aace:	4602      	mov	r2, r0
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d302      	bcc.n	800aae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d11d      	bne.n	800ab1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaea:	2b80      	cmp	r3, #128	@ 0x80
 800aaec:	d016      	beq.n	800ab1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2220      	movs	r2, #32
 800aaf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab08:	f043 0220 	orr.w	r2, r3, #32
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e007      	b.n	800ab2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab26:	2b80      	cmp	r3, #128	@ 0x80
 800ab28:	d1c3      	bne.n	800aab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab40:	e034      	b.n	800abac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f000 f870 	bl	800ac28 <I2C_IsAcknowledgeFailed>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e034      	b.n	800abbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab58:	d028      	beq.n	800abac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab5a:	f7fc f9dd 	bl	8006f18 <HAL_GetTick>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d302      	bcc.n	800ab70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d11d      	bne.n	800abac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	f003 0304 	and.w	r3, r3, #4
 800ab7a:	2b04      	cmp	r3, #4
 800ab7c:	d016      	beq.n	800abac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2220      	movs	r2, #32
 800ab88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab98:	f043 0220 	orr.w	r2, r3, #32
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e007      	b.n	800abbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b04      	cmp	r3, #4
 800abb8:	d1c3      	bne.n	800ab42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abcc:	2300      	movs	r3, #0
 800abce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800abd0:	4b13      	ldr	r3, [pc, #76]	@ (800ac20 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	08db      	lsrs	r3, r3, #3
 800abd6:	4a13      	ldr	r2, [pc, #76]	@ (800ac24 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800abd8:	fba2 2303 	umull	r2, r3, r2, r3
 800abdc:	0a1a      	lsrs	r2, r3, #8
 800abde:	4613      	mov	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	3b01      	subs	r3, #1
 800abea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d107      	bne.n	800ac02 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abf6:	f043 0220 	orr.w	r2, r3, #32
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e008      	b.n	800ac14 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac10:	d0e9      	beq.n	800abe6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	20000018 	.word	0x20000018
 800ac24:	14f8b589 	.word	0x14f8b589

0800ac28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac3e:	d11b      	bne.n	800ac78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ac48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2220      	movs	r2, #32
 800ac54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac64:	f043 0204 	orr.w	r2, r3, #4
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e000      	b.n	800ac7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	370c      	adds	r7, #12
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ac86:	b480      	push	{r7}
 800ac88:	b083      	sub	sp, #12
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac92:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800ac96:	d103      	bne.n	800aca0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ac9e:	e007      	b.n	800acb0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800aca8:	d102      	bne.n	800acb0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2208      	movs	r2, #8
 800acae:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d101      	bne.n	800acce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e267      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d075      	beq.n	800adc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800acda:	4b88      	ldr	r3, [pc, #544]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f003 030c 	and.w	r3, r3, #12
 800ace2:	2b04      	cmp	r3, #4
 800ace4:	d00c      	beq.n	800ad00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ace6:	4b85      	ldr	r3, [pc, #532]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800acee:	2b08      	cmp	r3, #8
 800acf0:	d112      	bne.n	800ad18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acf2:	4b82      	ldr	r3, [pc, #520]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800acfe:	d10b      	bne.n	800ad18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad00:	4b7e      	ldr	r3, [pc, #504]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d05b      	beq.n	800adc4 <HAL_RCC_OscConfig+0x108>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d157      	bne.n	800adc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e242      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad20:	d106      	bne.n	800ad30 <HAL_RCC_OscConfig+0x74>
 800ad22:	4b76      	ldr	r3, [pc, #472]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a75      	ldr	r2, [pc, #468]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad2c:	6013      	str	r3, [r2, #0]
 800ad2e:	e01d      	b.n	800ad6c <HAL_RCC_OscConfig+0xb0>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad38:	d10c      	bne.n	800ad54 <HAL_RCC_OscConfig+0x98>
 800ad3a:	4b70      	ldr	r3, [pc, #448]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a6f      	ldr	r2, [pc, #444]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad44:	6013      	str	r3, [r2, #0]
 800ad46:	4b6d      	ldr	r3, [pc, #436]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a6c      	ldr	r2, [pc, #432]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad50:	6013      	str	r3, [r2, #0]
 800ad52:	e00b      	b.n	800ad6c <HAL_RCC_OscConfig+0xb0>
 800ad54:	4b69      	ldr	r3, [pc, #420]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a68      	ldr	r2, [pc, #416]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	4b66      	ldr	r3, [pc, #408]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a65      	ldr	r2, [pc, #404]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d013      	beq.n	800ad9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad74:	f7fc f8d0 	bl	8006f18 <HAL_GetTick>
 800ad78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad7a:	e008      	b.n	800ad8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad7c:	f7fc f8cc 	bl	8006f18 <HAL_GetTick>
 800ad80:	4602      	mov	r2, r0
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	2b64      	cmp	r3, #100	@ 0x64
 800ad88:	d901      	bls.n	800ad8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e207      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad8e:	4b5b      	ldr	r3, [pc, #364]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d0f0      	beq.n	800ad7c <HAL_RCC_OscConfig+0xc0>
 800ad9a:	e014      	b.n	800adc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad9c:	f7fc f8bc 	bl	8006f18 <HAL_GetTick>
 800ada0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ada2:	e008      	b.n	800adb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ada4:	f7fc f8b8 	bl	8006f18 <HAL_GetTick>
 800ada8:	4602      	mov	r2, r0
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	2b64      	cmp	r3, #100	@ 0x64
 800adb0:	d901      	bls.n	800adb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e1f3      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800adb6:	4b51      	ldr	r3, [pc, #324]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1f0      	bne.n	800ada4 <HAL_RCC_OscConfig+0xe8>
 800adc2:	e000      	b.n	800adc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800adc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d063      	beq.n	800ae9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800add2:	4b4a      	ldr	r3, [pc, #296]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f003 030c 	and.w	r3, r3, #12
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00b      	beq.n	800adf6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adde:	4b47      	ldr	r3, [pc, #284]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ade6:	2b08      	cmp	r3, #8
 800ade8:	d11c      	bne.n	800ae24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adea:	4b44      	ldr	r3, [pc, #272]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d116      	bne.n	800ae24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adf6:	4b41      	ldr	r3, [pc, #260]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 0302 	and.w	r3, r3, #2
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d005      	beq.n	800ae0e <HAL_RCC_OscConfig+0x152>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d001      	beq.n	800ae0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e1c7      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae0e:	4b3b      	ldr	r3, [pc, #236]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	4937      	ldr	r1, [pc, #220]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae22:	e03a      	b.n	800ae9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d020      	beq.n	800ae6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae2c:	4b34      	ldr	r3, [pc, #208]	@ (800af00 <HAL_RCC_OscConfig+0x244>)
 800ae2e:	2201      	movs	r2, #1
 800ae30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae32:	f7fc f871 	bl	8006f18 <HAL_GetTick>
 800ae36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae38:	e008      	b.n	800ae4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae3a:	f7fc f86d 	bl	8006f18 <HAL_GetTick>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d901      	bls.n	800ae4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	e1a8      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae4c:	4b2b      	ldr	r3, [pc, #172]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0302 	and.w	r3, r3, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d0f0      	beq.n	800ae3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae58:	4b28      	ldr	r3, [pc, #160]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	4925      	ldr	r1, [pc, #148]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	600b      	str	r3, [r1, #0]
 800ae6c:	e015      	b.n	800ae9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae6e:	4b24      	ldr	r3, [pc, #144]	@ (800af00 <HAL_RCC_OscConfig+0x244>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae74:	f7fc f850 	bl	8006f18 <HAL_GetTick>
 800ae78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae7a:	e008      	b.n	800ae8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae7c:	f7fc f84c 	bl	8006f18 <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d901      	bls.n	800ae8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e187      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae8e:	4b1b      	ldr	r3, [pc, #108]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0302 	and.w	r3, r3, #2
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1f0      	bne.n	800ae7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 0308 	and.w	r3, r3, #8
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d036      	beq.n	800af14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d016      	beq.n	800aedc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aeae:	4b15      	ldr	r3, [pc, #84]	@ (800af04 <HAL_RCC_OscConfig+0x248>)
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aeb4:	f7fc f830 	bl	8006f18 <HAL_GetTick>
 800aeb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aeba:	e008      	b.n	800aece <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aebc:	f7fc f82c 	bl	8006f18 <HAL_GetTick>
 800aec0:	4602      	mov	r2, r0
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d901      	bls.n	800aece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aeca:	2303      	movs	r3, #3
 800aecc:	e167      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aece:	4b0b      	ldr	r3, [pc, #44]	@ (800aefc <HAL_RCC_OscConfig+0x240>)
 800aed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aed2:	f003 0302 	and.w	r3, r3, #2
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0f0      	beq.n	800aebc <HAL_RCC_OscConfig+0x200>
 800aeda:	e01b      	b.n	800af14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aedc:	4b09      	ldr	r3, [pc, #36]	@ (800af04 <HAL_RCC_OscConfig+0x248>)
 800aede:	2200      	movs	r2, #0
 800aee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aee2:	f7fc f819 	bl	8006f18 <HAL_GetTick>
 800aee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aee8:	e00e      	b.n	800af08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aeea:	f7fc f815 	bl	8006f18 <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d907      	bls.n	800af08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aef8:	2303      	movs	r3, #3
 800aefa:	e150      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
 800aefc:	40023800 	.word	0x40023800
 800af00:	42470000 	.word	0x42470000
 800af04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af08:	4b88      	ldr	r3, [pc, #544]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800af0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af0c:	f003 0302 	and.w	r3, r3, #2
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1ea      	bne.n	800aeea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f000 8097 	beq.w	800b050 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af22:	2300      	movs	r3, #0
 800af24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af26:	4b81      	ldr	r3, [pc, #516]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800af28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10f      	bne.n	800af52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af32:	2300      	movs	r3, #0
 800af34:	60bb      	str	r3, [r7, #8]
 800af36:	4b7d      	ldr	r3, [pc, #500]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800af38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af3a:	4a7c      	ldr	r2, [pc, #496]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800af3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af40:	6413      	str	r3, [r2, #64]	@ 0x40
 800af42:	4b7a      	ldr	r3, [pc, #488]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800af44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af4a:	60bb      	str	r3, [r7, #8]
 800af4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af4e:	2301      	movs	r3, #1
 800af50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af52:	4b77      	ldr	r3, [pc, #476]	@ (800b130 <HAL_RCC_OscConfig+0x474>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d118      	bne.n	800af90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af5e:	4b74      	ldr	r3, [pc, #464]	@ (800b130 <HAL_RCC_OscConfig+0x474>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a73      	ldr	r2, [pc, #460]	@ (800b130 <HAL_RCC_OscConfig+0x474>)
 800af64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af6a:	f7fb ffd5 	bl	8006f18 <HAL_GetTick>
 800af6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af70:	e008      	b.n	800af84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af72:	f7fb ffd1 	bl	8006f18 <HAL_GetTick>
 800af76:	4602      	mov	r2, r0
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d901      	bls.n	800af84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e10c      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af84:	4b6a      	ldr	r3, [pc, #424]	@ (800b130 <HAL_RCC_OscConfig+0x474>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d0f0      	beq.n	800af72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d106      	bne.n	800afa6 <HAL_RCC_OscConfig+0x2ea>
 800af98:	4b64      	ldr	r3, [pc, #400]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800af9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af9c:	4a63      	ldr	r2, [pc, #396]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800af9e:	f043 0301 	orr.w	r3, r3, #1
 800afa2:	6713      	str	r3, [r2, #112]	@ 0x70
 800afa4:	e01c      	b.n	800afe0 <HAL_RCC_OscConfig+0x324>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	2b05      	cmp	r3, #5
 800afac:	d10c      	bne.n	800afc8 <HAL_RCC_OscConfig+0x30c>
 800afae:	4b5f      	ldr	r3, [pc, #380]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800afb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afb2:	4a5e      	ldr	r2, [pc, #376]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800afb4:	f043 0304 	orr.w	r3, r3, #4
 800afb8:	6713      	str	r3, [r2, #112]	@ 0x70
 800afba:	4b5c      	ldr	r3, [pc, #368]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800afbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afbe:	4a5b      	ldr	r2, [pc, #364]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800afc0:	f043 0301 	orr.w	r3, r3, #1
 800afc4:	6713      	str	r3, [r2, #112]	@ 0x70
 800afc6:	e00b      	b.n	800afe0 <HAL_RCC_OscConfig+0x324>
 800afc8:	4b58      	ldr	r3, [pc, #352]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800afca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afcc:	4a57      	ldr	r2, [pc, #348]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800afce:	f023 0301 	bic.w	r3, r3, #1
 800afd2:	6713      	str	r3, [r2, #112]	@ 0x70
 800afd4:	4b55      	ldr	r3, [pc, #340]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800afd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afd8:	4a54      	ldr	r2, [pc, #336]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800afda:	f023 0304 	bic.w	r3, r3, #4
 800afde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d015      	beq.n	800b014 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afe8:	f7fb ff96 	bl	8006f18 <HAL_GetTick>
 800afec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afee:	e00a      	b.n	800b006 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aff0:	f7fb ff92 	bl	8006f18 <HAL_GetTick>
 800aff4:	4602      	mov	r2, r0
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800affe:	4293      	cmp	r3, r2
 800b000:	d901      	bls.n	800b006 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	e0cb      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b006:	4b49      	ldr	r3, [pc, #292]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800b008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d0ee      	beq.n	800aff0 <HAL_RCC_OscConfig+0x334>
 800b012:	e014      	b.n	800b03e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b014:	f7fb ff80 	bl	8006f18 <HAL_GetTick>
 800b018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b01a:	e00a      	b.n	800b032 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b01c:	f7fb ff7c 	bl	8006f18 <HAL_GetTick>
 800b020:	4602      	mov	r2, r0
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d901      	bls.n	800b032 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b02e:	2303      	movs	r3, #3
 800b030:	e0b5      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b032:	4b3e      	ldr	r3, [pc, #248]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800b034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b036:	f003 0302 	and.w	r3, r3, #2
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1ee      	bne.n	800b01c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b03e:	7dfb      	ldrb	r3, [r7, #23]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d105      	bne.n	800b050 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b044:	4b39      	ldr	r3, [pc, #228]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800b046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b048:	4a38      	ldr	r2, [pc, #224]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800b04a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b04e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 80a1 	beq.w	800b19c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b05a:	4b34      	ldr	r3, [pc, #208]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f003 030c 	and.w	r3, r3, #12
 800b062:	2b08      	cmp	r3, #8
 800b064:	d05c      	beq.n	800b120 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d141      	bne.n	800b0f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b06e:	4b31      	ldr	r3, [pc, #196]	@ (800b134 <HAL_RCC_OscConfig+0x478>)
 800b070:	2200      	movs	r2, #0
 800b072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b074:	f7fb ff50 	bl	8006f18 <HAL_GetTick>
 800b078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b07a:	e008      	b.n	800b08e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b07c:	f7fb ff4c 	bl	8006f18 <HAL_GetTick>
 800b080:	4602      	mov	r2, r0
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	2b02      	cmp	r3, #2
 800b088:	d901      	bls.n	800b08e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b08a:	2303      	movs	r3, #3
 800b08c:	e087      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b08e:	4b27      	ldr	r3, [pc, #156]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1f0      	bne.n	800b07c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	69da      	ldr	r2, [r3, #28]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a8:	019b      	lsls	r3, r3, #6
 800b0aa:	431a      	orrs	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b0:	085b      	lsrs	r3, r3, #1
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	041b      	lsls	r3, r3, #16
 800b0b6:	431a      	orrs	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0bc:	061b      	lsls	r3, r3, #24
 800b0be:	491b      	ldr	r1, [pc, #108]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0c4:	4b1b      	ldr	r3, [pc, #108]	@ (800b134 <HAL_RCC_OscConfig+0x478>)
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0ca:	f7fb ff25 	bl	8006f18 <HAL_GetTick>
 800b0ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0d0:	e008      	b.n	800b0e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0d2:	f7fb ff21 	bl	8006f18 <HAL_GetTick>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d901      	bls.n	800b0e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e05c      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0e4:	4b11      	ldr	r3, [pc, #68]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0f0      	beq.n	800b0d2 <HAL_RCC_OscConfig+0x416>
 800b0f0:	e054      	b.n	800b19c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0f2:	4b10      	ldr	r3, [pc, #64]	@ (800b134 <HAL_RCC_OscConfig+0x478>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0f8:	f7fb ff0e 	bl	8006f18 <HAL_GetTick>
 800b0fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0fe:	e008      	b.n	800b112 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b100:	f7fb ff0a 	bl	8006f18 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d901      	bls.n	800b112 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e045      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b112:	4b06      	ldr	r3, [pc, #24]	@ (800b12c <HAL_RCC_OscConfig+0x470>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1f0      	bne.n	800b100 <HAL_RCC_OscConfig+0x444>
 800b11e:	e03d      	b.n	800b19c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d107      	bne.n	800b138 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	e038      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
 800b12c:	40023800 	.word	0x40023800
 800b130:	40007000 	.word	0x40007000
 800b134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b138:	4b1b      	ldr	r3, [pc, #108]	@ (800b1a8 <HAL_RCC_OscConfig+0x4ec>)
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	699b      	ldr	r3, [r3, #24]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d028      	beq.n	800b198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b150:	429a      	cmp	r2, r3
 800b152:	d121      	bne.n	800b198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b15e:	429a      	cmp	r2, r3
 800b160:	d11a      	bne.n	800b198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b168:	4013      	ands	r3, r2
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b16e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b170:	4293      	cmp	r3, r2
 800b172:	d111      	bne.n	800b198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b17e:	085b      	lsrs	r3, r3, #1
 800b180:	3b01      	subs	r3, #1
 800b182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b184:	429a      	cmp	r2, r3
 800b186:	d107      	bne.n	800b198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b194:	429a      	cmp	r2, r3
 800b196:	d001      	beq.n	800b19c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	e000      	b.n	800b19e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	40023800 	.word	0x40023800

0800b1ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d101      	bne.n	800b1c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e0cc      	b.n	800b35a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b1c0:	4b68      	ldr	r3, [pc, #416]	@ (800b364 <HAL_RCC_ClockConfig+0x1b8>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f003 0307 	and.w	r3, r3, #7
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d90c      	bls.n	800b1e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1ce:	4b65      	ldr	r3, [pc, #404]	@ (800b364 <HAL_RCC_ClockConfig+0x1b8>)
 800b1d0:	683a      	ldr	r2, [r7, #0]
 800b1d2:	b2d2      	uxtb	r2, r2
 800b1d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1d6:	4b63      	ldr	r3, [pc, #396]	@ (800b364 <HAL_RCC_ClockConfig+0x1b8>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 0307 	and.w	r3, r3, #7
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d001      	beq.n	800b1e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e0b8      	b.n	800b35a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 0302 	and.w	r3, r3, #2
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d020      	beq.n	800b236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 0304 	and.w	r3, r3, #4
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d005      	beq.n	800b20c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b200:	4b59      	ldr	r3, [pc, #356]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	4a58      	ldr	r2, [pc, #352]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b206:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b20a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 0308 	and.w	r3, r3, #8
 800b214:	2b00      	cmp	r3, #0
 800b216:	d005      	beq.n	800b224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b218:	4b53      	ldr	r3, [pc, #332]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	4a52      	ldr	r2, [pc, #328]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b21e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b224:	4b50      	ldr	r3, [pc, #320]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	494d      	ldr	r1, [pc, #308]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b232:	4313      	orrs	r3, r2
 800b234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d044      	beq.n	800b2cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	2b01      	cmp	r3, #1
 800b248:	d107      	bne.n	800b25a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b24a:	4b47      	ldr	r3, [pc, #284]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d119      	bne.n	800b28a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e07f      	b.n	800b35a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d003      	beq.n	800b26a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b266:	2b03      	cmp	r3, #3
 800b268:	d107      	bne.n	800b27a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b26a:	4b3f      	ldr	r3, [pc, #252]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b272:	2b00      	cmp	r3, #0
 800b274:	d109      	bne.n	800b28a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e06f      	b.n	800b35a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b27a:	4b3b      	ldr	r3, [pc, #236]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 0302 	and.w	r3, r3, #2
 800b282:	2b00      	cmp	r3, #0
 800b284:	d101      	bne.n	800b28a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e067      	b.n	800b35a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b28a:	4b37      	ldr	r3, [pc, #220]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f023 0203 	bic.w	r2, r3, #3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	4934      	ldr	r1, [pc, #208]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b298:	4313      	orrs	r3, r2
 800b29a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b29c:	f7fb fe3c 	bl	8006f18 <HAL_GetTick>
 800b2a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2a2:	e00a      	b.n	800b2ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2a4:	f7fb fe38 	bl	8006f18 <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d901      	bls.n	800b2ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	e04f      	b.n	800b35a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2ba:	4b2b      	ldr	r3, [pc, #172]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	f003 020c 	and.w	r2, r3, #12
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d1eb      	bne.n	800b2a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b2cc:	4b25      	ldr	r3, [pc, #148]	@ (800b364 <HAL_RCC_ClockConfig+0x1b8>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0307 	and.w	r3, r3, #7
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d20c      	bcs.n	800b2f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2da:	4b22      	ldr	r3, [pc, #136]	@ (800b364 <HAL_RCC_ClockConfig+0x1b8>)
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2e2:	4b20      	ldr	r3, [pc, #128]	@ (800b364 <HAL_RCC_ClockConfig+0x1b8>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 0307 	and.w	r3, r3, #7
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d001      	beq.n	800b2f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e032      	b.n	800b35a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 0304 	and.w	r3, r3, #4
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d008      	beq.n	800b312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b300:	4b19      	ldr	r3, [pc, #100]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	4916      	ldr	r1, [pc, #88]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 0308 	and.w	r3, r3, #8
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d009      	beq.n	800b332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b31e:	4b12      	ldr	r3, [pc, #72]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	00db      	lsls	r3, r3, #3
 800b32c:	490e      	ldr	r1, [pc, #56]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b32e:	4313      	orrs	r3, r2
 800b330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b332:	f000 f821 	bl	800b378 <HAL_RCC_GetSysClockFreq>
 800b336:	4602      	mov	r2, r0
 800b338:	4b0b      	ldr	r3, [pc, #44]	@ (800b368 <HAL_RCC_ClockConfig+0x1bc>)
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	091b      	lsrs	r3, r3, #4
 800b33e:	f003 030f 	and.w	r3, r3, #15
 800b342:	490a      	ldr	r1, [pc, #40]	@ (800b36c <HAL_RCC_ClockConfig+0x1c0>)
 800b344:	5ccb      	ldrb	r3, [r1, r3]
 800b346:	fa22 f303 	lsr.w	r3, r2, r3
 800b34a:	4a09      	ldr	r2, [pc, #36]	@ (800b370 <HAL_RCC_ClockConfig+0x1c4>)
 800b34c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b34e:	4b09      	ldr	r3, [pc, #36]	@ (800b374 <HAL_RCC_ClockConfig+0x1c8>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4618      	mov	r0, r3
 800b354:	f7f6 fb6a 	bl	8001a2c <HAL_InitTick>

  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	40023c00 	.word	0x40023c00
 800b368:	40023800 	.word	0x40023800
 800b36c:	08015b88 	.word	0x08015b88
 800b370:	20000018 	.word	0x20000018
 800b374:	2000008c 	.word	0x2000008c

0800b378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b37c:	b094      	sub	sp, #80	@ 0x50
 800b37e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b380:	2300      	movs	r3, #0
 800b382:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800b384:	2300      	movs	r3, #0
 800b386:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800b388:	2300      	movs	r3, #0
 800b38a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b390:	4b79      	ldr	r3, [pc, #484]	@ (800b578 <HAL_RCC_GetSysClockFreq+0x200>)
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	f003 030c 	and.w	r3, r3, #12
 800b398:	2b08      	cmp	r3, #8
 800b39a:	d00d      	beq.n	800b3b8 <HAL_RCC_GetSysClockFreq+0x40>
 800b39c:	2b08      	cmp	r3, #8
 800b39e:	f200 80e1 	bhi.w	800b564 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d002      	beq.n	800b3ac <HAL_RCC_GetSysClockFreq+0x34>
 800b3a6:	2b04      	cmp	r3, #4
 800b3a8:	d003      	beq.n	800b3b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800b3aa:	e0db      	b.n	800b564 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b3ac:	4b73      	ldr	r3, [pc, #460]	@ (800b57c <HAL_RCC_GetSysClockFreq+0x204>)
 800b3ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b3b0:	e0db      	b.n	800b56a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b3b2:	4b73      	ldr	r3, [pc, #460]	@ (800b580 <HAL_RCC_GetSysClockFreq+0x208>)
 800b3b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b3b6:	e0d8      	b.n	800b56a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b3b8:	4b6f      	ldr	r3, [pc, #444]	@ (800b578 <HAL_RCC_GetSysClockFreq+0x200>)
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b3c2:	4b6d      	ldr	r3, [pc, #436]	@ (800b578 <HAL_RCC_GetSysClockFreq+0x200>)
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d063      	beq.n	800b496 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3ce:	4b6a      	ldr	r3, [pc, #424]	@ (800b578 <HAL_RCC_GetSysClockFreq+0x200>)
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	099b      	lsrs	r3, r3, #6
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b3d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b3ea:	4622      	mov	r2, r4
 800b3ec:	462b      	mov	r3, r5
 800b3ee:	f04f 0000 	mov.w	r0, #0
 800b3f2:	f04f 0100 	mov.w	r1, #0
 800b3f6:	0159      	lsls	r1, r3, #5
 800b3f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b3fc:	0150      	lsls	r0, r2, #5
 800b3fe:	4602      	mov	r2, r0
 800b400:	460b      	mov	r3, r1
 800b402:	4621      	mov	r1, r4
 800b404:	1a51      	subs	r1, r2, r1
 800b406:	6139      	str	r1, [r7, #16]
 800b408:	4629      	mov	r1, r5
 800b40a:	eb63 0301 	sbc.w	r3, r3, r1
 800b40e:	617b      	str	r3, [r7, #20]
 800b410:	f04f 0200 	mov.w	r2, #0
 800b414:	f04f 0300 	mov.w	r3, #0
 800b418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b41c:	4659      	mov	r1, fp
 800b41e:	018b      	lsls	r3, r1, #6
 800b420:	4651      	mov	r1, sl
 800b422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b426:	4651      	mov	r1, sl
 800b428:	018a      	lsls	r2, r1, #6
 800b42a:	4651      	mov	r1, sl
 800b42c:	ebb2 0801 	subs.w	r8, r2, r1
 800b430:	4659      	mov	r1, fp
 800b432:	eb63 0901 	sbc.w	r9, r3, r1
 800b436:	f04f 0200 	mov.w	r2, #0
 800b43a:	f04f 0300 	mov.w	r3, #0
 800b43e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b44a:	4690      	mov	r8, r2
 800b44c:	4699      	mov	r9, r3
 800b44e:	4623      	mov	r3, r4
 800b450:	eb18 0303 	adds.w	r3, r8, r3
 800b454:	60bb      	str	r3, [r7, #8]
 800b456:	462b      	mov	r3, r5
 800b458:	eb49 0303 	adc.w	r3, r9, r3
 800b45c:	60fb      	str	r3, [r7, #12]
 800b45e:	f04f 0200 	mov.w	r2, #0
 800b462:	f04f 0300 	mov.w	r3, #0
 800b466:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b46a:	4629      	mov	r1, r5
 800b46c:	024b      	lsls	r3, r1, #9
 800b46e:	4621      	mov	r1, r4
 800b470:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b474:	4621      	mov	r1, r4
 800b476:	024a      	lsls	r2, r1, #9
 800b478:	4610      	mov	r0, r2
 800b47a:	4619      	mov	r1, r3
 800b47c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b47e:	2200      	movs	r2, #0
 800b480:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b482:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b488:	f7f5 fc56 	bl	8000d38 <__aeabi_uldivmod>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4613      	mov	r3, r2
 800b492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b494:	e058      	b.n	800b548 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b496:	4b38      	ldr	r3, [pc, #224]	@ (800b578 <HAL_RCC_GetSysClockFreq+0x200>)
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	099b      	lsrs	r3, r3, #6
 800b49c:	2200      	movs	r2, #0
 800b49e:	4618      	mov	r0, r3
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b4a6:	623b      	str	r3, [r7, #32]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b4b0:	4642      	mov	r2, r8
 800b4b2:	464b      	mov	r3, r9
 800b4b4:	f04f 0000 	mov.w	r0, #0
 800b4b8:	f04f 0100 	mov.w	r1, #0
 800b4bc:	0159      	lsls	r1, r3, #5
 800b4be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b4c2:	0150      	lsls	r0, r2, #5
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4641      	mov	r1, r8
 800b4ca:	ebb2 0a01 	subs.w	sl, r2, r1
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	eb63 0b01 	sbc.w	fp, r3, r1
 800b4d4:	f04f 0200 	mov.w	r2, #0
 800b4d8:	f04f 0300 	mov.w	r3, #0
 800b4dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b4e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b4e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b4e8:	ebb2 040a 	subs.w	r4, r2, sl
 800b4ec:	eb63 050b 	sbc.w	r5, r3, fp
 800b4f0:	f04f 0200 	mov.w	r2, #0
 800b4f4:	f04f 0300 	mov.w	r3, #0
 800b4f8:	00eb      	lsls	r3, r5, #3
 800b4fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4fe:	00e2      	lsls	r2, r4, #3
 800b500:	4614      	mov	r4, r2
 800b502:	461d      	mov	r5, r3
 800b504:	4643      	mov	r3, r8
 800b506:	18e3      	adds	r3, r4, r3
 800b508:	603b      	str	r3, [r7, #0]
 800b50a:	464b      	mov	r3, r9
 800b50c:	eb45 0303 	adc.w	r3, r5, r3
 800b510:	607b      	str	r3, [r7, #4]
 800b512:	f04f 0200 	mov.w	r2, #0
 800b516:	f04f 0300 	mov.w	r3, #0
 800b51a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b51e:	4629      	mov	r1, r5
 800b520:	028b      	lsls	r3, r1, #10
 800b522:	4621      	mov	r1, r4
 800b524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b528:	4621      	mov	r1, r4
 800b52a:	028a      	lsls	r2, r1, #10
 800b52c:	4610      	mov	r0, r2
 800b52e:	4619      	mov	r1, r3
 800b530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b532:	2200      	movs	r2, #0
 800b534:	61bb      	str	r3, [r7, #24]
 800b536:	61fa      	str	r2, [r7, #28]
 800b538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b53c:	f7f5 fbfc 	bl	8000d38 <__aeabi_uldivmod>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4613      	mov	r3, r2
 800b546:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b548:	4b0b      	ldr	r3, [pc, #44]	@ (800b578 <HAL_RCC_GetSysClockFreq+0x200>)
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	0c1b      	lsrs	r3, r3, #16
 800b54e:	f003 0303 	and.w	r3, r3, #3
 800b552:	3301      	adds	r3, #1
 800b554:	005b      	lsls	r3, r3, #1
 800b556:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800b558:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b55a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b560:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b562:	e002      	b.n	800b56a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b564:	4b05      	ldr	r3, [pc, #20]	@ (800b57c <HAL_RCC_GetSysClockFreq+0x204>)
 800b566:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b56a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3750      	adds	r7, #80	@ 0x50
 800b570:	46bd      	mov	sp, r7
 800b572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b576:	bf00      	nop
 800b578:	40023800 	.word	0x40023800
 800b57c:	00f42400 	.word	0x00f42400
 800b580:	007a1200 	.word	0x007a1200

0800b584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b584:	b480      	push	{r7}
 800b586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b588:	4b03      	ldr	r3, [pc, #12]	@ (800b598 <HAL_RCC_GetHCLKFreq+0x14>)
 800b58a:	681b      	ldr	r3, [r3, #0]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	20000018 	.word	0x20000018

0800b59c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b5a0:	f7ff fff0 	bl	800b584 <HAL_RCC_GetHCLKFreq>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	4b05      	ldr	r3, [pc, #20]	@ (800b5bc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	0a9b      	lsrs	r3, r3, #10
 800b5ac:	f003 0307 	and.w	r3, r3, #7
 800b5b0:	4903      	ldr	r1, [pc, #12]	@ (800b5c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5b2:	5ccb      	ldrb	r3, [r1, r3]
 800b5b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	40023800 	.word	0x40023800
 800b5c0:	08015b98 	.word	0x08015b98

0800b5c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b5c8:	f7ff ffdc 	bl	800b584 <HAL_RCC_GetHCLKFreq>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	4b05      	ldr	r3, [pc, #20]	@ (800b5e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	0b5b      	lsrs	r3, r3, #13
 800b5d4:	f003 0307 	and.w	r3, r3, #7
 800b5d8:	4903      	ldr	r1, [pc, #12]	@ (800b5e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5da:	5ccb      	ldrb	r3, [r1, r3]
 800b5dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	40023800 	.word	0x40023800
 800b5e8:	08015b98 	.word	0x08015b98

0800b5ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	220f      	movs	r2, #15
 800b5fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b5fc:	4b12      	ldr	r3, [pc, #72]	@ (800b648 <HAL_RCC_GetClockConfig+0x5c>)
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	f003 0203 	and.w	r2, r3, #3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b608:	4b0f      	ldr	r3, [pc, #60]	@ (800b648 <HAL_RCC_GetClockConfig+0x5c>)
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b614:	4b0c      	ldr	r3, [pc, #48]	@ (800b648 <HAL_RCC_GetClockConfig+0x5c>)
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b620:	4b09      	ldr	r3, [pc, #36]	@ (800b648 <HAL_RCC_GetClockConfig+0x5c>)
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	08db      	lsrs	r3, r3, #3
 800b626:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b62e:	4b07      	ldr	r3, [pc, #28]	@ (800b64c <HAL_RCC_GetClockConfig+0x60>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0207 	and.w	r2, r3, #7
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	601a      	str	r2, [r3, #0]
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	40023800 	.word	0x40023800
 800b64c:	40023c00 	.word	0x40023c00

0800b650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d101      	bne.n	800b662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e041      	b.n	800b6e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d106      	bne.n	800b67c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7f6 feb2 	bl	80023e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2202      	movs	r2, #2
 800b680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	3304      	adds	r3, #4
 800b68c:	4619      	mov	r1, r3
 800b68e:	4610      	mov	r0, r2
 800b690:	f000 fe4c 	bl	800c32c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
	...

0800b6f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b01      	cmp	r3, #1
 800b702:	d001      	beq.n	800b708 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	e03c      	b.n	800b782 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2202      	movs	r2, #2
 800b70c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a1e      	ldr	r2, [pc, #120]	@ (800b790 <HAL_TIM_Base_Start+0xa0>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d018      	beq.n	800b74c <HAL_TIM_Base_Start+0x5c>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b722:	d013      	beq.n	800b74c <HAL_TIM_Base_Start+0x5c>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a1a      	ldr	r2, [pc, #104]	@ (800b794 <HAL_TIM_Base_Start+0xa4>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d00e      	beq.n	800b74c <HAL_TIM_Base_Start+0x5c>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a19      	ldr	r2, [pc, #100]	@ (800b798 <HAL_TIM_Base_Start+0xa8>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d009      	beq.n	800b74c <HAL_TIM_Base_Start+0x5c>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a17      	ldr	r2, [pc, #92]	@ (800b79c <HAL_TIM_Base_Start+0xac>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d004      	beq.n	800b74c <HAL_TIM_Base_Start+0x5c>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a16      	ldr	r2, [pc, #88]	@ (800b7a0 <HAL_TIM_Base_Start+0xb0>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d111      	bne.n	800b770 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	f003 0307 	and.w	r3, r3, #7
 800b756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b06      	cmp	r3, #6
 800b75c:	d010      	beq.n	800b780 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f042 0201 	orr.w	r2, r2, #1
 800b76c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b76e:	e007      	b.n	800b780 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f042 0201 	orr.w	r2, r2, #1
 800b77e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	40010000 	.word	0x40010000
 800b794:	40000400 	.word	0x40000400
 800b798:	40000800 	.word	0x40000800
 800b79c:	40000c00 	.word	0x40000c00
 800b7a0:	40014000 	.word	0x40014000

0800b7a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6a1a      	ldr	r2, [r3, #32]
 800b7b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10f      	bne.n	800b7dc <HAL_TIM_Base_Stop+0x38>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	6a1a      	ldr	r2, [r3, #32]
 800b7c2:	f240 4344 	movw	r3, #1092	@ 0x444
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d107      	bne.n	800b7dc <HAL_TIM_Base_Stop+0x38>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f022 0201 	bic.w	r2, r2, #1
 800b7da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
	...

0800b7f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b802:	b2db      	uxtb	r3, r3
 800b804:	2b01      	cmp	r3, #1
 800b806:	d001      	beq.n	800b80c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	e044      	b.n	800b896 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68da      	ldr	r2, [r3, #12]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f042 0201 	orr.w	r2, r2, #1
 800b822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a1e      	ldr	r2, [pc, #120]	@ (800b8a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d018      	beq.n	800b860 <HAL_TIM_Base_Start_IT+0x6c>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b836:	d013      	beq.n	800b860 <HAL_TIM_Base_Start_IT+0x6c>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a1a      	ldr	r2, [pc, #104]	@ (800b8a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d00e      	beq.n	800b860 <HAL_TIM_Base_Start_IT+0x6c>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a19      	ldr	r2, [pc, #100]	@ (800b8ac <HAL_TIM_Base_Start_IT+0xb8>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d009      	beq.n	800b860 <HAL_TIM_Base_Start_IT+0x6c>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a17      	ldr	r2, [pc, #92]	@ (800b8b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d004      	beq.n	800b860 <HAL_TIM_Base_Start_IT+0x6c>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a16      	ldr	r2, [pc, #88]	@ (800b8b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d111      	bne.n	800b884 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	f003 0307 	and.w	r3, r3, #7
 800b86a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b06      	cmp	r3, #6
 800b870:	d010      	beq.n	800b894 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f042 0201 	orr.w	r2, r2, #1
 800b880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b882:	e007      	b.n	800b894 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f042 0201 	orr.w	r2, r2, #1
 800b892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	40010000 	.word	0x40010000
 800b8a8:	40000400 	.word	0x40000400
 800b8ac:	40000800 	.word	0x40000800
 800b8b0:	40000c00 	.word	0x40000c00
 800b8b4:	40014000 	.word	0x40014000

0800b8b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e041      	b.n	800b94e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d106      	bne.n	800b8e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7f6 fcd2 	bl	8002288 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	f000 fd18 	bl	800c32c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d109      	bne.n	800b97c <HAL_TIM_PWM_Start+0x24>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b01      	cmp	r3, #1
 800b972:	bf14      	ite	ne
 800b974:	2301      	movne	r3, #1
 800b976:	2300      	moveq	r3, #0
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	e022      	b.n	800b9c2 <HAL_TIM_PWM_Start+0x6a>
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2b04      	cmp	r3, #4
 800b980:	d109      	bne.n	800b996 <HAL_TIM_PWM_Start+0x3e>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	bf14      	ite	ne
 800b98e:	2301      	movne	r3, #1
 800b990:	2300      	moveq	r3, #0
 800b992:	b2db      	uxtb	r3, r3
 800b994:	e015      	b.n	800b9c2 <HAL_TIM_PWM_Start+0x6a>
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d109      	bne.n	800b9b0 <HAL_TIM_PWM_Start+0x58>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	bf14      	ite	ne
 800b9a8:	2301      	movne	r3, #1
 800b9aa:	2300      	moveq	r3, #0
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	e008      	b.n	800b9c2 <HAL_TIM_PWM_Start+0x6a>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	bf14      	ite	ne
 800b9bc:	2301      	movne	r3, #1
 800b9be:	2300      	moveq	r3, #0
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d001      	beq.n	800b9ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e068      	b.n	800ba9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d104      	bne.n	800b9da <HAL_TIM_PWM_Start+0x82>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2202      	movs	r2, #2
 800b9d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9d8:	e013      	b.n	800ba02 <HAL_TIM_PWM_Start+0xaa>
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	2b04      	cmp	r3, #4
 800b9de:	d104      	bne.n	800b9ea <HAL_TIM_PWM_Start+0x92>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b9e8:	e00b      	b.n	800ba02 <HAL_TIM_PWM_Start+0xaa>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b08      	cmp	r3, #8
 800b9ee:	d104      	bne.n	800b9fa <HAL_TIM_PWM_Start+0xa2>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2202      	movs	r2, #2
 800b9f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9f8:	e003      	b.n	800ba02 <HAL_TIM_PWM_Start+0xaa>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2201      	movs	r2, #1
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 ff3a 	bl	800c884 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a23      	ldr	r2, [pc, #140]	@ (800baa4 <HAL_TIM_PWM_Start+0x14c>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d107      	bne.n	800ba2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a1d      	ldr	r2, [pc, #116]	@ (800baa4 <HAL_TIM_PWM_Start+0x14c>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d018      	beq.n	800ba66 <HAL_TIM_PWM_Start+0x10e>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba3c:	d013      	beq.n	800ba66 <HAL_TIM_PWM_Start+0x10e>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a19      	ldr	r2, [pc, #100]	@ (800baa8 <HAL_TIM_PWM_Start+0x150>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d00e      	beq.n	800ba66 <HAL_TIM_PWM_Start+0x10e>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a17      	ldr	r2, [pc, #92]	@ (800baac <HAL_TIM_PWM_Start+0x154>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d009      	beq.n	800ba66 <HAL_TIM_PWM_Start+0x10e>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a16      	ldr	r2, [pc, #88]	@ (800bab0 <HAL_TIM_PWM_Start+0x158>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d004      	beq.n	800ba66 <HAL_TIM_PWM_Start+0x10e>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a14      	ldr	r2, [pc, #80]	@ (800bab4 <HAL_TIM_PWM_Start+0x15c>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d111      	bne.n	800ba8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	f003 0307 	and.w	r3, r3, #7
 800ba70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2b06      	cmp	r3, #6
 800ba76:	d010      	beq.n	800ba9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f042 0201 	orr.w	r2, r2, #1
 800ba86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba88:	e007      	b.n	800ba9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f042 0201 	orr.w	r2, r2, #1
 800ba98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	40010000 	.word	0x40010000
 800baa8:	40000400 	.word	0x40000400
 800baac:	40000800 	.word	0x40000800
 800bab0:	40000c00 	.word	0x40000c00
 800bab4:	40014000 	.word	0x40014000

0800bab8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2200      	movs	r2, #0
 800bac8:	6839      	ldr	r1, [r7, #0]
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 feda 	bl	800c884 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a29      	ldr	r2, [pc, #164]	@ (800bb7c <HAL_TIM_PWM_Stop+0xc4>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d117      	bne.n	800bb0a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	6a1a      	ldr	r2, [r3, #32]
 800bae0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bae4:	4013      	ands	r3, r2
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10f      	bne.n	800bb0a <HAL_TIM_PWM_Stop+0x52>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	6a1a      	ldr	r2, [r3, #32]
 800baf0:	f240 4344 	movw	r3, #1092	@ 0x444
 800baf4:	4013      	ands	r3, r2
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d107      	bne.n	800bb0a <HAL_TIM_PWM_Stop+0x52>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bb08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6a1a      	ldr	r2, [r3, #32]
 800bb10:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bb14:	4013      	ands	r3, r2
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10f      	bne.n	800bb3a <HAL_TIM_PWM_Stop+0x82>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6a1a      	ldr	r2, [r3, #32]
 800bb20:	f240 4344 	movw	r3, #1092	@ 0x444
 800bb24:	4013      	ands	r3, r2
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d107      	bne.n	800bb3a <HAL_TIM_PWM_Stop+0x82>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f022 0201 	bic.w	r2, r2, #1
 800bb38:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d104      	bne.n	800bb4a <HAL_TIM_PWM_Stop+0x92>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb48:	e013      	b.n	800bb72 <HAL_TIM_PWM_Stop+0xba>
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	d104      	bne.n	800bb5a <HAL_TIM_PWM_Stop+0xa2>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb58:	e00b      	b.n	800bb72 <HAL_TIM_PWM_Stop+0xba>
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	2b08      	cmp	r3, #8
 800bb5e:	d104      	bne.n	800bb6a <HAL_TIM_PWM_Stop+0xb2>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb68:	e003      	b.n	800bb72 <HAL_TIM_PWM_Stop+0xba>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	40010000 	.word	0x40010000

0800bb80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d101      	bne.n	800bb94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	e097      	b.n	800bcc4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d106      	bne.n	800bbae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7f6 fb9d 	bl	80022e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2202      	movs	r2, #2
 800bbb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	6812      	ldr	r2, [r2, #0]
 800bbc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bbc4:	f023 0307 	bic.w	r3, r3, #7
 800bbc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	4610      	mov	r0, r2
 800bbd6:	f000 fba9 	bl	800c32c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc02:	f023 0303 	bic.w	r3, r3, #3
 800bc06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	689a      	ldr	r2, [r3, #8]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	021b      	lsls	r3, r3, #8
 800bc12:	4313      	orrs	r3, r2
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800bc20:	f023 030c 	bic.w	r3, r3, #12
 800bc24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bc2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bc30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	68da      	ldr	r2, [r3, #12]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	69db      	ldr	r3, [r3, #28]
 800bc3a:	021b      	lsls	r3, r3, #8
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	011a      	lsls	r2, r3, #4
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	6a1b      	ldr	r3, [r3, #32]
 800bc4e:	031b      	lsls	r3, r3, #12
 800bc50:	4313      	orrs	r3, r2
 800bc52:	693a      	ldr	r2, [r7, #16]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800bc5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800bc66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	695b      	ldr	r3, [r3, #20]
 800bc70:	011b      	lsls	r3, r3, #4
 800bc72:	4313      	orrs	r3, r2
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	4313      	orrs	r3, r2
 800bc78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3718      	adds	r7, #24
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bcdc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bce4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bcec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bcf4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d110      	bne.n	800bd1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d102      	bne.n	800bd08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd02:	7b7b      	ldrb	r3, [r7, #13]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d001      	beq.n	800bd0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e069      	b.n	800bde0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2202      	movs	r2, #2
 800bd10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2202      	movs	r2, #2
 800bd18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd1c:	e031      	b.n	800bd82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	2b04      	cmp	r3, #4
 800bd22:	d110      	bne.n	800bd46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd24:	7bbb      	ldrb	r3, [r7, #14]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d102      	bne.n	800bd30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd2a:	7b3b      	ldrb	r3, [r7, #12]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d001      	beq.n	800bd34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e055      	b.n	800bde0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2202      	movs	r2, #2
 800bd38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bd44:	e01d      	b.n	800bd82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d108      	bne.n	800bd5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd4c:	7bbb      	ldrb	r3, [r7, #14]
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d105      	bne.n	800bd5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd52:	7b7b      	ldrb	r3, [r7, #13]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d102      	bne.n	800bd5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd58:	7b3b      	ldrb	r3, [r7, #12]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d001      	beq.n	800bd62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e03e      	b.n	800bde0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2202      	movs	r2, #2
 800bd66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2202      	movs	r2, #2
 800bd76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2202      	movs	r2, #2
 800bd7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d003      	beq.n	800bd90 <HAL_TIM_Encoder_Start+0xc4>
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	2b04      	cmp	r3, #4
 800bd8c:	d008      	beq.n	800bda0 <HAL_TIM_Encoder_Start+0xd4>
 800bd8e:	e00f      	b.n	800bdb0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2201      	movs	r2, #1
 800bd96:	2100      	movs	r1, #0
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 fd73 	bl	800c884 <TIM_CCxChannelCmd>
      break;
 800bd9e:	e016      	b.n	800bdce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2201      	movs	r2, #1
 800bda6:	2104      	movs	r1, #4
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f000 fd6b 	bl	800c884 <TIM_CCxChannelCmd>
      break;
 800bdae:	e00e      	b.n	800bdce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f000 fd63 	bl	800c884 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	2104      	movs	r1, #4
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 fd5c 	bl	800c884 <TIM_CCxChannelCmd>
      break;
 800bdcc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f042 0201 	orr.w	r2, r2, #1
 800bddc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	f003 0302 	and.w	r3, r3, #2
 800be06:	2b00      	cmp	r3, #0
 800be08:	d020      	beq.n	800be4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f003 0302 	and.w	r3, r3, #2
 800be10:	2b00      	cmp	r3, #0
 800be12:	d01b      	beq.n	800be4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f06f 0202 	mvn.w	r2, #2
 800be1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2201      	movs	r2, #1
 800be22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	699b      	ldr	r3, [r3, #24]
 800be2a:	f003 0303 	and.w	r3, r3, #3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d003      	beq.n	800be3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fa5b 	bl	800c2ee <HAL_TIM_IC_CaptureCallback>
 800be38:	e005      	b.n	800be46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fa4d 	bl	800c2da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fa5e 	bl	800c302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	f003 0304 	and.w	r3, r3, #4
 800be52:	2b00      	cmp	r3, #0
 800be54:	d020      	beq.n	800be98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f003 0304 	and.w	r3, r3, #4
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d01b      	beq.n	800be98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f06f 0204 	mvn.w	r2, #4
 800be68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2202      	movs	r2, #2
 800be6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d003      	beq.n	800be86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fa35 	bl	800c2ee <HAL_TIM_IC_CaptureCallback>
 800be84:	e005      	b.n	800be92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 fa27 	bl	800c2da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fa38 	bl	800c302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	f003 0308 	and.w	r3, r3, #8
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d020      	beq.n	800bee4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f003 0308 	and.w	r3, r3, #8
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d01b      	beq.n	800bee4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f06f 0208 	mvn.w	r2, #8
 800beb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2204      	movs	r2, #4
 800beba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	f003 0303 	and.w	r3, r3, #3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d003      	beq.n	800bed2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fa0f 	bl	800c2ee <HAL_TIM_IC_CaptureCallback>
 800bed0:	e005      	b.n	800bede <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fa01 	bl	800c2da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fa12 	bl	800c302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	f003 0310 	and.w	r3, r3, #16
 800beea:	2b00      	cmp	r3, #0
 800beec:	d020      	beq.n	800bf30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f003 0310 	and.w	r3, r3, #16
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d01b      	beq.n	800bf30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f06f 0210 	mvn.w	r2, #16
 800bf00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2208      	movs	r2, #8
 800bf06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	69db      	ldr	r3, [r3, #28]
 800bf0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f9e9 	bl	800c2ee <HAL_TIM_IC_CaptureCallback>
 800bf1c:	e005      	b.n	800bf2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f9db 	bl	800c2da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 f9ec 	bl	800c302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	f003 0301 	and.w	r3, r3, #1
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00c      	beq.n	800bf54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d007      	beq.n	800bf54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f06f 0201 	mvn.w	r2, #1
 800bf4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7f5 fd28 	bl	80019a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00c      	beq.n	800bf78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d007      	beq.n	800bf78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bf70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fe80 	bl	800cc78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00c      	beq.n	800bf9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d007      	beq.n	800bf9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bf94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 f9bd 	bl	800c316 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	f003 0320 	and.w	r3, r3, #32
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00c      	beq.n	800bfc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f003 0320 	and.w	r3, r3, #32
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d007      	beq.n	800bfc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f06f 0220 	mvn.w	r2, #32
 800bfb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 fe52 	bl	800cc64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfc0:	bf00      	nop
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d101      	bne.n	800bfe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	e0ae      	b.n	800c144 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2b0c      	cmp	r3, #12
 800bff2:	f200 809f 	bhi.w	800c134 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bff6:	a201      	add	r2, pc, #4	@ (adr r2, 800bffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffc:	0800c031 	.word	0x0800c031
 800c000:	0800c135 	.word	0x0800c135
 800c004:	0800c135 	.word	0x0800c135
 800c008:	0800c135 	.word	0x0800c135
 800c00c:	0800c071 	.word	0x0800c071
 800c010:	0800c135 	.word	0x0800c135
 800c014:	0800c135 	.word	0x0800c135
 800c018:	0800c135 	.word	0x0800c135
 800c01c:	0800c0b3 	.word	0x0800c0b3
 800c020:	0800c135 	.word	0x0800c135
 800c024:	0800c135 	.word	0x0800c135
 800c028:	0800c135 	.word	0x0800c135
 800c02c:	0800c0f3 	.word	0x0800c0f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68b9      	ldr	r1, [r7, #8]
 800c036:	4618      	mov	r0, r3
 800c038:	f000 f9fe 	bl	800c438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	699a      	ldr	r2, [r3, #24]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f042 0208 	orr.w	r2, r2, #8
 800c04a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	699a      	ldr	r2, [r3, #24]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f022 0204 	bic.w	r2, r2, #4
 800c05a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6999      	ldr	r1, [r3, #24]
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	691a      	ldr	r2, [r3, #16]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	430a      	orrs	r2, r1
 800c06c:	619a      	str	r2, [r3, #24]
      break;
 800c06e:	e064      	b.n	800c13a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68b9      	ldr	r1, [r7, #8]
 800c076:	4618      	mov	r0, r3
 800c078:	f000 fa44 	bl	800c504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	699a      	ldr	r2, [r3, #24]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c08a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	699a      	ldr	r2, [r3, #24]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c09a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6999      	ldr	r1, [r3, #24]
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	021a      	lsls	r2, r3, #8
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	430a      	orrs	r2, r1
 800c0ae:	619a      	str	r2, [r3, #24]
      break;
 800c0b0:	e043      	b.n	800c13a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68b9      	ldr	r1, [r7, #8]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f000 fa8f 	bl	800c5dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	69da      	ldr	r2, [r3, #28]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f042 0208 	orr.w	r2, r2, #8
 800c0cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	69da      	ldr	r2, [r3, #28]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f022 0204 	bic.w	r2, r2, #4
 800c0dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	69d9      	ldr	r1, [r3, #28]
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	691a      	ldr	r2, [r3, #16]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	430a      	orrs	r2, r1
 800c0ee:	61da      	str	r2, [r3, #28]
      break;
 800c0f0:	e023      	b.n	800c13a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68b9      	ldr	r1, [r7, #8]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f000 fad9 	bl	800c6b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	69da      	ldr	r2, [r3, #28]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c10c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	69da      	ldr	r2, [r3, #28]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c11c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	69d9      	ldr	r1, [r3, #28]
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	021a      	lsls	r2, r3, #8
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	430a      	orrs	r2, r1
 800c130:	61da      	str	r2, [r3, #28]
      break;
 800c132:	e002      	b.n	800c13a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	75fb      	strb	r3, [r7, #23]
      break;
 800c138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c142:	7dfb      	ldrb	r3, [r7, #23]
}
 800c144:	4618      	mov	r0, r3
 800c146:	3718      	adds	r7, #24
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c160:	2b01      	cmp	r3, #1
 800c162:	d101      	bne.n	800c168 <HAL_TIM_ConfigClockSource+0x1c>
 800c164:	2302      	movs	r3, #2
 800c166:	e0b4      	b.n	800c2d2 <HAL_TIM_ConfigClockSource+0x186>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2202      	movs	r2, #2
 800c174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c18e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1a0:	d03e      	beq.n	800c220 <HAL_TIM_ConfigClockSource+0xd4>
 800c1a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1a6:	f200 8087 	bhi.w	800c2b8 <HAL_TIM_ConfigClockSource+0x16c>
 800c1aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1ae:	f000 8086 	beq.w	800c2be <HAL_TIM_ConfigClockSource+0x172>
 800c1b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1b6:	d87f      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x16c>
 800c1b8:	2b70      	cmp	r3, #112	@ 0x70
 800c1ba:	d01a      	beq.n	800c1f2 <HAL_TIM_ConfigClockSource+0xa6>
 800c1bc:	2b70      	cmp	r3, #112	@ 0x70
 800c1be:	d87b      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x16c>
 800c1c0:	2b60      	cmp	r3, #96	@ 0x60
 800c1c2:	d050      	beq.n	800c266 <HAL_TIM_ConfigClockSource+0x11a>
 800c1c4:	2b60      	cmp	r3, #96	@ 0x60
 800c1c6:	d877      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x16c>
 800c1c8:	2b50      	cmp	r3, #80	@ 0x50
 800c1ca:	d03c      	beq.n	800c246 <HAL_TIM_ConfigClockSource+0xfa>
 800c1cc:	2b50      	cmp	r3, #80	@ 0x50
 800c1ce:	d873      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x16c>
 800c1d0:	2b40      	cmp	r3, #64	@ 0x40
 800c1d2:	d058      	beq.n	800c286 <HAL_TIM_ConfigClockSource+0x13a>
 800c1d4:	2b40      	cmp	r3, #64	@ 0x40
 800c1d6:	d86f      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x16c>
 800c1d8:	2b30      	cmp	r3, #48	@ 0x30
 800c1da:	d064      	beq.n	800c2a6 <HAL_TIM_ConfigClockSource+0x15a>
 800c1dc:	2b30      	cmp	r3, #48	@ 0x30
 800c1de:	d86b      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x16c>
 800c1e0:	2b20      	cmp	r3, #32
 800c1e2:	d060      	beq.n	800c2a6 <HAL_TIM_ConfigClockSource+0x15a>
 800c1e4:	2b20      	cmp	r3, #32
 800c1e6:	d867      	bhi.n	800c2b8 <HAL_TIM_ConfigClockSource+0x16c>
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d05c      	beq.n	800c2a6 <HAL_TIM_ConfigClockSource+0x15a>
 800c1ec:	2b10      	cmp	r3, #16
 800c1ee:	d05a      	beq.n	800c2a6 <HAL_TIM_ConfigClockSource+0x15a>
 800c1f0:	e062      	b.n	800c2b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c202:	f000 fb1f 	bl	800c844 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	609a      	str	r2, [r3, #8]
      break;
 800c21e:	e04f      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c230:	f000 fb08 	bl	800c844 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	689a      	ldr	r2, [r3, #8]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c242:	609a      	str	r2, [r3, #8]
      break;
 800c244:	e03c      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c252:	461a      	mov	r2, r3
 800c254:	f000 fa7c 	bl	800c750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2150      	movs	r1, #80	@ 0x50
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fad5 	bl	800c80e <TIM_ITRx_SetConfig>
      break;
 800c264:	e02c      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c272:	461a      	mov	r2, r3
 800c274:	f000 fa9b 	bl	800c7ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2160      	movs	r1, #96	@ 0x60
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 fac5 	bl	800c80e <TIM_ITRx_SetConfig>
      break;
 800c284:	e01c      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c292:	461a      	mov	r2, r3
 800c294:	f000 fa5c 	bl	800c750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2140      	movs	r1, #64	@ 0x40
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 fab5 	bl	800c80e <TIM_ITRx_SetConfig>
      break;
 800c2a4:	e00c      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	f000 faac 	bl	800c80e <TIM_ITRx_SetConfig>
      break;
 800c2b6:	e003      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c2bc:	e000      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c2be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2da:	b480      	push	{r7}
 800c2dc:	b083      	sub	sp, #12
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c2e2:	bf00      	nop
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c2f6:	bf00      	nop
 800c2f8:	370c      	adds	r7, #12
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr

0800c302 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c302:	b480      	push	{r7}
 800c304:	b083      	sub	sp, #12
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c30a:	bf00      	nop
 800c30c:	370c      	adds	r7, #12
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr

0800c316 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c316:	b480      	push	{r7}
 800c318:	b083      	sub	sp, #12
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c31e:	bf00      	nop
 800c320:	370c      	adds	r7, #12
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
	...

0800c32c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a37      	ldr	r2, [pc, #220]	@ (800c41c <TIM_Base_SetConfig+0xf0>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d00f      	beq.n	800c364 <TIM_Base_SetConfig+0x38>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c34a:	d00b      	beq.n	800c364 <TIM_Base_SetConfig+0x38>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a34      	ldr	r2, [pc, #208]	@ (800c420 <TIM_Base_SetConfig+0xf4>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d007      	beq.n	800c364 <TIM_Base_SetConfig+0x38>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a33      	ldr	r2, [pc, #204]	@ (800c424 <TIM_Base_SetConfig+0xf8>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d003      	beq.n	800c364 <TIM_Base_SetConfig+0x38>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a32      	ldr	r2, [pc, #200]	@ (800c428 <TIM_Base_SetConfig+0xfc>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d108      	bne.n	800c376 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c36a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	4313      	orrs	r3, r2
 800c374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4a28      	ldr	r2, [pc, #160]	@ (800c41c <TIM_Base_SetConfig+0xf0>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d01b      	beq.n	800c3b6 <TIM_Base_SetConfig+0x8a>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c384:	d017      	beq.n	800c3b6 <TIM_Base_SetConfig+0x8a>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a25      	ldr	r2, [pc, #148]	@ (800c420 <TIM_Base_SetConfig+0xf4>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d013      	beq.n	800c3b6 <TIM_Base_SetConfig+0x8a>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a24      	ldr	r2, [pc, #144]	@ (800c424 <TIM_Base_SetConfig+0xf8>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d00f      	beq.n	800c3b6 <TIM_Base_SetConfig+0x8a>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a23      	ldr	r2, [pc, #140]	@ (800c428 <TIM_Base_SetConfig+0xfc>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d00b      	beq.n	800c3b6 <TIM_Base_SetConfig+0x8a>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a22      	ldr	r2, [pc, #136]	@ (800c42c <TIM_Base_SetConfig+0x100>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d007      	beq.n	800c3b6 <TIM_Base_SetConfig+0x8a>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a21      	ldr	r2, [pc, #132]	@ (800c430 <TIM_Base_SetConfig+0x104>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d003      	beq.n	800c3b6 <TIM_Base_SetConfig+0x8a>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a20      	ldr	r2, [pc, #128]	@ (800c434 <TIM_Base_SetConfig+0x108>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d108      	bne.n	800c3c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	68fa      	ldr	r2, [r7, #12]
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	689a      	ldr	r2, [r3, #8]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4a0c      	ldr	r2, [pc, #48]	@ (800c41c <TIM_Base_SetConfig+0xf0>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d103      	bne.n	800c3f6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	691a      	ldr	r2, [r3, #16]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f043 0204 	orr.w	r2, r3, #4
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2201      	movs	r2, #1
 800c406:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	601a      	str	r2, [r3, #0]
}
 800c40e:	bf00      	nop
 800c410:	3714      	adds	r7, #20
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr
 800c41a:	bf00      	nop
 800c41c:	40010000 	.word	0x40010000
 800c420:	40000400 	.word	0x40000400
 800c424:	40000800 	.word	0x40000800
 800c428:	40000c00 	.word	0x40000c00
 800c42c:	40014000 	.word	0x40014000
 800c430:	40014400 	.word	0x40014400
 800c434:	40014800 	.word	0x40014800

0800c438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a1b      	ldr	r3, [r3, #32]
 800c44c:	f023 0201 	bic.w	r2, r3, #1
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f023 0303 	bic.w	r3, r3, #3
 800c46e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	4313      	orrs	r3, r2
 800c478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f023 0302 	bic.w	r3, r3, #2
 800c480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	4313      	orrs	r3, r2
 800c48a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a1c      	ldr	r2, [pc, #112]	@ (800c500 <TIM_OC1_SetConfig+0xc8>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d10c      	bne.n	800c4ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	f023 0308 	bic.w	r3, r3, #8
 800c49a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f023 0304 	bic.w	r3, r3, #4
 800c4ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4a13      	ldr	r2, [pc, #76]	@ (800c500 <TIM_OC1_SetConfig+0xc8>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d111      	bne.n	800c4da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c4c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	693a      	ldr	r2, [r7, #16]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	685a      	ldr	r2, [r3, #4]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	621a      	str	r2, [r3, #32]
}
 800c4f4:	bf00      	nop
 800c4f6:	371c      	adds	r7, #28
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	40010000 	.word	0x40010000

0800c504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6a1b      	ldr	r3, [r3, #32]
 800c518:	f023 0210 	bic.w	r2, r3, #16
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c53a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	021b      	lsls	r3, r3, #8
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	4313      	orrs	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	f023 0320 	bic.w	r3, r3, #32
 800c54e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	011b      	lsls	r3, r3, #4
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	4313      	orrs	r3, r2
 800c55a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4a1e      	ldr	r2, [pc, #120]	@ (800c5d8 <TIM_OC2_SetConfig+0xd4>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d10d      	bne.n	800c580 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c56a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	011b      	lsls	r3, r3, #4
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	4313      	orrs	r3, r2
 800c576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c57e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a15      	ldr	r2, [pc, #84]	@ (800c5d8 <TIM_OC2_SetConfig+0xd4>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d113      	bne.n	800c5b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c58e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	695b      	ldr	r3, [r3, #20]
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	693a      	ldr	r2, [r7, #16]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	685a      	ldr	r2, [r3, #4]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	621a      	str	r2, [r3, #32]
}
 800c5ca:	bf00      	nop
 800c5cc:	371c      	adds	r7, #28
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	40010000 	.word	0x40010000

0800c5dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b087      	sub	sp, #28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6a1b      	ldr	r3, [r3, #32]
 800c5f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	69db      	ldr	r3, [r3, #28]
 800c602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c60a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f023 0303 	bic.w	r3, r3, #3
 800c612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	021b      	lsls	r3, r3, #8
 800c62c:	697a      	ldr	r2, [r7, #20]
 800c62e:	4313      	orrs	r3, r2
 800c630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a1d      	ldr	r2, [pc, #116]	@ (800c6ac <TIM_OC3_SetConfig+0xd0>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d10d      	bne.n	800c656 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	021b      	lsls	r3, r3, #8
 800c648:	697a      	ldr	r2, [r7, #20]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a14      	ldr	r2, [pc, #80]	@ (800c6ac <TIM_OC3_SetConfig+0xd0>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d113      	bne.n	800c686 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c66c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	695b      	ldr	r3, [r3, #20]
 800c672:	011b      	lsls	r3, r3, #4
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	4313      	orrs	r3, r2
 800c678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	699b      	ldr	r3, [r3, #24]
 800c67e:	011b      	lsls	r3, r3, #4
 800c680:	693a      	ldr	r2, [r7, #16]
 800c682:	4313      	orrs	r3, r2
 800c684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	621a      	str	r2, [r3, #32]
}
 800c6a0:	bf00      	nop
 800c6a2:	371c      	adds	r7, #28
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	40010000 	.word	0x40010000

0800c6b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a1b      	ldr	r3, [r3, #32]
 800c6be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a1b      	ldr	r3, [r3, #32]
 800c6c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	69db      	ldr	r3, [r3, #28]
 800c6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	021b      	lsls	r3, r3, #8
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c6fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	031b      	lsls	r3, r3, #12
 800c702:	693a      	ldr	r2, [r7, #16]
 800c704:	4313      	orrs	r3, r2
 800c706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a10      	ldr	r2, [pc, #64]	@ (800c74c <TIM_OC4_SetConfig+0x9c>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d109      	bne.n	800c724 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	695b      	ldr	r3, [r3, #20]
 800c71c:	019b      	lsls	r3, r3, #6
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	4313      	orrs	r3, r2
 800c722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	697a      	ldr	r2, [r7, #20]
 800c728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	621a      	str	r2, [r3, #32]
}
 800c73e:	bf00      	nop
 800c740:	371c      	adds	r7, #28
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop
 800c74c:	40010000 	.word	0x40010000

0800c750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c750:	b480      	push	{r7}
 800c752:	b087      	sub	sp, #28
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6a1b      	ldr	r3, [r3, #32]
 800c760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	f023 0201 	bic.w	r2, r3, #1
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	699b      	ldr	r3, [r3, #24]
 800c772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c77a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	011b      	lsls	r3, r3, #4
 800c780:	693a      	ldr	r2, [r7, #16]
 800c782:	4313      	orrs	r3, r2
 800c784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	f023 030a 	bic.w	r3, r3, #10
 800c78c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c78e:	697a      	ldr	r2, [r7, #20]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	4313      	orrs	r3, r2
 800c794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	693a      	ldr	r2, [r7, #16]
 800c79a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	621a      	str	r2, [r3, #32]
}
 800c7a2:	bf00      	nop
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b087      	sub	sp, #28
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	60f8      	str	r0, [r7, #12]
 800c7b6:	60b9      	str	r1, [r7, #8]
 800c7b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6a1b      	ldr	r3, [r3, #32]
 800c7be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6a1b      	ldr	r3, [r3, #32]
 800c7c4:	f023 0210 	bic.w	r2, r3, #16
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	699b      	ldr	r3, [r3, #24]
 800c7d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c7d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	031b      	lsls	r3, r3, #12
 800c7de:	693a      	ldr	r2, [r7, #16]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c7ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	011b      	lsls	r3, r3, #4
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	693a      	ldr	r2, [r7, #16]
 800c7fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	621a      	str	r2, [r3, #32]
}
 800c802:	bf00      	nop
 800c804:	371c      	adds	r7, #28
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c80e:	b480      	push	{r7}
 800c810:	b085      	sub	sp, #20
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	f043 0307 	orr.w	r3, r3, #7
 800c830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	609a      	str	r2, [r3, #8]
}
 800c838:	bf00      	nop
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c844:	b480      	push	{r7}
 800c846:	b087      	sub	sp, #28
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c85e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	021a      	lsls	r2, r3, #8
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	431a      	orrs	r2, r3
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	4313      	orrs	r3, r2
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	4313      	orrs	r3, r2
 800c870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	697a      	ldr	r2, [r7, #20]
 800c876:	609a      	str	r2, [r3, #8]
}
 800c878:	bf00      	nop
 800c87a:	371c      	adds	r7, #28
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c884:	b480      	push	{r7}
 800c886:	b087      	sub	sp, #28
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	f003 031f 	and.w	r3, r3, #31
 800c896:	2201      	movs	r2, #1
 800c898:	fa02 f303 	lsl.w	r3, r2, r3
 800c89c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6a1a      	ldr	r2, [r3, #32]
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	43db      	mvns	r3, r3
 800c8a6:	401a      	ands	r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6a1a      	ldr	r2, [r3, #32]
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	f003 031f 	and.w	r3, r3, #31
 800c8b6:	6879      	ldr	r1, [r7, #4]
 800c8b8:	fa01 f303 	lsl.w	r3, r1, r3
 800c8bc:	431a      	orrs	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	621a      	str	r2, [r3, #32]
}
 800c8c2:	bf00      	nop
 800c8c4:	371c      	adds	r7, #28
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
	...

0800c8d0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d109      	bne.n	800c8f4 <HAL_TIMEx_PWMN_Start+0x24>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	bf14      	ite	ne
 800c8ec:	2301      	movne	r3, #1
 800c8ee:	2300      	moveq	r3, #0
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	e022      	b.n	800c93a <HAL_TIMEx_PWMN_Start+0x6a>
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	2b04      	cmp	r3, #4
 800c8f8:	d109      	bne.n	800c90e <HAL_TIMEx_PWMN_Start+0x3e>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c900:	b2db      	uxtb	r3, r3
 800c902:	2b01      	cmp	r3, #1
 800c904:	bf14      	ite	ne
 800c906:	2301      	movne	r3, #1
 800c908:	2300      	moveq	r3, #0
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	e015      	b.n	800c93a <HAL_TIMEx_PWMN_Start+0x6a>
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	2b08      	cmp	r3, #8
 800c912:	d109      	bne.n	800c928 <HAL_TIMEx_PWMN_Start+0x58>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	bf14      	ite	ne
 800c920:	2301      	movne	r3, #1
 800c922:	2300      	moveq	r3, #0
 800c924:	b2db      	uxtb	r3, r3
 800c926:	e008      	b.n	800c93a <HAL_TIMEx_PWMN_Start+0x6a>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	2b01      	cmp	r3, #1
 800c932:	bf14      	ite	ne
 800c934:	2301      	movne	r3, #1
 800c936:	2300      	moveq	r3, #0
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e063      	b.n	800ca0a <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d104      	bne.n	800c952 <HAL_TIMEx_PWMN_Start+0x82>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2202      	movs	r2, #2
 800c94c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c950:	e013      	b.n	800c97a <HAL_TIMEx_PWMN_Start+0xaa>
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	2b04      	cmp	r3, #4
 800c956:	d104      	bne.n	800c962 <HAL_TIMEx_PWMN_Start+0x92>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2202      	movs	r2, #2
 800c95c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c960:	e00b      	b.n	800c97a <HAL_TIMEx_PWMN_Start+0xaa>
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	2b08      	cmp	r3, #8
 800c966:	d104      	bne.n	800c972 <HAL_TIMEx_PWMN_Start+0xa2>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2202      	movs	r2, #2
 800c96c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c970:	e003      	b.n	800c97a <HAL_TIMEx_PWMN_Start+0xaa>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2202      	movs	r2, #2
 800c976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2204      	movs	r2, #4
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	4618      	mov	r0, r3
 800c984:	f000 f982 	bl	800cc8c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c996:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a1d      	ldr	r2, [pc, #116]	@ (800ca14 <HAL_TIMEx_PWMN_Start+0x144>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d018      	beq.n	800c9d4 <HAL_TIMEx_PWMN_Start+0x104>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9aa:	d013      	beq.n	800c9d4 <HAL_TIMEx_PWMN_Start+0x104>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a19      	ldr	r2, [pc, #100]	@ (800ca18 <HAL_TIMEx_PWMN_Start+0x148>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d00e      	beq.n	800c9d4 <HAL_TIMEx_PWMN_Start+0x104>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a18      	ldr	r2, [pc, #96]	@ (800ca1c <HAL_TIMEx_PWMN_Start+0x14c>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d009      	beq.n	800c9d4 <HAL_TIMEx_PWMN_Start+0x104>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a16      	ldr	r2, [pc, #88]	@ (800ca20 <HAL_TIMEx_PWMN_Start+0x150>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d004      	beq.n	800c9d4 <HAL_TIMEx_PWMN_Start+0x104>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a15      	ldr	r2, [pc, #84]	@ (800ca24 <HAL_TIMEx_PWMN_Start+0x154>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d111      	bne.n	800c9f8 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	f003 0307 	and.w	r3, r3, #7
 800c9de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2b06      	cmp	r3, #6
 800c9e4:	d010      	beq.n	800ca08 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f042 0201 	orr.w	r2, r2, #1
 800c9f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9f6:	e007      	b.n	800ca08 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f042 0201 	orr.w	r2, r2, #1
 800ca06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	40010000 	.word	0x40010000
 800ca18:	40000400 	.word	0x40000400
 800ca1c:	40000800 	.word	0x40000800
 800ca20:	40000c00 	.word	0x40000c00
 800ca24:	40014000 	.word	0x40014000

0800ca28 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2200      	movs	r2, #0
 800ca38:	6839      	ldr	r1, [r7, #0]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 f926 	bl	800cc8c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	6a1a      	ldr	r2, [r3, #32]
 800ca46:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10f      	bne.n	800ca70 <HAL_TIMEx_PWMN_Stop+0x48>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	6a1a      	ldr	r2, [r3, #32]
 800ca56:	f240 4344 	movw	r3, #1092	@ 0x444
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d107      	bne.n	800ca70 <HAL_TIMEx_PWMN_Stop+0x48>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ca6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	6a1a      	ldr	r2, [r3, #32]
 800ca76:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ca7a:	4013      	ands	r3, r2
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10f      	bne.n	800caa0 <HAL_TIMEx_PWMN_Stop+0x78>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	6a1a      	ldr	r2, [r3, #32]
 800ca86:	f240 4344 	movw	r3, #1092	@ 0x444
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d107      	bne.n	800caa0 <HAL_TIMEx_PWMN_Stop+0x78>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f022 0201 	bic.w	r2, r2, #1
 800ca9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d104      	bne.n	800cab0 <HAL_TIMEx_PWMN_Stop+0x88>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800caae:	e013      	b.n	800cad8 <HAL_TIMEx_PWMN_Stop+0xb0>
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	2b04      	cmp	r3, #4
 800cab4:	d104      	bne.n	800cac0 <HAL_TIMEx_PWMN_Stop+0x98>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cabe:	e00b      	b.n	800cad8 <HAL_TIMEx_PWMN_Stop+0xb0>
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	2b08      	cmp	r3, #8
 800cac4:	d104      	bne.n	800cad0 <HAL_TIMEx_PWMN_Stop+0xa8>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cace:	e003      	b.n	800cad8 <HAL_TIMEx_PWMN_Stop+0xb0>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
	...

0800cae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d101      	bne.n	800cafc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800caf8:	2302      	movs	r3, #2
 800cafa:	e050      	b.n	800cb9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2202      	movs	r2, #2
 800cb08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a1c      	ldr	r2, [pc, #112]	@ (800cbac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d018      	beq.n	800cb72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb48:	d013      	beq.n	800cb72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4a18      	ldr	r2, [pc, #96]	@ (800cbb0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d00e      	beq.n	800cb72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a16      	ldr	r2, [pc, #88]	@ (800cbb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d009      	beq.n	800cb72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a15      	ldr	r2, [pc, #84]	@ (800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d004      	beq.n	800cb72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a13      	ldr	r2, [pc, #76]	@ (800cbbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d10c      	bne.n	800cb8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	40010000 	.word	0x40010000
 800cbb0:	40000400 	.word	0x40000400
 800cbb4:	40000800 	.word	0x40000800
 800cbb8:	40000c00 	.word	0x40000c00
 800cbbc:	40014000 	.word	0x40014000

0800cbc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d101      	bne.n	800cbdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cbd8:	2302      	movs	r3, #2
 800cbda:	e03d      	b.n	800cc58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	69db      	ldr	r3, [r3, #28]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3714      	adds	r7, #20
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b087      	sub	sp, #28
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	f003 030f 	and.w	r3, r3, #15
 800cc9e:	2204      	movs	r2, #4
 800cca0:	fa02 f303 	lsl.w	r3, r2, r3
 800cca4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6a1a      	ldr	r2, [r3, #32]
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	43db      	mvns	r3, r3
 800ccae:	401a      	ands	r2, r3
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6a1a      	ldr	r2, [r3, #32]
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	f003 030f 	and.w	r3, r3, #15
 800ccbe:	6879      	ldr	r1, [r7, #4]
 800ccc0:	fa01 f303 	lsl.w	r3, r1, r3
 800ccc4:	431a      	orrs	r2, r3
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	621a      	str	r2, [r3, #32]
}
 800ccca:	bf00      	nop
 800cccc:	371c      	adds	r7, #28
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b082      	sub	sp, #8
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	e042      	b.n	800cd6e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d106      	bne.n	800cd02 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7f5 fc43 	bl	8002588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2224      	movs	r2, #36	@ 0x24
 800cd06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68da      	ldr	r2, [r3, #12]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cd18:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 fcf8 	bl	800d710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	691a      	ldr	r2, [r3, #16]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cd2e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	695a      	ldr	r2, [r3, #20]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cd3e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	68da      	ldr	r2, [r3, #12]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cd4e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2200      	movs	r2, #0
 800cd54:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2220      	movs	r2, #32
 800cd5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2220      	movs	r2, #32
 800cd62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cd6c:	2300      	movs	r3, #0
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3708      	adds	r7, #8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}

0800cd76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b084      	sub	sp, #16
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	60f8      	str	r0, [r7, #12]
 800cd7e:	60b9      	str	r1, [r7, #8]
 800cd80:	4613      	mov	r3, r2
 800cd82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	2b20      	cmp	r3, #32
 800cd8e:	d112      	bne.n	800cdb6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d002      	beq.n	800cd9c <HAL_UART_Receive_IT+0x26>
 800cd96:	88fb      	ldrh	r3, [r7, #6]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d101      	bne.n	800cda0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e00b      	b.n	800cdb8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2200      	movs	r2, #0
 800cda4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cda6:	88fb      	ldrh	r3, [r7, #6]
 800cda8:	461a      	mov	r2, r3
 800cdaa:	68b9      	ldr	r1, [r7, #8]
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f000 fadb 	bl	800d368 <UART_Start_Receive_IT>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	e000      	b.n	800cdb8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800cdb6:	2302      	movs	r3, #2
  }
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b0ba      	sub	sp, #232	@ 0xe8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cde6:	2300      	movs	r3, #0
 800cde8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cdec:	2300      	movs	r3, #0
 800cdee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cdf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdf6:	f003 030f 	and.w	r3, r3, #15
 800cdfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cdfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d10f      	bne.n	800ce26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ce06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce0a:	f003 0320 	and.w	r3, r3, #32
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d009      	beq.n	800ce26 <HAL_UART_IRQHandler+0x66>
 800ce12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce16:	f003 0320 	and.w	r3, r3, #32
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d003      	beq.n	800ce26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 fbb8 	bl	800d594 <UART_Receive_IT>
      return;
 800ce24:	e273      	b.n	800d30e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ce26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f000 80de 	beq.w	800cfec <HAL_UART_IRQHandler+0x22c>
 800ce30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce34:	f003 0301 	and.w	r3, r3, #1
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d106      	bne.n	800ce4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ce3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 80d1 	beq.w	800cfec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ce4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce4e:	f003 0301 	and.w	r3, r3, #1
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00b      	beq.n	800ce6e <HAL_UART_IRQHandler+0xae>
 800ce56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d005      	beq.n	800ce6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce66:	f043 0201 	orr.w	r2, r3, #1
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ce6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce72:	f003 0304 	and.w	r3, r3, #4
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00b      	beq.n	800ce92 <HAL_UART_IRQHandler+0xd2>
 800ce7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce7e:	f003 0301 	and.w	r3, r3, #1
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d005      	beq.n	800ce92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce8a:	f043 0202 	orr.w	r2, r3, #2
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ce92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce96:	f003 0302 	and.w	r3, r3, #2
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00b      	beq.n	800ceb6 <HAL_UART_IRQHandler+0xf6>
 800ce9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cea2:	f003 0301 	and.w	r3, r3, #1
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d005      	beq.n	800ceb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceae:	f043 0204 	orr.w	r2, r3, #4
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ceb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceba:	f003 0308 	and.w	r3, r3, #8
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d011      	beq.n	800cee6 <HAL_UART_IRQHandler+0x126>
 800cec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cec6:	f003 0320 	and.w	r3, r3, #32
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d105      	bne.n	800ceda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d005      	beq.n	800cee6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cede:	f043 0208 	orr.w	r2, r3, #8
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f000 820a 	beq.w	800d304 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cef4:	f003 0320 	and.w	r3, r3, #32
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d008      	beq.n	800cf0e <HAL_UART_IRQHandler+0x14e>
 800cefc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf00:	f003 0320 	and.w	r3, r3, #32
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fb43 	bl	800d594 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	695b      	ldr	r3, [r3, #20]
 800cf14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf18:	2b40      	cmp	r3, #64	@ 0x40
 800cf1a:	bf0c      	ite	eq
 800cf1c:	2301      	moveq	r3, #1
 800cf1e:	2300      	movne	r3, #0
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf2a:	f003 0308 	and.w	r3, r3, #8
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d103      	bne.n	800cf3a <HAL_UART_IRQHandler+0x17a>
 800cf32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d04f      	beq.n	800cfda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fa4e 	bl	800d3dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	695b      	ldr	r3, [r3, #20]
 800cf46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf4a:	2b40      	cmp	r3, #64	@ 0x40
 800cf4c:	d141      	bne.n	800cfd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	3314      	adds	r3, #20
 800cf54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf5c:	e853 3f00 	ldrex	r3, [r3]
 800cf60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cf64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	3314      	adds	r3, #20
 800cf76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cf7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cf7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cf86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cf8a:	e841 2300 	strex	r3, r2, [r1]
 800cf8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cf92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1d9      	bne.n	800cf4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d013      	beq.n	800cfca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfa6:	4a8a      	ldr	r2, [pc, #552]	@ (800d1d0 <HAL_UART_IRQHandler+0x410>)
 800cfa8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fa ff20 	bl	8007df4 <HAL_DMA_Abort_IT>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d016      	beq.n	800cfe8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfc8:	e00e      	b.n	800cfe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 f9b6 	bl	800d33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfd0:	e00a      	b.n	800cfe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f9b2 	bl	800d33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfd8:	e006      	b.n	800cfe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 f9ae 	bl	800d33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800cfe6:	e18d      	b.n	800d304 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfe8:	bf00      	nop
    return;
 800cfea:	e18b      	b.n	800d304 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	f040 8167 	bne.w	800d2c4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cffa:	f003 0310 	and.w	r3, r3, #16
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f000 8160 	beq.w	800d2c4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800d004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d008:	f003 0310 	and.w	r3, r3, #16
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 8159 	beq.w	800d2c4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d012:	2300      	movs	r3, #0
 800d014:	60bb      	str	r3, [r7, #8]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	60bb      	str	r3, [r7, #8]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	60bb      	str	r3, [r7, #8]
 800d026:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	695b      	ldr	r3, [r3, #20]
 800d02e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d032:	2b40      	cmp	r3, #64	@ 0x40
 800d034:	f040 80ce 	bne.w	800d1d4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d044:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f000 80a9 	beq.w	800d1a0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d056:	429a      	cmp	r2, r3
 800d058:	f080 80a2 	bcs.w	800d1a0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d062:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d06e:	f000 8088 	beq.w	800d182 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	330c      	adds	r3, #12
 800d078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d07c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d080:	e853 3f00 	ldrex	r3, [r3]
 800d084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d088:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d08c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	330c      	adds	r3, #12
 800d09a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d09e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d0a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d0aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d0ae:	e841 2300 	strex	r3, r2, [r1]
 800d0b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d0b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1d9      	bne.n	800d072 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	3314      	adds	r3, #20
 800d0c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d0c8:	e853 3f00 	ldrex	r3, [r3]
 800d0cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d0ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d0d0:	f023 0301 	bic.w	r3, r3, #1
 800d0d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	3314      	adds	r3, #20
 800d0de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d0e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d0e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d0ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d0ee:	e841 2300 	strex	r3, r2, [r1]
 800d0f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d0f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1e1      	bne.n	800d0be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3314      	adds	r3, #20
 800d100:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d104:	e853 3f00 	ldrex	r3, [r3]
 800d108:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d10a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d10c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	3314      	adds	r3, #20
 800d11a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d11e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d120:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d124:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d12c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1e3      	bne.n	800d0fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2220      	movs	r2, #32
 800d136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	330c      	adds	r3, #12
 800d146:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d14a:	e853 3f00 	ldrex	r3, [r3]
 800d14e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d152:	f023 0310 	bic.w	r3, r3, #16
 800d156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	330c      	adds	r3, #12
 800d160:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d164:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d166:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d168:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d16a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d16c:	e841 2300 	strex	r3, r2, [r1]
 800d170:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d174:	2b00      	cmp	r3, #0
 800d176:	d1e3      	bne.n	800d140 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fa fdc9 	bl	8007d14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2202      	movs	r2, #2
 800d186:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d190:	b29b      	uxth	r3, r3
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	b29b      	uxth	r3, r3
 800d196:	4619      	mov	r1, r3
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 f8d9 	bl	800d350 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d19e:	e0b3      	b.n	800d308 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d1a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	f040 80ad 	bne.w	800d308 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1b2:	69db      	ldr	r3, [r3, #28]
 800d1b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1b8:	f040 80a6 	bne.w	800d308 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2202      	movs	r2, #2
 800d1c0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 f8c1 	bl	800d350 <HAL_UARTEx_RxEventCallback>
      return;
 800d1ce:	e09b      	b.n	800d308 <HAL_UART_IRQHandler+0x548>
 800d1d0:	0800d4a3 	.word	0x0800d4a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	1ad3      	subs	r3, r2, r3
 800d1e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f000 808e 	beq.w	800d30c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800d1f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f000 8089 	beq.w	800d30c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	330c      	adds	r3, #12
 800d200:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d204:	e853 3f00 	ldrex	r3, [r3]
 800d208:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d20a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d20c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d210:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	330c      	adds	r3, #12
 800d21a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d21e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d220:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d222:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d224:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d226:	e841 2300 	strex	r3, r2, [r1]
 800d22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d22c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1e3      	bne.n	800d1fa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	3314      	adds	r3, #20
 800d238:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23c:	e853 3f00 	ldrex	r3, [r3]
 800d240:	623b      	str	r3, [r7, #32]
   return(result);
 800d242:	6a3b      	ldr	r3, [r7, #32]
 800d244:	f023 0301 	bic.w	r3, r3, #1
 800d248:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3314      	adds	r3, #20
 800d252:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d256:	633a      	str	r2, [r7, #48]	@ 0x30
 800d258:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d25c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d25e:	e841 2300 	strex	r3, r2, [r1]
 800d262:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1e3      	bne.n	800d232 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2220      	movs	r2, #32
 800d26e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	330c      	adds	r3, #12
 800d27e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	e853 3f00 	ldrex	r3, [r3]
 800d286:	60fb      	str	r3, [r7, #12]
   return(result);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f023 0310 	bic.w	r3, r3, #16
 800d28e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	330c      	adds	r3, #12
 800d298:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d29c:	61fa      	str	r2, [r7, #28]
 800d29e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a0:	69b9      	ldr	r1, [r7, #24]
 800d2a2:	69fa      	ldr	r2, [r7, #28]
 800d2a4:	e841 2300 	strex	r3, r2, [r1]
 800d2a8:	617b      	str	r3, [r7, #20]
   return(result);
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1e3      	bne.n	800d278 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2202      	movs	r2, #2
 800d2b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d2b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f847 	bl	800d350 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d2c2:	e023      	b.n	800d30c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d009      	beq.n	800d2e4 <HAL_UART_IRQHandler+0x524>
 800d2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 f8f1 	bl	800d4c4 <UART_Transmit_IT>
    return;
 800d2e2:	e014      	b.n	800d30e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d2e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00e      	beq.n	800d30e <HAL_UART_IRQHandler+0x54e>
 800d2f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d008      	beq.n	800d30e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f931 	bl	800d564 <UART_EndTransmit_IT>
    return;
 800d302:	e004      	b.n	800d30e <HAL_UART_IRQHandler+0x54e>
    return;
 800d304:	bf00      	nop
 800d306:	e002      	b.n	800d30e <HAL_UART_IRQHandler+0x54e>
      return;
 800d308:	bf00      	nop
 800d30a:	e000      	b.n	800d30e <HAL_UART_IRQHandler+0x54e>
      return;
 800d30c:	bf00      	nop
  }
}
 800d30e:	37e8      	adds	r7, #232	@ 0xe8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	460b      	mov	r3, r1
 800d35a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	4613      	mov	r3, r2
 800d374:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	88fa      	ldrh	r2, [r7, #6]
 800d380:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	88fa      	ldrh	r2, [r7, #6]
 800d386:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2200      	movs	r2, #0
 800d38c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2222      	movs	r2, #34	@ 0x22
 800d392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	691b      	ldr	r3, [r3, #16]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d007      	beq.n	800d3ae <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	68da      	ldr	r2, [r3, #12]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d3ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	695a      	ldr	r2, [r3, #20]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f042 0201 	orr.w	r2, r2, #1
 800d3bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	68da      	ldr	r2, [r3, #12]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f042 0220 	orr.w	r2, r2, #32
 800d3cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d3ce:	2300      	movs	r3, #0
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3714      	adds	r7, #20
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b095      	sub	sp, #84	@ 0x54
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	330c      	adds	r3, #12
 800d3ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3ee:	e853 3f00 	ldrex	r3, [r3]
 800d3f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d3fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	330c      	adds	r3, #12
 800d402:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d404:	643a      	str	r2, [r7, #64]	@ 0x40
 800d406:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d408:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d40a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d40c:	e841 2300 	strex	r3, r2, [r1]
 800d410:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1e5      	bne.n	800d3e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	3314      	adds	r3, #20
 800d41e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	e853 3f00 	ldrex	r3, [r3]
 800d426:	61fb      	str	r3, [r7, #28]
   return(result);
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	f023 0301 	bic.w	r3, r3, #1
 800d42e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	3314      	adds	r3, #20
 800d436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d43a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d43e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d440:	e841 2300 	strex	r3, r2, [r1]
 800d444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1e5      	bne.n	800d418 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d450:	2b01      	cmp	r3, #1
 800d452:	d119      	bne.n	800d488 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	330c      	adds	r3, #12
 800d45a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	e853 3f00 	ldrex	r3, [r3]
 800d462:	60bb      	str	r3, [r7, #8]
   return(result);
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	f023 0310 	bic.w	r3, r3, #16
 800d46a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	330c      	adds	r3, #12
 800d472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d474:	61ba      	str	r2, [r7, #24]
 800d476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d478:	6979      	ldr	r1, [r7, #20]
 800d47a:	69ba      	ldr	r2, [r7, #24]
 800d47c:	e841 2300 	strex	r3, r2, [r1]
 800d480:	613b      	str	r3, [r7, #16]
   return(result);
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d1e5      	bne.n	800d454 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2220      	movs	r2, #32
 800d48c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d496:	bf00      	nop
 800d498:	3754      	adds	r7, #84	@ 0x54
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b084      	sub	sp, #16
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	f7ff ff40 	bl	800d33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4bc:	bf00      	nop
 800d4be:	3710      	adds	r7, #16
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b21      	cmp	r3, #33	@ 0x21
 800d4d6:	d13e      	bne.n	800d556 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4e0:	d114      	bne.n	800d50c <UART_Transmit_IT+0x48>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	691b      	ldr	r3, [r3, #16]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d110      	bne.n	800d50c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a1b      	ldr	r3, [r3, #32]
 800d4ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	881b      	ldrh	r3, [r3, #0]
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6a1b      	ldr	r3, [r3, #32]
 800d504:	1c9a      	adds	r2, r3, #2
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	621a      	str	r2, [r3, #32]
 800d50a:	e008      	b.n	800d51e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a1b      	ldr	r3, [r3, #32]
 800d510:	1c59      	adds	r1, r3, #1
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	6211      	str	r1, [r2, #32]
 800d516:	781a      	ldrb	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d522:	b29b      	uxth	r3, r3
 800d524:	3b01      	subs	r3, #1
 800d526:	b29b      	uxth	r3, r3
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	4619      	mov	r1, r3
 800d52c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d10f      	bne.n	800d552 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68da      	ldr	r2, [r3, #12]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d540:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	68da      	ldr	r2, [r3, #12]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d550:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	e000      	b.n	800d558 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d556:	2302      	movs	r3, #2
  }
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3714      	adds	r7, #20
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	68da      	ldr	r2, [r3, #12]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d57a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2220      	movs	r2, #32
 800d580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f7ff fec5 	bl	800d314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08c      	sub	sp, #48	@ 0x30
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800d59c:	2300      	movs	r3, #0
 800d59e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	2b22      	cmp	r3, #34	@ 0x22
 800d5ae:	f040 80aa 	bne.w	800d706 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5ba:	d115      	bne.n	800d5e8 <UART_Receive_IT+0x54>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d111      	bne.n	800d5e8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d6:	b29a      	uxth	r2, r3
 800d5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e0:	1c9a      	adds	r2, r3, #2
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	629a      	str	r2, [r3, #40]	@ 0x28
 800d5e6:	e024      	b.n	800d632 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5f6:	d007      	beq.n	800d608 <UART_Receive_IT+0x74>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d10a      	bne.n	800d616 <UART_Receive_IT+0x82>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	691b      	ldr	r3, [r3, #16]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d106      	bne.n	800d616 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d612:	701a      	strb	r2, [r3, #0]
 800d614:	e008      	b.n	800d628 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d622:	b2da      	uxtb	r2, r3
 800d624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d626:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d62c:	1c5a      	adds	r2, r3, #1
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d636:	b29b      	uxth	r3, r3
 800d638:	3b01      	subs	r3, #1
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	4619      	mov	r1, r3
 800d640:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d642:	2b00      	cmp	r3, #0
 800d644:	d15d      	bne.n	800d702 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	68da      	ldr	r2, [r3, #12]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f022 0220 	bic.w	r2, r2, #32
 800d654:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68da      	ldr	r2, [r3, #12]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d664:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	695a      	ldr	r2, [r3, #20]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f022 0201 	bic.w	r2, r2, #1
 800d674:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2220      	movs	r2, #32
 800d67a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2200      	movs	r2, #0
 800d682:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d135      	bne.n	800d6f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	330c      	adds	r3, #12
 800d698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	e853 3f00 	ldrex	r3, [r3]
 800d6a0:	613b      	str	r3, [r7, #16]
   return(result);
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f023 0310 	bic.w	r3, r3, #16
 800d6a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	330c      	adds	r3, #12
 800d6b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6b2:	623a      	str	r2, [r7, #32]
 800d6b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b6:	69f9      	ldr	r1, [r7, #28]
 800d6b8:	6a3a      	ldr	r2, [r7, #32]
 800d6ba:	e841 2300 	strex	r3, r2, [r1]
 800d6be:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d1e5      	bne.n	800d692 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f003 0310 	and.w	r3, r3, #16
 800d6d0:	2b10      	cmp	r3, #16
 800d6d2:	d10a      	bne.n	800d6ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	60fb      	str	r3, [r7, #12]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	60fb      	str	r3, [r7, #12]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	60fb      	str	r3, [r7, #12]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff fe2d 	bl	800d350 <HAL_UARTEx_RxEventCallback>
 800d6f6:	e002      	b.n	800d6fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f7ff fe15 	bl	800d328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d6fe:	2300      	movs	r3, #0
 800d700:	e002      	b.n	800d708 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d702:	2300      	movs	r3, #0
 800d704:	e000      	b.n	800d708 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d706:	2302      	movs	r3, #2
  }
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3730      	adds	r7, #48	@ 0x30
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d714:	b0c0      	sub	sp, #256	@ 0x100
 800d716:	af00      	add	r7, sp, #0
 800d718:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d71c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	691b      	ldr	r3, [r3, #16]
 800d724:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d72c:	68d9      	ldr	r1, [r3, #12]
 800d72e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	ea40 0301 	orr.w	r3, r0, r1
 800d738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d73e:	689a      	ldr	r2, [r3, #8]
 800d740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	431a      	orrs	r2, r3
 800d748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d74c:	695b      	ldr	r3, [r3, #20]
 800d74e:	431a      	orrs	r2, r3
 800d750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d754:	69db      	ldr	r3, [r3, #28]
 800d756:	4313      	orrs	r3, r2
 800d758:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d768:	f021 010c 	bic.w	r1, r1, #12
 800d76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d776:	430b      	orrs	r3, r1
 800d778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d77a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	695b      	ldr	r3, [r3, #20]
 800d782:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d78a:	6999      	ldr	r1, [r3, #24]
 800d78c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	ea40 0301 	orr.w	r3, r0, r1
 800d796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	4b8f      	ldr	r3, [pc, #572]	@ (800d9dc <UART_SetConfig+0x2cc>)
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d005      	beq.n	800d7b0 <UART_SetConfig+0xa0>
 800d7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	4b8d      	ldr	r3, [pc, #564]	@ (800d9e0 <UART_SetConfig+0x2d0>)
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d104      	bne.n	800d7ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d7b0:	f7fd ff08 	bl	800b5c4 <HAL_RCC_GetPCLK2Freq>
 800d7b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d7b8:	e003      	b.n	800d7c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d7ba:	f7fd feef 	bl	800b59c <HAL_RCC_GetPCLK1Freq>
 800d7be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d7c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7c6:	69db      	ldr	r3, [r3, #28]
 800d7c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d7cc:	f040 810c 	bne.w	800d9e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d7d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d7de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d7e2:	4622      	mov	r2, r4
 800d7e4:	462b      	mov	r3, r5
 800d7e6:	1891      	adds	r1, r2, r2
 800d7e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d7ea:	415b      	adcs	r3, r3
 800d7ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d7ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	eb12 0801 	adds.w	r8, r2, r1
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	eb43 0901 	adc.w	r9, r3, r1
 800d7fe:	f04f 0200 	mov.w	r2, #0
 800d802:	f04f 0300 	mov.w	r3, #0
 800d806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d80a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d80e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d812:	4690      	mov	r8, r2
 800d814:	4699      	mov	r9, r3
 800d816:	4623      	mov	r3, r4
 800d818:	eb18 0303 	adds.w	r3, r8, r3
 800d81c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d820:	462b      	mov	r3, r5
 800d822:	eb49 0303 	adc.w	r3, r9, r3
 800d826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d836:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d83a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d83e:	460b      	mov	r3, r1
 800d840:	18db      	adds	r3, r3, r3
 800d842:	653b      	str	r3, [r7, #80]	@ 0x50
 800d844:	4613      	mov	r3, r2
 800d846:	eb42 0303 	adc.w	r3, r2, r3
 800d84a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d84c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d854:	f7f3 fa70 	bl	8000d38 <__aeabi_uldivmod>
 800d858:	4602      	mov	r2, r0
 800d85a:	460b      	mov	r3, r1
 800d85c:	4b61      	ldr	r3, [pc, #388]	@ (800d9e4 <UART_SetConfig+0x2d4>)
 800d85e:	fba3 2302 	umull	r2, r3, r3, r2
 800d862:	095b      	lsrs	r3, r3, #5
 800d864:	011c      	lsls	r4, r3, #4
 800d866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d86a:	2200      	movs	r2, #0
 800d86c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d870:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d878:	4642      	mov	r2, r8
 800d87a:	464b      	mov	r3, r9
 800d87c:	1891      	adds	r1, r2, r2
 800d87e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d880:	415b      	adcs	r3, r3
 800d882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d888:	4641      	mov	r1, r8
 800d88a:	eb12 0a01 	adds.w	sl, r2, r1
 800d88e:	4649      	mov	r1, r9
 800d890:	eb43 0b01 	adc.w	fp, r3, r1
 800d894:	f04f 0200 	mov.w	r2, #0
 800d898:	f04f 0300 	mov.w	r3, #0
 800d89c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d8a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d8a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d8a8:	4692      	mov	sl, r2
 800d8aa:	469b      	mov	fp, r3
 800d8ac:	4643      	mov	r3, r8
 800d8ae:	eb1a 0303 	adds.w	r3, sl, r3
 800d8b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d8b6:	464b      	mov	r3, r9
 800d8b8:	eb4b 0303 	adc.w	r3, fp, r3
 800d8bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d8cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d8d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	18db      	adds	r3, r3, r3
 800d8d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8da:	4613      	mov	r3, r2
 800d8dc:	eb42 0303 	adc.w	r3, r2, r3
 800d8e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d8e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d8ea:	f7f3 fa25 	bl	8000d38 <__aeabi_uldivmod>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	4b3b      	ldr	r3, [pc, #236]	@ (800d9e4 <UART_SetConfig+0x2d4>)
 800d8f6:	fba3 2301 	umull	r2, r3, r3, r1
 800d8fa:	095b      	lsrs	r3, r3, #5
 800d8fc:	2264      	movs	r2, #100	@ 0x64
 800d8fe:	fb02 f303 	mul.w	r3, r2, r3
 800d902:	1acb      	subs	r3, r1, r3
 800d904:	00db      	lsls	r3, r3, #3
 800d906:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d90a:	4b36      	ldr	r3, [pc, #216]	@ (800d9e4 <UART_SetConfig+0x2d4>)
 800d90c:	fba3 2302 	umull	r2, r3, r3, r2
 800d910:	095b      	lsrs	r3, r3, #5
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d918:	441c      	add	r4, r3
 800d91a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d91e:	2200      	movs	r2, #0
 800d920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d924:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d92c:	4642      	mov	r2, r8
 800d92e:	464b      	mov	r3, r9
 800d930:	1891      	adds	r1, r2, r2
 800d932:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d934:	415b      	adcs	r3, r3
 800d936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d93c:	4641      	mov	r1, r8
 800d93e:	1851      	adds	r1, r2, r1
 800d940:	6339      	str	r1, [r7, #48]	@ 0x30
 800d942:	4649      	mov	r1, r9
 800d944:	414b      	adcs	r3, r1
 800d946:	637b      	str	r3, [r7, #52]	@ 0x34
 800d948:	f04f 0200 	mov.w	r2, #0
 800d94c:	f04f 0300 	mov.w	r3, #0
 800d950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d954:	4659      	mov	r1, fp
 800d956:	00cb      	lsls	r3, r1, #3
 800d958:	4651      	mov	r1, sl
 800d95a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d95e:	4651      	mov	r1, sl
 800d960:	00ca      	lsls	r2, r1, #3
 800d962:	4610      	mov	r0, r2
 800d964:	4619      	mov	r1, r3
 800d966:	4603      	mov	r3, r0
 800d968:	4642      	mov	r2, r8
 800d96a:	189b      	adds	r3, r3, r2
 800d96c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d970:	464b      	mov	r3, r9
 800d972:	460a      	mov	r2, r1
 800d974:	eb42 0303 	adc.w	r3, r2, r3
 800d978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d988:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d98c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d990:	460b      	mov	r3, r1
 800d992:	18db      	adds	r3, r3, r3
 800d994:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d996:	4613      	mov	r3, r2
 800d998:	eb42 0303 	adc.w	r3, r2, r3
 800d99c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d99e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d9a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d9a6:	f7f3 f9c7 	bl	8000d38 <__aeabi_uldivmod>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d9e4 <UART_SetConfig+0x2d4>)
 800d9b0:	fba3 1302 	umull	r1, r3, r3, r2
 800d9b4:	095b      	lsrs	r3, r3, #5
 800d9b6:	2164      	movs	r1, #100	@ 0x64
 800d9b8:	fb01 f303 	mul.w	r3, r1, r3
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	00db      	lsls	r3, r3, #3
 800d9c0:	3332      	adds	r3, #50	@ 0x32
 800d9c2:	4a08      	ldr	r2, [pc, #32]	@ (800d9e4 <UART_SetConfig+0x2d4>)
 800d9c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c8:	095b      	lsrs	r3, r3, #5
 800d9ca:	f003 0207 	and.w	r2, r3, #7
 800d9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4422      	add	r2, r4
 800d9d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d9d8:	e106      	b.n	800dbe8 <UART_SetConfig+0x4d8>
 800d9da:	bf00      	nop
 800d9dc:	40011000 	.word	0x40011000
 800d9e0:	40011400 	.word	0x40011400
 800d9e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d9e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d9f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d9f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d9fa:	4642      	mov	r2, r8
 800d9fc:	464b      	mov	r3, r9
 800d9fe:	1891      	adds	r1, r2, r2
 800da00:	6239      	str	r1, [r7, #32]
 800da02:	415b      	adcs	r3, r3
 800da04:	627b      	str	r3, [r7, #36]	@ 0x24
 800da06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800da0a:	4641      	mov	r1, r8
 800da0c:	1854      	adds	r4, r2, r1
 800da0e:	4649      	mov	r1, r9
 800da10:	eb43 0501 	adc.w	r5, r3, r1
 800da14:	f04f 0200 	mov.w	r2, #0
 800da18:	f04f 0300 	mov.w	r3, #0
 800da1c:	00eb      	lsls	r3, r5, #3
 800da1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800da22:	00e2      	lsls	r2, r4, #3
 800da24:	4614      	mov	r4, r2
 800da26:	461d      	mov	r5, r3
 800da28:	4643      	mov	r3, r8
 800da2a:	18e3      	adds	r3, r4, r3
 800da2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800da30:	464b      	mov	r3, r9
 800da32:	eb45 0303 	adc.w	r3, r5, r3
 800da36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800da46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800da4a:	f04f 0200 	mov.w	r2, #0
 800da4e:	f04f 0300 	mov.w	r3, #0
 800da52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800da56:	4629      	mov	r1, r5
 800da58:	008b      	lsls	r3, r1, #2
 800da5a:	4621      	mov	r1, r4
 800da5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800da60:	4621      	mov	r1, r4
 800da62:	008a      	lsls	r2, r1, #2
 800da64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800da68:	f7f3 f966 	bl	8000d38 <__aeabi_uldivmod>
 800da6c:	4602      	mov	r2, r0
 800da6e:	460b      	mov	r3, r1
 800da70:	4b60      	ldr	r3, [pc, #384]	@ (800dbf4 <UART_SetConfig+0x4e4>)
 800da72:	fba3 2302 	umull	r2, r3, r3, r2
 800da76:	095b      	lsrs	r3, r3, #5
 800da78:	011c      	lsls	r4, r3, #4
 800da7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da7e:	2200      	movs	r2, #0
 800da80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800da84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800da88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800da8c:	4642      	mov	r2, r8
 800da8e:	464b      	mov	r3, r9
 800da90:	1891      	adds	r1, r2, r2
 800da92:	61b9      	str	r1, [r7, #24]
 800da94:	415b      	adcs	r3, r3
 800da96:	61fb      	str	r3, [r7, #28]
 800da98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800da9c:	4641      	mov	r1, r8
 800da9e:	1851      	adds	r1, r2, r1
 800daa0:	6139      	str	r1, [r7, #16]
 800daa2:	4649      	mov	r1, r9
 800daa4:	414b      	adcs	r3, r1
 800daa6:	617b      	str	r3, [r7, #20]
 800daa8:	f04f 0200 	mov.w	r2, #0
 800daac:	f04f 0300 	mov.w	r3, #0
 800dab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dab4:	4659      	mov	r1, fp
 800dab6:	00cb      	lsls	r3, r1, #3
 800dab8:	4651      	mov	r1, sl
 800daba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dabe:	4651      	mov	r1, sl
 800dac0:	00ca      	lsls	r2, r1, #3
 800dac2:	4610      	mov	r0, r2
 800dac4:	4619      	mov	r1, r3
 800dac6:	4603      	mov	r3, r0
 800dac8:	4642      	mov	r2, r8
 800daca:	189b      	adds	r3, r3, r2
 800dacc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dad0:	464b      	mov	r3, r9
 800dad2:	460a      	mov	r2, r1
 800dad4:	eb42 0303 	adc.w	r3, r2, r3
 800dad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dadc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dae6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800dae8:	f04f 0200 	mov.w	r2, #0
 800daec:	f04f 0300 	mov.w	r3, #0
 800daf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800daf4:	4649      	mov	r1, r9
 800daf6:	008b      	lsls	r3, r1, #2
 800daf8:	4641      	mov	r1, r8
 800dafa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dafe:	4641      	mov	r1, r8
 800db00:	008a      	lsls	r2, r1, #2
 800db02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800db06:	f7f3 f917 	bl	8000d38 <__aeabi_uldivmod>
 800db0a:	4602      	mov	r2, r0
 800db0c:	460b      	mov	r3, r1
 800db0e:	4611      	mov	r1, r2
 800db10:	4b38      	ldr	r3, [pc, #224]	@ (800dbf4 <UART_SetConfig+0x4e4>)
 800db12:	fba3 2301 	umull	r2, r3, r3, r1
 800db16:	095b      	lsrs	r3, r3, #5
 800db18:	2264      	movs	r2, #100	@ 0x64
 800db1a:	fb02 f303 	mul.w	r3, r2, r3
 800db1e:	1acb      	subs	r3, r1, r3
 800db20:	011b      	lsls	r3, r3, #4
 800db22:	3332      	adds	r3, #50	@ 0x32
 800db24:	4a33      	ldr	r2, [pc, #204]	@ (800dbf4 <UART_SetConfig+0x4e4>)
 800db26:	fba2 2303 	umull	r2, r3, r2, r3
 800db2a:	095b      	lsrs	r3, r3, #5
 800db2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800db30:	441c      	add	r4, r3
 800db32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800db36:	2200      	movs	r2, #0
 800db38:	673b      	str	r3, [r7, #112]	@ 0x70
 800db3a:	677a      	str	r2, [r7, #116]	@ 0x74
 800db3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800db40:	4642      	mov	r2, r8
 800db42:	464b      	mov	r3, r9
 800db44:	1891      	adds	r1, r2, r2
 800db46:	60b9      	str	r1, [r7, #8]
 800db48:	415b      	adcs	r3, r3
 800db4a:	60fb      	str	r3, [r7, #12]
 800db4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db50:	4641      	mov	r1, r8
 800db52:	1851      	adds	r1, r2, r1
 800db54:	6039      	str	r1, [r7, #0]
 800db56:	4649      	mov	r1, r9
 800db58:	414b      	adcs	r3, r1
 800db5a:	607b      	str	r3, [r7, #4]
 800db5c:	f04f 0200 	mov.w	r2, #0
 800db60:	f04f 0300 	mov.w	r3, #0
 800db64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800db68:	4659      	mov	r1, fp
 800db6a:	00cb      	lsls	r3, r1, #3
 800db6c:	4651      	mov	r1, sl
 800db6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db72:	4651      	mov	r1, sl
 800db74:	00ca      	lsls	r2, r1, #3
 800db76:	4610      	mov	r0, r2
 800db78:	4619      	mov	r1, r3
 800db7a:	4603      	mov	r3, r0
 800db7c:	4642      	mov	r2, r8
 800db7e:	189b      	adds	r3, r3, r2
 800db80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db82:	464b      	mov	r3, r9
 800db84:	460a      	mov	r2, r1
 800db86:	eb42 0303 	adc.w	r3, r2, r3
 800db8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	663b      	str	r3, [r7, #96]	@ 0x60
 800db96:	667a      	str	r2, [r7, #100]	@ 0x64
 800db98:	f04f 0200 	mov.w	r2, #0
 800db9c:	f04f 0300 	mov.w	r3, #0
 800dba0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800dba4:	4649      	mov	r1, r9
 800dba6:	008b      	lsls	r3, r1, #2
 800dba8:	4641      	mov	r1, r8
 800dbaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dbae:	4641      	mov	r1, r8
 800dbb0:	008a      	lsls	r2, r1, #2
 800dbb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800dbb6:	f7f3 f8bf 	bl	8000d38 <__aeabi_uldivmod>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	4b0d      	ldr	r3, [pc, #52]	@ (800dbf4 <UART_SetConfig+0x4e4>)
 800dbc0:	fba3 1302 	umull	r1, r3, r3, r2
 800dbc4:	095b      	lsrs	r3, r3, #5
 800dbc6:	2164      	movs	r1, #100	@ 0x64
 800dbc8:	fb01 f303 	mul.w	r3, r1, r3
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	011b      	lsls	r3, r3, #4
 800dbd0:	3332      	adds	r3, #50	@ 0x32
 800dbd2:	4a08      	ldr	r2, [pc, #32]	@ (800dbf4 <UART_SetConfig+0x4e4>)
 800dbd4:	fba2 2303 	umull	r2, r3, r2, r3
 800dbd8:	095b      	lsrs	r3, r3, #5
 800dbda:	f003 020f 	and.w	r2, r3, #15
 800dbde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4422      	add	r2, r4
 800dbe6:	609a      	str	r2, [r3, #8]
}
 800dbe8:	bf00      	nop
 800dbea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbf4:	51eb851f 	.word	0x51eb851f

0800dbf8 <__NVIC_SetPriority>:
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	4603      	mov	r3, r0
 800dc00:	6039      	str	r1, [r7, #0]
 800dc02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dc04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	db0a      	blt.n	800dc22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	b2da      	uxtb	r2, r3
 800dc10:	490c      	ldr	r1, [pc, #48]	@ (800dc44 <__NVIC_SetPriority+0x4c>)
 800dc12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc16:	0112      	lsls	r2, r2, #4
 800dc18:	b2d2      	uxtb	r2, r2
 800dc1a:	440b      	add	r3, r1
 800dc1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800dc20:	e00a      	b.n	800dc38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	4908      	ldr	r1, [pc, #32]	@ (800dc48 <__NVIC_SetPriority+0x50>)
 800dc28:	79fb      	ldrb	r3, [r7, #7]
 800dc2a:	f003 030f 	and.w	r3, r3, #15
 800dc2e:	3b04      	subs	r3, #4
 800dc30:	0112      	lsls	r2, r2, #4
 800dc32:	b2d2      	uxtb	r2, r2
 800dc34:	440b      	add	r3, r1
 800dc36:	761a      	strb	r2, [r3, #24]
}
 800dc38:	bf00      	nop
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	e000e100 	.word	0xe000e100
 800dc48:	e000ed00 	.word	0xe000ed00

0800dc4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dc50:	4b05      	ldr	r3, [pc, #20]	@ (800dc68 <SysTick_Handler+0x1c>)
 800dc52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dc54:	f001 fd2a 	bl	800f6ac <xTaskGetSchedulerState>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d001      	beq.n	800dc62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dc5e:	f002 fb23 	bl	80102a8 <xPortSysTickHandler>
  }
}
 800dc62:	bf00      	nop
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	e000e010 	.word	0xe000e010

0800dc6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dc70:	2100      	movs	r1, #0
 800dc72:	f06f 0004 	mvn.w	r0, #4
 800dc76:	f7ff ffbf 	bl	800dbf8 <__NVIC_SetPriority>
#endif
}
 800dc7a:	bf00      	nop
 800dc7c:	bd80      	pop	{r7, pc}
	...

0800dc80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc86:	f3ef 8305 	mrs	r3, IPSR
 800dc8a:	603b      	str	r3, [r7, #0]
  return(result);
 800dc8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d003      	beq.n	800dc9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dc92:	f06f 0305 	mvn.w	r3, #5
 800dc96:	607b      	str	r3, [r7, #4]
 800dc98:	e00c      	b.n	800dcb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dc9a:	4b0a      	ldr	r3, [pc, #40]	@ (800dcc4 <osKernelInitialize+0x44>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d105      	bne.n	800dcae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dca2:	4b08      	ldr	r3, [pc, #32]	@ (800dcc4 <osKernelInitialize+0x44>)
 800dca4:	2201      	movs	r2, #1
 800dca6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	607b      	str	r3, [r7, #4]
 800dcac:	e002      	b.n	800dcb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dcae:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dcb4:	687b      	ldr	r3, [r7, #4]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	370c      	adds	r7, #12
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop
 800dcc4:	20000a80 	.word	0x20000a80

0800dcc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcce:	f3ef 8305 	mrs	r3, IPSR
 800dcd2:	603b      	str	r3, [r7, #0]
  return(result);
 800dcd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d003      	beq.n	800dce2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800dcda:	f06f 0305 	mvn.w	r3, #5
 800dcde:	607b      	str	r3, [r7, #4]
 800dce0:	e010      	b.n	800dd04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dce2:	4b0b      	ldr	r3, [pc, #44]	@ (800dd10 <osKernelStart+0x48>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d109      	bne.n	800dcfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dcea:	f7ff ffbf 	bl	800dc6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dcee:	4b08      	ldr	r3, [pc, #32]	@ (800dd10 <osKernelStart+0x48>)
 800dcf0:	2202      	movs	r2, #2
 800dcf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dcf4:	f001 f876 	bl	800ede4 <vTaskStartScheduler>
      stat = osOK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	607b      	str	r3, [r7, #4]
 800dcfc:	e002      	b.n	800dd04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dcfe:	f04f 33ff 	mov.w	r3, #4294967295
 800dd02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dd04:	687b      	ldr	r3, [r7, #4]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3708      	adds	r7, #8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	20000a80 	.word	0x20000a80

0800dd14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b08e      	sub	sp, #56	@ 0x38
 800dd18:	af04      	add	r7, sp, #16
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dd20:	2300      	movs	r3, #0
 800dd22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd24:	f3ef 8305 	mrs	r3, IPSR
 800dd28:	617b      	str	r3, [r7, #20]
  return(result);
 800dd2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d17e      	bne.n	800de2e <osThreadNew+0x11a>
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d07b      	beq.n	800de2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dd36:	2380      	movs	r3, #128	@ 0x80
 800dd38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dd3a:	2318      	movs	r3, #24
 800dd3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800dd42:	f04f 33ff 	mov.w	r3, #4294967295
 800dd46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d045      	beq.n	800ddda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d002      	beq.n	800dd5c <osThreadNew+0x48>
        name = attr->name;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	699b      	ldr	r3, [r3, #24]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	699b      	ldr	r3, [r3, #24]
 800dd68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d008      	beq.n	800dd82 <osThreadNew+0x6e>
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	2b38      	cmp	r3, #56	@ 0x38
 800dd74:	d805      	bhi.n	800dd82 <osThreadNew+0x6e>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	f003 0301 	and.w	r3, r3, #1
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <osThreadNew+0x72>
        return (NULL);
 800dd82:	2300      	movs	r3, #0
 800dd84:	e054      	b.n	800de30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	695b      	ldr	r3, [r3, #20]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d003      	beq.n	800dd96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	695b      	ldr	r3, [r3, #20]
 800dd92:	089b      	lsrs	r3, r3, #2
 800dd94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00e      	beq.n	800ddbc <osThreadNew+0xa8>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	2ba7      	cmp	r3, #167	@ 0xa7
 800dda4:	d90a      	bls.n	800ddbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d006      	beq.n	800ddbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	695b      	ldr	r3, [r3, #20]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <osThreadNew+0xa8>
        mem = 1;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	61bb      	str	r3, [r7, #24]
 800ddba:	e010      	b.n	800ddde <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10c      	bne.n	800ddde <osThreadNew+0xca>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d108      	bne.n	800ddde <osThreadNew+0xca>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	691b      	ldr	r3, [r3, #16]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d104      	bne.n	800ddde <osThreadNew+0xca>
          mem = 0;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	61bb      	str	r3, [r7, #24]
 800ddd8:	e001      	b.n	800ddde <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d110      	bne.n	800de06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ddec:	9202      	str	r2, [sp, #8]
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	6a3a      	ldr	r2, [r7, #32]
 800ddf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	f000 fdfe 	bl	800e9fc <xTaskCreateStatic>
 800de00:	4603      	mov	r3, r0
 800de02:	613b      	str	r3, [r7, #16]
 800de04:	e013      	b.n	800de2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d110      	bne.n	800de2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	b29a      	uxth	r2, r3
 800de10:	f107 0310 	add.w	r3, r7, #16
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f000 fe4c 	bl	800eabc <xTaskCreate>
 800de24:	4603      	mov	r3, r0
 800de26:	2b01      	cmp	r3, #1
 800de28:	d001      	beq.n	800de2e <osThreadNew+0x11a>
            hTask = NULL;
 800de2a:	2300      	movs	r3, #0
 800de2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800de2e:	693b      	ldr	r3, [r7, #16]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3728      	adds	r7, #40	@ 0x28
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de38:	b480      	push	{r7}
 800de3a:	b085      	sub	sp, #20
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	4a07      	ldr	r2, [pc, #28]	@ (800de64 <vApplicationGetIdleTaskMemory+0x2c>)
 800de48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	4a06      	ldr	r2, [pc, #24]	@ (800de68 <vApplicationGetIdleTaskMemory+0x30>)
 800de4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2280      	movs	r2, #128	@ 0x80
 800de54:	601a      	str	r2, [r3, #0]
}
 800de56:	bf00      	nop
 800de58:	3714      	adds	r7, #20
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	20000a84 	.word	0x20000a84
 800de68:	20000b2c 	.word	0x20000b2c

0800de6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	4a07      	ldr	r2, [pc, #28]	@ (800de98 <vApplicationGetTimerTaskMemory+0x2c>)
 800de7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	4a06      	ldr	r2, [pc, #24]	@ (800de9c <vApplicationGetTimerTaskMemory+0x30>)
 800de82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800de8a:	601a      	str	r2, [r3, #0]
}
 800de8c:	bf00      	nop
 800de8e:	3714      	adds	r7, #20
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr
 800de98:	20000d2c 	.word	0x20000d2c
 800de9c:	20000dd4 	.word	0x20000dd4

0800dea0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f103 0208 	add.w	r2, r3, #8
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f04f 32ff 	mov.w	r2, #4294967295
 800deb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f103 0208 	add.w	r2, r3, #8
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f103 0208 	add.w	r2, r3, #8
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ded4:	bf00      	nop
 800ded6:	370c      	adds	r7, #12
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800deee:	bf00      	nop
 800def0:	370c      	adds	r7, #12
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr

0800defa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800defa:	b480      	push	{r7}
 800defc:	b085      	sub	sp, #20
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
 800df02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	689a      	ldr	r2, [r3, #8]
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	689b      	ldr	r3, [r3, #8]
 800df1c:	683a      	ldr	r2, [r7, #0]
 800df1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	683a      	ldr	r2, [r7, #0]
 800df24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	1c5a      	adds	r2, r3, #1
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	601a      	str	r2, [r3, #0]
}
 800df36:	bf00      	nop
 800df38:	3714      	adds	r7, #20
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr

0800df42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df42:	b480      	push	{r7}
 800df44:	b085      	sub	sp, #20
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
 800df4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df58:	d103      	bne.n	800df62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	60fb      	str	r3, [r7, #12]
 800df60:	e00c      	b.n	800df7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	3308      	adds	r3, #8
 800df66:	60fb      	str	r3, [r7, #12]
 800df68:	e002      	b.n	800df70 <vListInsert+0x2e>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	60fb      	str	r3, [r7, #12]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d2f6      	bcs.n	800df6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	685a      	ldr	r2, [r3, #4]
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	683a      	ldr	r2, [r7, #0]
 800df8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	683a      	ldr	r2, [r7, #0]
 800df96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	687a      	ldr	r2, [r7, #4]
 800df9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	1c5a      	adds	r2, r3, #1
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	601a      	str	r2, [r3, #0]
}
 800dfa8:	bf00      	nop
 800dfaa:	3714      	adds	r7, #20
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	691b      	ldr	r3, [r3, #16]
 800dfc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	6892      	ldr	r2, [r2, #8]
 800dfca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	6852      	ldr	r2, [r2, #4]
 800dfd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d103      	bne.n	800dfe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	689a      	ldr	r2, [r3, #8]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	1e5a      	subs	r2, r3, #1
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3714      	adds	r7, #20
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d10b      	bne.n	800e034 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e020:	f383 8811 	msr	BASEPRI, r3
 800e024:	f3bf 8f6f 	isb	sy
 800e028:	f3bf 8f4f 	dsb	sy
 800e02c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e02e:	bf00      	nop
 800e030:	bf00      	nop
 800e032:	e7fd      	b.n	800e030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e034:	f002 f8a8 	bl	8010188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e040:	68f9      	ldr	r1, [r7, #12]
 800e042:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e044:	fb01 f303 	mul.w	r3, r1, r3
 800e048:	441a      	add	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2200      	movs	r2, #0
 800e052:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e064:	3b01      	subs	r3, #1
 800e066:	68f9      	ldr	r1, [r7, #12]
 800e068:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e06a:	fb01 f303 	mul.w	r3, r1, r3
 800e06e:	441a      	add	r2, r3
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	22ff      	movs	r2, #255	@ 0xff
 800e078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	22ff      	movs	r2, #255	@ 0xff
 800e080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d114      	bne.n	800e0b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d01a      	beq.n	800e0c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3310      	adds	r3, #16
 800e096:	4618      	mov	r0, r3
 800e098:	f001 f942 	bl	800f320 <xTaskRemoveFromEventList>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d012      	beq.n	800e0c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e0d8 <xQueueGenericReset+0xd0>)
 800e0a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0a8:	601a      	str	r2, [r3, #0]
 800e0aa:	f3bf 8f4f 	dsb	sy
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	e009      	b.n	800e0c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	3310      	adds	r3, #16
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7ff fef1 	bl	800dea0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	3324      	adds	r3, #36	@ 0x24
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7ff feec 	bl	800dea0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e0c8:	f002 f890 	bl	80101ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e0cc:	2301      	movs	r3, #1
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	e000ed04 	.word	0xe000ed04

0800e0dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b08e      	sub	sp, #56	@ 0x38
 800e0e0:	af02      	add	r7, sp, #8
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]
 800e0e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d10b      	bne.n	800e108 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f4:	f383 8811 	msr	BASEPRI, r3
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e102:	bf00      	nop
 800e104:	bf00      	nop
 800e106:	e7fd      	b.n	800e104 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d10b      	bne.n	800e126 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e120:	bf00      	nop
 800e122:	bf00      	nop
 800e124:	e7fd      	b.n	800e122 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d002      	beq.n	800e132 <xQueueGenericCreateStatic+0x56>
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <xQueueGenericCreateStatic+0x5a>
 800e132:	2301      	movs	r3, #1
 800e134:	e000      	b.n	800e138 <xQueueGenericCreateStatic+0x5c>
 800e136:	2300      	movs	r3, #0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d10b      	bne.n	800e154 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e140:	f383 8811 	msr	BASEPRI, r3
 800e144:	f3bf 8f6f 	isb	sy
 800e148:	f3bf 8f4f 	dsb	sy
 800e14c:	623b      	str	r3, [r7, #32]
}
 800e14e:	bf00      	nop
 800e150:	bf00      	nop
 800e152:	e7fd      	b.n	800e150 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d102      	bne.n	800e160 <xQueueGenericCreateStatic+0x84>
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d101      	bne.n	800e164 <xQueueGenericCreateStatic+0x88>
 800e160:	2301      	movs	r3, #1
 800e162:	e000      	b.n	800e166 <xQueueGenericCreateStatic+0x8a>
 800e164:	2300      	movs	r3, #0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10b      	bne.n	800e182 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16e:	f383 8811 	msr	BASEPRI, r3
 800e172:	f3bf 8f6f 	isb	sy
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	61fb      	str	r3, [r7, #28]
}
 800e17c:	bf00      	nop
 800e17e:	bf00      	nop
 800e180:	e7fd      	b.n	800e17e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e182:	2350      	movs	r3, #80	@ 0x50
 800e184:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	2b50      	cmp	r3, #80	@ 0x50
 800e18a:	d00b      	beq.n	800e1a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e190:	f383 8811 	msr	BASEPRI, r3
 800e194:	f3bf 8f6f 	isb	sy
 800e198:	f3bf 8f4f 	dsb	sy
 800e19c:	61bb      	str	r3, [r7, #24]
}
 800e19e:	bf00      	nop
 800e1a0:	bf00      	nop
 800e1a2:	e7fd      	b.n	800e1a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e1a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00d      	beq.n	800e1cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	68b9      	ldr	r1, [r7, #8]
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f000 f805 	bl	800e1d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3730      	adds	r7, #48	@ 0x30
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b084      	sub	sp, #16
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	60f8      	str	r0, [r7, #12]
 800e1de:	60b9      	str	r1, [r7, #8]
 800e1e0:	607a      	str	r2, [r7, #4]
 800e1e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d103      	bne.n	800e1f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	69ba      	ldr	r2, [r7, #24]
 800e1ee:	601a      	str	r2, [r3, #0]
 800e1f0:	e002      	b.n	800e1f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e204:	2101      	movs	r1, #1
 800e206:	69b8      	ldr	r0, [r7, #24]
 800e208:	f7ff fefe 	bl	800e008 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	78fa      	ldrb	r2, [r7, #3]
 800e210:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e214:	bf00      	nop
 800e216:	3710      	adds	r7, #16
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08e      	sub	sp, #56	@ 0x38
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
 800e228:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e22a:	2300      	movs	r3, #0
 800e22c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e234:	2b00      	cmp	r3, #0
 800e236:	d10b      	bne.n	800e250 <xQueueGenericSend+0x34>
	__asm volatile
 800e238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e23c:	f383 8811 	msr	BASEPRI, r3
 800e240:	f3bf 8f6f 	isb	sy
 800e244:	f3bf 8f4f 	dsb	sy
 800e248:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e24a:	bf00      	nop
 800e24c:	bf00      	nop
 800e24e:	e7fd      	b.n	800e24c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d103      	bne.n	800e25e <xQueueGenericSend+0x42>
 800e256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <xQueueGenericSend+0x46>
 800e25e:	2301      	movs	r3, #1
 800e260:	e000      	b.n	800e264 <xQueueGenericSend+0x48>
 800e262:	2300      	movs	r3, #0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d10b      	bne.n	800e280 <xQueueGenericSend+0x64>
	__asm volatile
 800e268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e26c:	f383 8811 	msr	BASEPRI, r3
 800e270:	f3bf 8f6f 	isb	sy
 800e274:	f3bf 8f4f 	dsb	sy
 800e278:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e27a:	bf00      	nop
 800e27c:	bf00      	nop
 800e27e:	e7fd      	b.n	800e27c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2b02      	cmp	r3, #2
 800e284:	d103      	bne.n	800e28e <xQueueGenericSend+0x72>
 800e286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d101      	bne.n	800e292 <xQueueGenericSend+0x76>
 800e28e:	2301      	movs	r3, #1
 800e290:	e000      	b.n	800e294 <xQueueGenericSend+0x78>
 800e292:	2300      	movs	r3, #0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10b      	bne.n	800e2b0 <xQueueGenericSend+0x94>
	__asm volatile
 800e298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e29c:	f383 8811 	msr	BASEPRI, r3
 800e2a0:	f3bf 8f6f 	isb	sy
 800e2a4:	f3bf 8f4f 	dsb	sy
 800e2a8:	623b      	str	r3, [r7, #32]
}
 800e2aa:	bf00      	nop
 800e2ac:	bf00      	nop
 800e2ae:	e7fd      	b.n	800e2ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2b0:	f001 f9fc 	bl	800f6ac <xTaskGetSchedulerState>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d102      	bne.n	800e2c0 <xQueueGenericSend+0xa4>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d101      	bne.n	800e2c4 <xQueueGenericSend+0xa8>
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	e000      	b.n	800e2c6 <xQueueGenericSend+0xaa>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d10b      	bne.n	800e2e2 <xQueueGenericSend+0xc6>
	__asm volatile
 800e2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ce:	f383 8811 	msr	BASEPRI, r3
 800e2d2:	f3bf 8f6f 	isb	sy
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	61fb      	str	r3, [r7, #28]
}
 800e2dc:	bf00      	nop
 800e2de:	bf00      	nop
 800e2e0:	e7fd      	b.n	800e2de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2e2:	f001 ff51 	bl	8010188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d302      	bcc.n	800e2f8 <xQueueGenericSend+0xdc>
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d129      	bne.n	800e34c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	68b9      	ldr	r1, [r7, #8]
 800e2fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e2fe:	f000 fa0f 	bl	800e720 <prvCopyDataToQueue>
 800e302:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d010      	beq.n	800e32e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e30e:	3324      	adds	r3, #36	@ 0x24
 800e310:	4618      	mov	r0, r3
 800e312:	f001 f805 	bl	800f320 <xTaskRemoveFromEventList>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d013      	beq.n	800e344 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e31c:	4b3f      	ldr	r3, [pc, #252]	@ (800e41c <xQueueGenericSend+0x200>)
 800e31e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	e00a      	b.n	800e344 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e330:	2b00      	cmp	r3, #0
 800e332:	d007      	beq.n	800e344 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e334:	4b39      	ldr	r3, [pc, #228]	@ (800e41c <xQueueGenericSend+0x200>)
 800e336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e33a:	601a      	str	r2, [r3, #0]
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e344:	f001 ff52 	bl	80101ec <vPortExitCritical>
				return pdPASS;
 800e348:	2301      	movs	r3, #1
 800e34a:	e063      	b.n	800e414 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d103      	bne.n	800e35a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e352:	f001 ff4b 	bl	80101ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e356:	2300      	movs	r3, #0
 800e358:	e05c      	b.n	800e414 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d106      	bne.n	800e36e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e360:	f107 0314 	add.w	r3, r7, #20
 800e364:	4618      	mov	r0, r3
 800e366:	f001 f83f 	bl	800f3e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e36a:	2301      	movs	r3, #1
 800e36c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e36e:	f001 ff3d 	bl	80101ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e372:	f000 fda7 	bl	800eec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e376:	f001 ff07 	bl	8010188 <vPortEnterCritical>
 800e37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e37c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e380:	b25b      	sxtb	r3, r3
 800e382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e386:	d103      	bne.n	800e390 <xQueueGenericSend+0x174>
 800e388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e38a:	2200      	movs	r2, #0
 800e38c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e392:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e396:	b25b      	sxtb	r3, r3
 800e398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e39c:	d103      	bne.n	800e3a6 <xQueueGenericSend+0x18a>
 800e39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3a6:	f001 ff21 	bl	80101ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3aa:	1d3a      	adds	r2, r7, #4
 800e3ac:	f107 0314 	add.w	r3, r7, #20
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f001 f82e 	bl	800f414 <xTaskCheckForTimeOut>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d124      	bne.n	800e408 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e3be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3c0:	f000 faa6 	bl	800e910 <prvIsQueueFull>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d018      	beq.n	800e3fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3cc:	3310      	adds	r3, #16
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f000 ff52 	bl	800f27c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e3d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3da:	f000 fa31 	bl	800e840 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e3de:	f000 fd7f 	bl	800eee0 <xTaskResumeAll>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	f47f af7c 	bne.w	800e2e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e3ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e41c <xQueueGenericSend+0x200>)
 800e3ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3f0:	601a      	str	r2, [r3, #0]
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	e772      	b.n	800e2e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e3fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3fe:	f000 fa1f 	bl	800e840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e402:	f000 fd6d 	bl	800eee0 <xTaskResumeAll>
 800e406:	e76c      	b.n	800e2e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e40a:	f000 fa19 	bl	800e840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e40e:	f000 fd67 	bl	800eee0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e412:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e414:	4618      	mov	r0, r3
 800e416:	3738      	adds	r7, #56	@ 0x38
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	e000ed04 	.word	0xe000ed04

0800e420 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b090      	sub	sp, #64	@ 0x40
 800e424:	af00      	add	r7, sp, #0
 800e426:	60f8      	str	r0, [r7, #12]
 800e428:	60b9      	str	r1, [r7, #8]
 800e42a:	607a      	str	r2, [r7, #4]
 800e42c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10b      	bne.n	800e450 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e43c:	f383 8811 	msr	BASEPRI, r3
 800e440:	f3bf 8f6f 	isb	sy
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e44a:	bf00      	nop
 800e44c:	bf00      	nop
 800e44e:	e7fd      	b.n	800e44c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d103      	bne.n	800e45e <xQueueGenericSendFromISR+0x3e>
 800e456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <xQueueGenericSendFromISR+0x42>
 800e45e:	2301      	movs	r3, #1
 800e460:	e000      	b.n	800e464 <xQueueGenericSendFromISR+0x44>
 800e462:	2300      	movs	r3, #0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10b      	bne.n	800e480 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e46c:	f383 8811 	msr	BASEPRI, r3
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e47a:	bf00      	nop
 800e47c:	bf00      	nop
 800e47e:	e7fd      	b.n	800e47c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	2b02      	cmp	r3, #2
 800e484:	d103      	bne.n	800e48e <xQueueGenericSendFromISR+0x6e>
 800e486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d101      	bne.n	800e492 <xQueueGenericSendFromISR+0x72>
 800e48e:	2301      	movs	r3, #1
 800e490:	e000      	b.n	800e494 <xQueueGenericSendFromISR+0x74>
 800e492:	2300      	movs	r3, #0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10b      	bne.n	800e4b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e49c:	f383 8811 	msr	BASEPRI, r3
 800e4a0:	f3bf 8f6f 	isb	sy
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	623b      	str	r3, [r7, #32]
}
 800e4aa:	bf00      	nop
 800e4ac:	bf00      	nop
 800e4ae:	e7fd      	b.n	800e4ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4b0:	f001 ff4a 	bl	8010348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e4b4:	f3ef 8211 	mrs	r2, BASEPRI
 800e4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4bc:	f383 8811 	msr	BASEPRI, r3
 800e4c0:	f3bf 8f6f 	isb	sy
 800e4c4:	f3bf 8f4f 	dsb	sy
 800e4c8:	61fa      	str	r2, [r7, #28]
 800e4ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d302      	bcc.n	800e4e2 <xQueueGenericSendFromISR+0xc2>
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d12f      	bne.n	800e542 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e4e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	68b9      	ldr	r1, [r7, #8]
 800e4f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e4f8:	f000 f912 	bl	800e720 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e4fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e504:	d112      	bne.n	800e52c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d016      	beq.n	800e53c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e510:	3324      	adds	r3, #36	@ 0x24
 800e512:	4618      	mov	r0, r3
 800e514:	f000 ff04 	bl	800f320 <xTaskRemoveFromEventList>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00e      	beq.n	800e53c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00b      	beq.n	800e53c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2201      	movs	r2, #1
 800e528:	601a      	str	r2, [r3, #0]
 800e52a:	e007      	b.n	800e53c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e52c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e530:	3301      	adds	r3, #1
 800e532:	b2db      	uxtb	r3, r3
 800e534:	b25a      	sxtb	r2, r3
 800e536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e53c:	2301      	movs	r3, #1
 800e53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e540:	e001      	b.n	800e546 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e542:	2300      	movs	r3, #0
 800e544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e548:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e550:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e554:	4618      	mov	r0, r3
 800e556:	3740      	adds	r7, #64	@ 0x40
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b08c      	sub	sp, #48	@ 0x30
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e568:	2300      	movs	r3, #0
 800e56a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e572:	2b00      	cmp	r3, #0
 800e574:	d10b      	bne.n	800e58e <xQueueReceive+0x32>
	__asm volatile
 800e576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	623b      	str	r3, [r7, #32]
}
 800e588:	bf00      	nop
 800e58a:	bf00      	nop
 800e58c:	e7fd      	b.n	800e58a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d103      	bne.n	800e59c <xQueueReceive+0x40>
 800e594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d101      	bne.n	800e5a0 <xQueueReceive+0x44>
 800e59c:	2301      	movs	r3, #1
 800e59e:	e000      	b.n	800e5a2 <xQueueReceive+0x46>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d10b      	bne.n	800e5be <xQueueReceive+0x62>
	__asm volatile
 800e5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5aa:	f383 8811 	msr	BASEPRI, r3
 800e5ae:	f3bf 8f6f 	isb	sy
 800e5b2:	f3bf 8f4f 	dsb	sy
 800e5b6:	61fb      	str	r3, [r7, #28]
}
 800e5b8:	bf00      	nop
 800e5ba:	bf00      	nop
 800e5bc:	e7fd      	b.n	800e5ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5be:	f001 f875 	bl	800f6ac <xTaskGetSchedulerState>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d102      	bne.n	800e5ce <xQueueReceive+0x72>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d101      	bne.n	800e5d2 <xQueueReceive+0x76>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e000      	b.n	800e5d4 <xQueueReceive+0x78>
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d10b      	bne.n	800e5f0 <xQueueReceive+0x94>
	__asm volatile
 800e5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5dc:	f383 8811 	msr	BASEPRI, r3
 800e5e0:	f3bf 8f6f 	isb	sy
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	61bb      	str	r3, [r7, #24]
}
 800e5ea:	bf00      	nop
 800e5ec:	bf00      	nop
 800e5ee:	e7fd      	b.n	800e5ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5f0:	f001 fdca 	bl	8010188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d01f      	beq.n	800e640 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e600:	68b9      	ldr	r1, [r7, #8]
 800e602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e604:	f000 f8f6 	bl	800e7f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e60a:	1e5a      	subs	r2, r3, #1
 800e60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e60e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e612:	691b      	ldr	r3, [r3, #16]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d00f      	beq.n	800e638 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e61a:	3310      	adds	r3, #16
 800e61c:	4618      	mov	r0, r3
 800e61e:	f000 fe7f 	bl	800f320 <xTaskRemoveFromEventList>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d007      	beq.n	800e638 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e628:	4b3c      	ldr	r3, [pc, #240]	@ (800e71c <xQueueReceive+0x1c0>)
 800e62a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e62e:	601a      	str	r2, [r3, #0]
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e638:	f001 fdd8 	bl	80101ec <vPortExitCritical>
				return pdPASS;
 800e63c:	2301      	movs	r3, #1
 800e63e:	e069      	b.n	800e714 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d103      	bne.n	800e64e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e646:	f001 fdd1 	bl	80101ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e64a:	2300      	movs	r3, #0
 800e64c:	e062      	b.n	800e714 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e650:	2b00      	cmp	r3, #0
 800e652:	d106      	bne.n	800e662 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e654:	f107 0310 	add.w	r3, r7, #16
 800e658:	4618      	mov	r0, r3
 800e65a:	f000 fec5 	bl	800f3e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e65e:	2301      	movs	r3, #1
 800e660:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e662:	f001 fdc3 	bl	80101ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e666:	f000 fc2d 	bl	800eec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e66a:	f001 fd8d 	bl	8010188 <vPortEnterCritical>
 800e66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e674:	b25b      	sxtb	r3, r3
 800e676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e67a:	d103      	bne.n	800e684 <xQueueReceive+0x128>
 800e67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e67e:	2200      	movs	r2, #0
 800e680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e68a:	b25b      	sxtb	r3, r3
 800e68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e690:	d103      	bne.n	800e69a <xQueueReceive+0x13e>
 800e692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e694:	2200      	movs	r2, #0
 800e696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e69a:	f001 fda7 	bl	80101ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e69e:	1d3a      	adds	r2, r7, #4
 800e6a0:	f107 0310 	add.w	r3, r7, #16
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f000 feb4 	bl	800f414 <xTaskCheckForTimeOut>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d123      	bne.n	800e6fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6b4:	f000 f916 	bl	800e8e4 <prvIsQueueEmpty>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d017      	beq.n	800e6ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6c0:	3324      	adds	r3, #36	@ 0x24
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	4611      	mov	r1, r2
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f000 fdd8 	bl	800f27c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e6cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6ce:	f000 f8b7 	bl	800e840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6d2:	f000 fc05 	bl	800eee0 <xTaskResumeAll>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d189      	bne.n	800e5f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e71c <xQueueReceive+0x1c0>)
 800e6de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6e2:	601a      	str	r2, [r3, #0]
 800e6e4:	f3bf 8f4f 	dsb	sy
 800e6e8:	f3bf 8f6f 	isb	sy
 800e6ec:	e780      	b.n	800e5f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e6ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6f0:	f000 f8a6 	bl	800e840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e6f4:	f000 fbf4 	bl	800eee0 <xTaskResumeAll>
 800e6f8:	e77a      	b.n	800e5f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e6fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6fc:	f000 f8a0 	bl	800e840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e700:	f000 fbee 	bl	800eee0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e704:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e706:	f000 f8ed 	bl	800e8e4 <prvIsQueueEmpty>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f43f af6f 	beq.w	800e5f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e712:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e714:	4618      	mov	r0, r3
 800e716:	3730      	adds	r7, #48	@ 0x30
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	e000ed04 	.word	0xe000ed04

0800e720 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e72c:	2300      	movs	r3, #0
 800e72e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e734:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d10d      	bne.n	800e75a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d14d      	bne.n	800e7e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	689b      	ldr	r3, [r3, #8]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f000 ffcc 	bl	800f6e8 <xTaskPriorityDisinherit>
 800e750:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2200      	movs	r2, #0
 800e756:	609a      	str	r2, [r3, #8]
 800e758:	e043      	b.n	800e7e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d119      	bne.n	800e794 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6858      	ldr	r0, [r3, #4]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e768:	461a      	mov	r2, r3
 800e76a:	68b9      	ldr	r1, [r7, #8]
 800e76c:	f003 f893 	bl	8011896 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	685a      	ldr	r2, [r3, #4]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e778:	441a      	add	r2, r3
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	685a      	ldr	r2, [r3, #4]
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	429a      	cmp	r2, r3
 800e788:	d32b      	bcc.n	800e7e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	605a      	str	r2, [r3, #4]
 800e792:	e026      	b.n	800e7e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	68d8      	ldr	r0, [r3, #12]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e79c:	461a      	mov	r2, r3
 800e79e:	68b9      	ldr	r1, [r7, #8]
 800e7a0:	f003 f879 	bl	8011896 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	68da      	ldr	r2, [r3, #12]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7ac:	425b      	negs	r3, r3
 800e7ae:	441a      	add	r2, r3
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	68da      	ldr	r2, [r3, #12]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d207      	bcs.n	800e7d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	689a      	ldr	r2, [r3, #8]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7c8:	425b      	negs	r3, r3
 800e7ca:	441a      	add	r2, r3
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d105      	bne.n	800e7e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d002      	beq.n	800e7e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	1c5a      	adds	r2, r3, #1
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e7ea:	697b      	ldr	r3, [r7, #20]
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3718      	adds	r7, #24
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e802:	2b00      	cmp	r3, #0
 800e804:	d018      	beq.n	800e838 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68da      	ldr	r2, [r3, #12]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e80e:	441a      	add	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	68da      	ldr	r2, [r3, #12]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	689b      	ldr	r3, [r3, #8]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d303      	bcc.n	800e828 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	68d9      	ldr	r1, [r3, #12]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e830:	461a      	mov	r2, r3
 800e832:	6838      	ldr	r0, [r7, #0]
 800e834:	f003 f82f 	bl	8011896 <memcpy>
	}
}
 800e838:	bf00      	nop
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e848:	f001 fc9e 	bl	8010188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e852:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e854:	e011      	b.n	800e87a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d012      	beq.n	800e884 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	3324      	adds	r3, #36	@ 0x24
 800e862:	4618      	mov	r0, r3
 800e864:	f000 fd5c 	bl	800f320 <xTaskRemoveFromEventList>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d001      	beq.n	800e872 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e86e:	f000 fe35 	bl	800f4dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e872:	7bfb      	ldrb	r3, [r7, #15]
 800e874:	3b01      	subs	r3, #1
 800e876:	b2db      	uxtb	r3, r3
 800e878:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e87a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	dce9      	bgt.n	800e856 <prvUnlockQueue+0x16>
 800e882:	e000      	b.n	800e886 <prvUnlockQueue+0x46>
					break;
 800e884:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	22ff      	movs	r2, #255	@ 0xff
 800e88a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e88e:	f001 fcad 	bl	80101ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e892:	f001 fc79 	bl	8010188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e89c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e89e:	e011      	b.n	800e8c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	691b      	ldr	r3, [r3, #16]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d012      	beq.n	800e8ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	3310      	adds	r3, #16
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f000 fd37 	bl	800f320 <xTaskRemoveFromEventList>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d001      	beq.n	800e8bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e8b8:	f000 fe10 	bl	800f4dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e8bc:	7bbb      	ldrb	r3, [r7, #14]
 800e8be:	3b01      	subs	r3, #1
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	dce9      	bgt.n	800e8a0 <prvUnlockQueue+0x60>
 800e8cc:	e000      	b.n	800e8d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e8ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	22ff      	movs	r2, #255	@ 0xff
 800e8d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e8d8:	f001 fc88 	bl	80101ec <vPortExitCritical>
}
 800e8dc:	bf00      	nop
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e8ec:	f001 fc4c 	bl	8010188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d102      	bne.n	800e8fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	60fb      	str	r3, [r7, #12]
 800e8fc:	e001      	b.n	800e902 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e8fe:	2300      	movs	r3, #0
 800e900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e902:	f001 fc73 	bl	80101ec <vPortExitCritical>

	return xReturn;
 800e906:	68fb      	ldr	r3, [r7, #12]
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3710      	adds	r7, #16
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e918:	f001 fc36 	bl	8010188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e924:	429a      	cmp	r2, r3
 800e926:	d102      	bne.n	800e92e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e928:	2301      	movs	r3, #1
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	e001      	b.n	800e932 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e92e:	2300      	movs	r3, #0
 800e930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e932:	f001 fc5b 	bl	80101ec <vPortExitCritical>

	return xReturn;
 800e936:	68fb      	ldr	r3, [r7, #12]
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3710      	adds	r7, #16
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e940:	b480      	push	{r7}
 800e942:	b085      	sub	sp, #20
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e94a:	2300      	movs	r3, #0
 800e94c:	60fb      	str	r3, [r7, #12]
 800e94e:	e014      	b.n	800e97a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e950:	4a0f      	ldr	r2, [pc, #60]	@ (800e990 <vQueueAddToRegistry+0x50>)
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10b      	bne.n	800e974 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e95c:	490c      	ldr	r1, [pc, #48]	@ (800e990 <vQueueAddToRegistry+0x50>)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	683a      	ldr	r2, [r7, #0]
 800e962:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e966:	4a0a      	ldr	r2, [pc, #40]	@ (800e990 <vQueueAddToRegistry+0x50>)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	00db      	lsls	r3, r3, #3
 800e96c:	4413      	add	r3, r2
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e972:	e006      	b.n	800e982 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	3301      	adds	r3, #1
 800e978:	60fb      	str	r3, [r7, #12]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2b07      	cmp	r3, #7
 800e97e:	d9e7      	bls.n	800e950 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e980:	bf00      	nop
 800e982:	bf00      	nop
 800e984:	3714      	adds	r7, #20
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr
 800e98e:	bf00      	nop
 800e990:	200011d4 	.word	0x200011d4

0800e994 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	60b9      	str	r1, [r7, #8]
 800e99e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e9a4:	f001 fbf0 	bl	8010188 <vPortEnterCritical>
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e9ae:	b25b      	sxtb	r3, r3
 800e9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b4:	d103      	bne.n	800e9be <vQueueWaitForMessageRestricted+0x2a>
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9c4:	b25b      	sxtb	r3, r3
 800e9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ca:	d103      	bne.n	800e9d4 <vQueueWaitForMessageRestricted+0x40>
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9d4:	f001 fc0a 	bl	80101ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d106      	bne.n	800e9ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	3324      	adds	r3, #36	@ 0x24
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	68b9      	ldr	r1, [r7, #8]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f000 fc6d 	bl	800f2c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e9ee:	6978      	ldr	r0, [r7, #20]
 800e9f0:	f7ff ff26 	bl	800e840 <prvUnlockQueue>
	}
 800e9f4:	bf00      	nop
 800e9f6:	3718      	adds	r7, #24
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b08e      	sub	sp, #56	@ 0x38
 800ea00:	af04      	add	r7, sp, #16
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	607a      	str	r2, [r7, #4]
 800ea08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ea0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d10b      	bne.n	800ea28 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ea10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea14:	f383 8811 	msr	BASEPRI, r3
 800ea18:	f3bf 8f6f 	isb	sy
 800ea1c:	f3bf 8f4f 	dsb	sy
 800ea20:	623b      	str	r3, [r7, #32]
}
 800ea22:	bf00      	nop
 800ea24:	bf00      	nop
 800ea26:	e7fd      	b.n	800ea24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ea28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d10b      	bne.n	800ea46 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ea2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea32:	f383 8811 	msr	BASEPRI, r3
 800ea36:	f3bf 8f6f 	isb	sy
 800ea3a:	f3bf 8f4f 	dsb	sy
 800ea3e:	61fb      	str	r3, [r7, #28]
}
 800ea40:	bf00      	nop
 800ea42:	bf00      	nop
 800ea44:	e7fd      	b.n	800ea42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ea46:	23a8      	movs	r3, #168	@ 0xa8
 800ea48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	2ba8      	cmp	r3, #168	@ 0xa8
 800ea4e:	d00b      	beq.n	800ea68 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ea50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea54:	f383 8811 	msr	BASEPRI, r3
 800ea58:	f3bf 8f6f 	isb	sy
 800ea5c:	f3bf 8f4f 	dsb	sy
 800ea60:	61bb      	str	r3, [r7, #24]
}
 800ea62:	bf00      	nop
 800ea64:	bf00      	nop
 800ea66:	e7fd      	b.n	800ea64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ea68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ea6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d01e      	beq.n	800eaae <xTaskCreateStatic+0xb2>
 800ea70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d01b      	beq.n	800eaae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ea80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea82:	2202      	movs	r2, #2
 800ea84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ea88:	2300      	movs	r3, #0
 800ea8a:	9303      	str	r3, [sp, #12]
 800ea8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8e:	9302      	str	r3, [sp, #8]
 800ea90:	f107 0314 	add.w	r3, r7, #20
 800ea94:	9301      	str	r3, [sp, #4]
 800ea96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	68b9      	ldr	r1, [r7, #8]
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	f000 f851 	bl	800eb48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eaa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eaa8:	f000 f8f6 	bl	800ec98 <prvAddNewTaskToReadyList>
 800eaac:	e001      	b.n	800eab2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800eaae:	2300      	movs	r3, #0
 800eab0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eab2:	697b      	ldr	r3, [r7, #20]
	}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3728      	adds	r7, #40	@ 0x28
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b08c      	sub	sp, #48	@ 0x30
 800eac0:	af04      	add	r7, sp, #16
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	603b      	str	r3, [r7, #0]
 800eac8:	4613      	mov	r3, r2
 800eaca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eacc:	88fb      	ldrh	r3, [r7, #6]
 800eace:	009b      	lsls	r3, r3, #2
 800ead0:	4618      	mov	r0, r3
 800ead2:	f001 fc7b 	bl	80103cc <pvPortMalloc>
 800ead6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00e      	beq.n	800eafc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eade:	20a8      	movs	r0, #168	@ 0xa8
 800eae0:	f001 fc74 	bl	80103cc <pvPortMalloc>
 800eae4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d003      	beq.n	800eaf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	697a      	ldr	r2, [r7, #20]
 800eaf0:	631a      	str	r2, [r3, #48]	@ 0x30
 800eaf2:	e005      	b.n	800eb00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eaf4:	6978      	ldr	r0, [r7, #20]
 800eaf6:	f001 fd37 	bl	8010568 <vPortFree>
 800eafa:	e001      	b.n	800eb00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eafc:	2300      	movs	r3, #0
 800eafe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d017      	beq.n	800eb36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eb0e:	88fa      	ldrh	r2, [r7, #6]
 800eb10:	2300      	movs	r3, #0
 800eb12:	9303      	str	r3, [sp, #12]
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	9302      	str	r3, [sp, #8]
 800eb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb1a:	9301      	str	r3, [sp, #4]
 800eb1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	68b9      	ldr	r1, [r7, #8]
 800eb24:	68f8      	ldr	r0, [r7, #12]
 800eb26:	f000 f80f 	bl	800eb48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb2a:	69f8      	ldr	r0, [r7, #28]
 800eb2c:	f000 f8b4 	bl	800ec98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eb30:	2301      	movs	r3, #1
 800eb32:	61bb      	str	r3, [r7, #24]
 800eb34:	e002      	b.n	800eb3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb36:	f04f 33ff 	mov.w	r3, #4294967295
 800eb3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eb3c:	69bb      	ldr	r3, [r7, #24]
	}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3720      	adds	r7, #32
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
	...

0800eb48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b088      	sub	sp, #32
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	607a      	str	r2, [r7, #4]
 800eb54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	461a      	mov	r2, r3
 800eb60:	21a5      	movs	r1, #165	@ 0xa5
 800eb62:	f002 fdc2 	bl	80116ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb70:	3b01      	subs	r3, #1
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	4413      	add	r3, r2
 800eb76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	f023 0307 	bic.w	r3, r3, #7
 800eb7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	f003 0307 	and.w	r3, r3, #7
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d00b      	beq.n	800eba2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800eb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb8e:	f383 8811 	msr	BASEPRI, r3
 800eb92:	f3bf 8f6f 	isb	sy
 800eb96:	f3bf 8f4f 	dsb	sy
 800eb9a:	617b      	str	r3, [r7, #20]
}
 800eb9c:	bf00      	nop
 800eb9e:	bf00      	nop
 800eba0:	e7fd      	b.n	800eb9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d01f      	beq.n	800ebe8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eba8:	2300      	movs	r3, #0
 800ebaa:	61fb      	str	r3, [r7, #28]
 800ebac:	e012      	b.n	800ebd4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ebae:	68ba      	ldr	r2, [r7, #8]
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	7819      	ldrb	r1, [r3, #0]
 800ebb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	4413      	add	r3, r2
 800ebbc:	3334      	adds	r3, #52	@ 0x34
 800ebbe:	460a      	mov	r2, r1
 800ebc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ebc2:	68ba      	ldr	r2, [r7, #8]
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d006      	beq.n	800ebdc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	61fb      	str	r3, [r7, #28]
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	2b0f      	cmp	r3, #15
 800ebd8:	d9e9      	bls.n	800ebae <prvInitialiseNewTask+0x66>
 800ebda:	e000      	b.n	800ebde <prvInitialiseNewTask+0x96>
			{
				break;
 800ebdc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ebde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ebe6:	e003      	b.n	800ebf0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ebf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf2:	2b37      	cmp	r3, #55	@ 0x37
 800ebf4:	d901      	bls.n	800ebfa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ebf6:	2337      	movs	r3, #55	@ 0x37
 800ebf8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ebfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebfe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ec00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ec06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec08:	2200      	movs	r2, #0
 800ec0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec0e:	3304      	adds	r3, #4
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7ff f965 	bl	800dee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec18:	3318      	adds	r3, #24
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7ff f960 	bl	800dee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ec36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec38:	2200      	movs	r2, #0
 800ec3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec40:	2200      	movs	r2, #0
 800ec42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ec46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec48:	3354      	adds	r3, #84	@ 0x54
 800ec4a:	224c      	movs	r2, #76	@ 0x4c
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f002 fd4b 	bl	80116ea <memset>
 800ec54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec56:	4a0d      	ldr	r2, [pc, #52]	@ (800ec8c <prvInitialiseNewTask+0x144>)
 800ec58:	659a      	str	r2, [r3, #88]	@ 0x58
 800ec5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec5c:	4a0c      	ldr	r2, [pc, #48]	@ (800ec90 <prvInitialiseNewTask+0x148>)
 800ec5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ec60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec62:	4a0c      	ldr	r2, [pc, #48]	@ (800ec94 <prvInitialiseNewTask+0x14c>)
 800ec64:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ec66:	683a      	ldr	r2, [r7, #0]
 800ec68:	68f9      	ldr	r1, [r7, #12]
 800ec6a:	69b8      	ldr	r0, [r7, #24]
 800ec6c:	f001 f95a 	bl	800ff24 <pxPortInitialiseStack>
 800ec70:	4602      	mov	r2, r0
 800ec72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ec76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d002      	beq.n	800ec82 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ec7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec82:	bf00      	nop
 800ec84:	3720      	adds	r7, #32
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	20005468 	.word	0x20005468
 800ec90:	200054d0 	.word	0x200054d0
 800ec94:	20005538 	.word	0x20005538

0800ec98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eca0:	f001 fa72 	bl	8010188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eca4:	4b2d      	ldr	r3, [pc, #180]	@ (800ed5c <prvAddNewTaskToReadyList+0xc4>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	4a2c      	ldr	r2, [pc, #176]	@ (800ed5c <prvAddNewTaskToReadyList+0xc4>)
 800ecac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ecae:	4b2c      	ldr	r3, [pc, #176]	@ (800ed60 <prvAddNewTaskToReadyList+0xc8>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d109      	bne.n	800ecca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ecb6:	4a2a      	ldr	r2, [pc, #168]	@ (800ed60 <prvAddNewTaskToReadyList+0xc8>)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ecbc:	4b27      	ldr	r3, [pc, #156]	@ (800ed5c <prvAddNewTaskToReadyList+0xc4>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d110      	bne.n	800ece6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ecc4:	f000 fc2e 	bl	800f524 <prvInitialiseTaskLists>
 800ecc8:	e00d      	b.n	800ece6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ecca:	4b26      	ldr	r3, [pc, #152]	@ (800ed64 <prvAddNewTaskToReadyList+0xcc>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d109      	bne.n	800ece6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ecd2:	4b23      	ldr	r3, [pc, #140]	@ (800ed60 <prvAddNewTaskToReadyList+0xc8>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d802      	bhi.n	800ece6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ece0:	4a1f      	ldr	r2, [pc, #124]	@ (800ed60 <prvAddNewTaskToReadyList+0xc8>)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ece6:	4b20      	ldr	r3, [pc, #128]	@ (800ed68 <prvAddNewTaskToReadyList+0xd0>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	3301      	adds	r3, #1
 800ecec:	4a1e      	ldr	r2, [pc, #120]	@ (800ed68 <prvAddNewTaskToReadyList+0xd0>)
 800ecee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ecf0:	4b1d      	ldr	r3, [pc, #116]	@ (800ed68 <prvAddNewTaskToReadyList+0xd0>)
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecfc:	4b1b      	ldr	r3, [pc, #108]	@ (800ed6c <prvAddNewTaskToReadyList+0xd4>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d903      	bls.n	800ed0c <prvAddNewTaskToReadyList+0x74>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed08:	4a18      	ldr	r2, [pc, #96]	@ (800ed6c <prvAddNewTaskToReadyList+0xd4>)
 800ed0a:	6013      	str	r3, [r2, #0]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed10:	4613      	mov	r3, r2
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	4413      	add	r3, r2
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	4a15      	ldr	r2, [pc, #84]	@ (800ed70 <prvAddNewTaskToReadyList+0xd8>)
 800ed1a:	441a      	add	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	3304      	adds	r3, #4
 800ed20:	4619      	mov	r1, r3
 800ed22:	4610      	mov	r0, r2
 800ed24:	f7ff f8e9 	bl	800defa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed28:	f001 fa60 	bl	80101ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ed64 <prvAddNewTaskToReadyList+0xcc>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00e      	beq.n	800ed52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed34:	4b0a      	ldr	r3, [pc, #40]	@ (800ed60 <prvAddNewTaskToReadyList+0xc8>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d207      	bcs.n	800ed52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ed42:	4b0c      	ldr	r3, [pc, #48]	@ (800ed74 <prvAddNewTaskToReadyList+0xdc>)
 800ed44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed48:	601a      	str	r2, [r3, #0]
 800ed4a:	f3bf 8f4f 	dsb	sy
 800ed4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed52:	bf00      	nop
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	200016e8 	.word	0x200016e8
 800ed60:	20001214 	.word	0x20001214
 800ed64:	200016f4 	.word	0x200016f4
 800ed68:	20001704 	.word	0x20001704
 800ed6c:	200016f0 	.word	0x200016f0
 800ed70:	20001218 	.word	0x20001218
 800ed74:	e000ed04 	.word	0xe000ed04

0800ed78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ed80:	2300      	movs	r3, #0
 800ed82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d018      	beq.n	800edbc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ed8a:	4b14      	ldr	r3, [pc, #80]	@ (800eddc <vTaskDelay+0x64>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d00b      	beq.n	800edaa <vTaskDelay+0x32>
	__asm volatile
 800ed92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed96:	f383 8811 	msr	BASEPRI, r3
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	60bb      	str	r3, [r7, #8]
}
 800eda4:	bf00      	nop
 800eda6:	bf00      	nop
 800eda8:	e7fd      	b.n	800eda6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800edaa:	f000 f88b 	bl	800eec4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800edae:	2100      	movs	r1, #0
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 fd09 	bl	800f7c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800edb6:	f000 f893 	bl	800eee0 <xTaskResumeAll>
 800edba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d107      	bne.n	800edd2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800edc2:	4b07      	ldr	r3, [pc, #28]	@ (800ede0 <vTaskDelay+0x68>)
 800edc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800edc8:	601a      	str	r2, [r3, #0]
 800edca:	f3bf 8f4f 	dsb	sy
 800edce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800edd2:	bf00      	nop
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	20001710 	.word	0x20001710
 800ede0:	e000ed04 	.word	0xe000ed04

0800ede4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b08a      	sub	sp, #40	@ 0x28
 800ede8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800edea:	2300      	movs	r3, #0
 800edec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800edee:	2300      	movs	r3, #0
 800edf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800edf2:	463a      	mov	r2, r7
 800edf4:	1d39      	adds	r1, r7, #4
 800edf6:	f107 0308 	add.w	r3, r7, #8
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7ff f81c 	bl	800de38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ee00:	6839      	ldr	r1, [r7, #0]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	9202      	str	r2, [sp, #8]
 800ee08:	9301      	str	r3, [sp, #4]
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	2300      	movs	r3, #0
 800ee10:	460a      	mov	r2, r1
 800ee12:	4924      	ldr	r1, [pc, #144]	@ (800eea4 <vTaskStartScheduler+0xc0>)
 800ee14:	4824      	ldr	r0, [pc, #144]	@ (800eea8 <vTaskStartScheduler+0xc4>)
 800ee16:	f7ff fdf1 	bl	800e9fc <xTaskCreateStatic>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	4a23      	ldr	r2, [pc, #140]	@ (800eeac <vTaskStartScheduler+0xc8>)
 800ee1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ee20:	4b22      	ldr	r3, [pc, #136]	@ (800eeac <vTaskStartScheduler+0xc8>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d002      	beq.n	800ee2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	617b      	str	r3, [r7, #20]
 800ee2c:	e001      	b.n	800ee32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d102      	bne.n	800ee3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ee38:	f000 fd1a 	bl	800f870 <xTimerCreateTimerTask>
 800ee3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d11b      	bne.n	800ee7c <vTaskStartScheduler+0x98>
	__asm volatile
 800ee44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee48:	f383 8811 	msr	BASEPRI, r3
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	613b      	str	r3, [r7, #16]
}
 800ee56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ee58:	4b15      	ldr	r3, [pc, #84]	@ (800eeb0 <vTaskStartScheduler+0xcc>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	3354      	adds	r3, #84	@ 0x54
 800ee5e:	4a15      	ldr	r2, [pc, #84]	@ (800eeb4 <vTaskStartScheduler+0xd0>)
 800ee60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ee62:	4b15      	ldr	r3, [pc, #84]	@ (800eeb8 <vTaskStartScheduler+0xd4>)
 800ee64:	f04f 32ff 	mov.w	r2, #4294967295
 800ee68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ee6a:	4b14      	ldr	r3, [pc, #80]	@ (800eebc <vTaskStartScheduler+0xd8>)
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ee70:	4b13      	ldr	r3, [pc, #76]	@ (800eec0 <vTaskStartScheduler+0xdc>)
 800ee72:	2200      	movs	r2, #0
 800ee74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ee76:	f001 f8e3 	bl	8010040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ee7a:	e00f      	b.n	800ee9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee82:	d10b      	bne.n	800ee9c <vTaskStartScheduler+0xb8>
	__asm volatile
 800ee84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	60fb      	str	r3, [r7, #12]
}
 800ee96:	bf00      	nop
 800ee98:	bf00      	nop
 800ee9a:	e7fd      	b.n	800ee98 <vTaskStartScheduler+0xb4>
}
 800ee9c:	bf00      	nop
 800ee9e:	3718      	adds	r7, #24
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	08015b04 	.word	0x08015b04
 800eea8:	0800f4f5 	.word	0x0800f4f5
 800eeac:	2000170c 	.word	0x2000170c
 800eeb0:	20001214 	.word	0x20001214
 800eeb4:	200000a4 	.word	0x200000a4
 800eeb8:	20001708 	.word	0x20001708
 800eebc:	200016f4 	.word	0x200016f4
 800eec0:	200016ec 	.word	0x200016ec

0800eec4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eec4:	b480      	push	{r7}
 800eec6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eec8:	4b04      	ldr	r3, [pc, #16]	@ (800eedc <vTaskSuspendAll+0x18>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	3301      	adds	r3, #1
 800eece:	4a03      	ldr	r2, [pc, #12]	@ (800eedc <vTaskSuspendAll+0x18>)
 800eed0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800eed2:	bf00      	nop
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr
 800eedc:	20001710 	.word	0x20001710

0800eee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eee6:	2300      	movs	r3, #0
 800eee8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eeea:	2300      	movs	r3, #0
 800eeec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eeee:	4b42      	ldr	r3, [pc, #264]	@ (800eff8 <xTaskResumeAll+0x118>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d10b      	bne.n	800ef0e <xTaskResumeAll+0x2e>
	__asm volatile
 800eef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eefa:	f383 8811 	msr	BASEPRI, r3
 800eefe:	f3bf 8f6f 	isb	sy
 800ef02:	f3bf 8f4f 	dsb	sy
 800ef06:	603b      	str	r3, [r7, #0]
}
 800ef08:	bf00      	nop
 800ef0a:	bf00      	nop
 800ef0c:	e7fd      	b.n	800ef0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ef0e:	f001 f93b 	bl	8010188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ef12:	4b39      	ldr	r3, [pc, #228]	@ (800eff8 <xTaskResumeAll+0x118>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	3b01      	subs	r3, #1
 800ef18:	4a37      	ldr	r2, [pc, #220]	@ (800eff8 <xTaskResumeAll+0x118>)
 800ef1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef1c:	4b36      	ldr	r3, [pc, #216]	@ (800eff8 <xTaskResumeAll+0x118>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d162      	bne.n	800efea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef24:	4b35      	ldr	r3, [pc, #212]	@ (800effc <xTaskResumeAll+0x11c>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d05e      	beq.n	800efea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef2c:	e02f      	b.n	800ef8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef2e:	4b34      	ldr	r3, [pc, #208]	@ (800f000 <xTaskResumeAll+0x120>)
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	3318      	adds	r3, #24
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7ff f83a 	bl	800dfb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	3304      	adds	r3, #4
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7ff f835 	bl	800dfb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef4e:	4b2d      	ldr	r3, [pc, #180]	@ (800f004 <xTaskResumeAll+0x124>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d903      	bls.n	800ef5e <xTaskResumeAll+0x7e>
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef5a:	4a2a      	ldr	r2, [pc, #168]	@ (800f004 <xTaskResumeAll+0x124>)
 800ef5c:	6013      	str	r3, [r2, #0]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef62:	4613      	mov	r3, r2
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	4413      	add	r3, r2
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	4a27      	ldr	r2, [pc, #156]	@ (800f008 <xTaskResumeAll+0x128>)
 800ef6c:	441a      	add	r2, r3
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	3304      	adds	r3, #4
 800ef72:	4619      	mov	r1, r3
 800ef74:	4610      	mov	r0, r2
 800ef76:	f7fe ffc0 	bl	800defa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef7e:	4b23      	ldr	r3, [pc, #140]	@ (800f00c <xTaskResumeAll+0x12c>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d302      	bcc.n	800ef8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ef88:	4b21      	ldr	r3, [pc, #132]	@ (800f010 <xTaskResumeAll+0x130>)
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef8e:	4b1c      	ldr	r3, [pc, #112]	@ (800f000 <xTaskResumeAll+0x120>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d1cb      	bne.n	800ef2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ef9c:	f000 fb66 	bl	800f66c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800efa0:	4b1c      	ldr	r3, [pc, #112]	@ (800f014 <xTaskResumeAll+0x134>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d010      	beq.n	800efce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800efac:	f000 f846 	bl	800f03c <xTaskIncrementTick>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d002      	beq.n	800efbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800efb6:	4b16      	ldr	r3, [pc, #88]	@ (800f010 <xTaskResumeAll+0x130>)
 800efb8:	2201      	movs	r2, #1
 800efba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	3b01      	subs	r3, #1
 800efc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d1f1      	bne.n	800efac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800efc8:	4b12      	ldr	r3, [pc, #72]	@ (800f014 <xTaskResumeAll+0x134>)
 800efca:	2200      	movs	r2, #0
 800efcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800efce:	4b10      	ldr	r3, [pc, #64]	@ (800f010 <xTaskResumeAll+0x130>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d009      	beq.n	800efea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800efd6:	2301      	movs	r3, #1
 800efd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800efda:	4b0f      	ldr	r3, [pc, #60]	@ (800f018 <xTaskResumeAll+0x138>)
 800efdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efe0:	601a      	str	r2, [r3, #0]
 800efe2:	f3bf 8f4f 	dsb	sy
 800efe6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800efea:	f001 f8ff 	bl	80101ec <vPortExitCritical>

	return xAlreadyYielded;
 800efee:	68bb      	ldr	r3, [r7, #8]
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	20001710 	.word	0x20001710
 800effc:	200016e8 	.word	0x200016e8
 800f000:	200016a8 	.word	0x200016a8
 800f004:	200016f0 	.word	0x200016f0
 800f008:	20001218 	.word	0x20001218
 800f00c:	20001214 	.word	0x20001214
 800f010:	200016fc 	.word	0x200016fc
 800f014:	200016f8 	.word	0x200016f8
 800f018:	e000ed04 	.word	0xe000ed04

0800f01c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f022:	4b05      	ldr	r3, [pc, #20]	@ (800f038 <xTaskGetTickCount+0x1c>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f028:	687b      	ldr	r3, [r7, #4]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	370c      	adds	r7, #12
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	200016ec 	.word	0x200016ec

0800f03c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b086      	sub	sp, #24
 800f040:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f042:	2300      	movs	r3, #0
 800f044:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f046:	4b4f      	ldr	r3, [pc, #316]	@ (800f184 <xTaskIncrementTick+0x148>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	f040 8090 	bne.w	800f170 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f050:	4b4d      	ldr	r3, [pc, #308]	@ (800f188 <xTaskIncrementTick+0x14c>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	3301      	adds	r3, #1
 800f056:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f058:	4a4b      	ldr	r2, [pc, #300]	@ (800f188 <xTaskIncrementTick+0x14c>)
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d121      	bne.n	800f0a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f064:	4b49      	ldr	r3, [pc, #292]	@ (800f18c <xTaskIncrementTick+0x150>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d00b      	beq.n	800f086 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	603b      	str	r3, [r7, #0]
}
 800f080:	bf00      	nop
 800f082:	bf00      	nop
 800f084:	e7fd      	b.n	800f082 <xTaskIncrementTick+0x46>
 800f086:	4b41      	ldr	r3, [pc, #260]	@ (800f18c <xTaskIncrementTick+0x150>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	60fb      	str	r3, [r7, #12]
 800f08c:	4b40      	ldr	r3, [pc, #256]	@ (800f190 <xTaskIncrementTick+0x154>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a3e      	ldr	r2, [pc, #248]	@ (800f18c <xTaskIncrementTick+0x150>)
 800f092:	6013      	str	r3, [r2, #0]
 800f094:	4a3e      	ldr	r2, [pc, #248]	@ (800f190 <xTaskIncrementTick+0x154>)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6013      	str	r3, [r2, #0]
 800f09a:	4b3e      	ldr	r3, [pc, #248]	@ (800f194 <xTaskIncrementTick+0x158>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	4a3c      	ldr	r2, [pc, #240]	@ (800f194 <xTaskIncrementTick+0x158>)
 800f0a2:	6013      	str	r3, [r2, #0]
 800f0a4:	f000 fae2 	bl	800f66c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f0a8:	4b3b      	ldr	r3, [pc, #236]	@ (800f198 <xTaskIncrementTick+0x15c>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	693a      	ldr	r2, [r7, #16]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d349      	bcc.n	800f146 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0b2:	4b36      	ldr	r3, [pc, #216]	@ (800f18c <xTaskIncrementTick+0x150>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d104      	bne.n	800f0c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0bc:	4b36      	ldr	r3, [pc, #216]	@ (800f198 <xTaskIncrementTick+0x15c>)
 800f0be:	f04f 32ff 	mov.w	r2, #4294967295
 800f0c2:	601a      	str	r2, [r3, #0]
					break;
 800f0c4:	e03f      	b.n	800f146 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0c6:	4b31      	ldr	r3, [pc, #196]	@ (800f18c <xTaskIncrementTick+0x150>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	68db      	ldr	r3, [r3, #12]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d203      	bcs.n	800f0e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f0de:	4a2e      	ldr	r2, [pc, #184]	@ (800f198 <xTaskIncrementTick+0x15c>)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f0e4:	e02f      	b.n	800f146 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	3304      	adds	r3, #4
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fe ff62 	bl	800dfb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d004      	beq.n	800f102 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	3318      	adds	r3, #24
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fe ff59 	bl	800dfb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f106:	4b25      	ldr	r3, [pc, #148]	@ (800f19c <xTaskIncrementTick+0x160>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d903      	bls.n	800f116 <xTaskIncrementTick+0xda>
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f112:	4a22      	ldr	r2, [pc, #136]	@ (800f19c <xTaskIncrementTick+0x160>)
 800f114:	6013      	str	r3, [r2, #0]
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f11a:	4613      	mov	r3, r2
 800f11c:	009b      	lsls	r3, r3, #2
 800f11e:	4413      	add	r3, r2
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	4a1f      	ldr	r2, [pc, #124]	@ (800f1a0 <xTaskIncrementTick+0x164>)
 800f124:	441a      	add	r2, r3
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	3304      	adds	r3, #4
 800f12a:	4619      	mov	r1, r3
 800f12c:	4610      	mov	r0, r2
 800f12e:	f7fe fee4 	bl	800defa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f136:	4b1b      	ldr	r3, [pc, #108]	@ (800f1a4 <xTaskIncrementTick+0x168>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d3b8      	bcc.n	800f0b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f140:	2301      	movs	r3, #1
 800f142:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f144:	e7b5      	b.n	800f0b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f146:	4b17      	ldr	r3, [pc, #92]	@ (800f1a4 <xTaskIncrementTick+0x168>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f14c:	4914      	ldr	r1, [pc, #80]	@ (800f1a0 <xTaskIncrementTick+0x164>)
 800f14e:	4613      	mov	r3, r2
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	4413      	add	r3, r2
 800f154:	009b      	lsls	r3, r3, #2
 800f156:	440b      	add	r3, r1
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d901      	bls.n	800f162 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f15e:	2301      	movs	r3, #1
 800f160:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f162:	4b11      	ldr	r3, [pc, #68]	@ (800f1a8 <xTaskIncrementTick+0x16c>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d007      	beq.n	800f17a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f16a:	2301      	movs	r3, #1
 800f16c:	617b      	str	r3, [r7, #20]
 800f16e:	e004      	b.n	800f17a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f170:	4b0e      	ldr	r3, [pc, #56]	@ (800f1ac <xTaskIncrementTick+0x170>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	3301      	adds	r3, #1
 800f176:	4a0d      	ldr	r2, [pc, #52]	@ (800f1ac <xTaskIncrementTick+0x170>)
 800f178:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f17a:	697b      	ldr	r3, [r7, #20]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3718      	adds	r7, #24
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	20001710 	.word	0x20001710
 800f188:	200016ec 	.word	0x200016ec
 800f18c:	200016a0 	.word	0x200016a0
 800f190:	200016a4 	.word	0x200016a4
 800f194:	20001700 	.word	0x20001700
 800f198:	20001708 	.word	0x20001708
 800f19c:	200016f0 	.word	0x200016f0
 800f1a0:	20001218 	.word	0x20001218
 800f1a4:	20001214 	.word	0x20001214
 800f1a8:	200016fc 	.word	0x200016fc
 800f1ac:	200016f8 	.word	0x200016f8

0800f1b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b085      	sub	sp, #20
 800f1b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f1b6:	4b2b      	ldr	r3, [pc, #172]	@ (800f264 <vTaskSwitchContext+0xb4>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d003      	beq.n	800f1c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f1be:	4b2a      	ldr	r3, [pc, #168]	@ (800f268 <vTaskSwitchContext+0xb8>)
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f1c4:	e047      	b.n	800f256 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f1c6:	4b28      	ldr	r3, [pc, #160]	@ (800f268 <vTaskSwitchContext+0xb8>)
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1cc:	4b27      	ldr	r3, [pc, #156]	@ (800f26c <vTaskSwitchContext+0xbc>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	60fb      	str	r3, [r7, #12]
 800f1d2:	e011      	b.n	800f1f8 <vTaskSwitchContext+0x48>
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10b      	bne.n	800f1f2 <vTaskSwitchContext+0x42>
	__asm volatile
 800f1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1de:	f383 8811 	msr	BASEPRI, r3
 800f1e2:	f3bf 8f6f 	isb	sy
 800f1e6:	f3bf 8f4f 	dsb	sy
 800f1ea:	607b      	str	r3, [r7, #4]
}
 800f1ec:	bf00      	nop
 800f1ee:	bf00      	nop
 800f1f0:	e7fd      	b.n	800f1ee <vTaskSwitchContext+0x3e>
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	60fb      	str	r3, [r7, #12]
 800f1f8:	491d      	ldr	r1, [pc, #116]	@ (800f270 <vTaskSwitchContext+0xc0>)
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	4413      	add	r3, r2
 800f202:	009b      	lsls	r3, r3, #2
 800f204:	440b      	add	r3, r1
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d0e3      	beq.n	800f1d4 <vTaskSwitchContext+0x24>
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	4613      	mov	r3, r2
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	4413      	add	r3, r2
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	4a16      	ldr	r2, [pc, #88]	@ (800f270 <vTaskSwitchContext+0xc0>)
 800f218:	4413      	add	r3, r2
 800f21a:	60bb      	str	r3, [r7, #8]
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	685a      	ldr	r2, [r3, #4]
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	605a      	str	r2, [r3, #4]
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	685a      	ldr	r2, [r3, #4]
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	3308      	adds	r3, #8
 800f22e:	429a      	cmp	r2, r3
 800f230:	d104      	bne.n	800f23c <vTaskSwitchContext+0x8c>
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	685a      	ldr	r2, [r3, #4]
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	605a      	str	r2, [r3, #4]
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	68db      	ldr	r3, [r3, #12]
 800f242:	4a0c      	ldr	r2, [pc, #48]	@ (800f274 <vTaskSwitchContext+0xc4>)
 800f244:	6013      	str	r3, [r2, #0]
 800f246:	4a09      	ldr	r2, [pc, #36]	@ (800f26c <vTaskSwitchContext+0xbc>)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f24c:	4b09      	ldr	r3, [pc, #36]	@ (800f274 <vTaskSwitchContext+0xc4>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	3354      	adds	r3, #84	@ 0x54
 800f252:	4a09      	ldr	r2, [pc, #36]	@ (800f278 <vTaskSwitchContext+0xc8>)
 800f254:	6013      	str	r3, [r2, #0]
}
 800f256:	bf00      	nop
 800f258:	3714      	adds	r7, #20
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop
 800f264:	20001710 	.word	0x20001710
 800f268:	200016fc 	.word	0x200016fc
 800f26c:	200016f0 	.word	0x200016f0
 800f270:	20001218 	.word	0x20001218
 800f274:	20001214 	.word	0x20001214
 800f278:	200000a4 	.word	0x200000a4

0800f27c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d10b      	bne.n	800f2a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f290:	f383 8811 	msr	BASEPRI, r3
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	f3bf 8f4f 	dsb	sy
 800f29c:	60fb      	str	r3, [r7, #12]
}
 800f29e:	bf00      	nop
 800f2a0:	bf00      	nop
 800f2a2:	e7fd      	b.n	800f2a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2a4:	4b07      	ldr	r3, [pc, #28]	@ (800f2c4 <vTaskPlaceOnEventList+0x48>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	3318      	adds	r3, #24
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7fe fe48 	bl	800df42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f2b2:	2101      	movs	r1, #1
 800f2b4:	6838      	ldr	r0, [r7, #0]
 800f2b6:	f000 fa87 	bl	800f7c8 <prvAddCurrentTaskToDelayedList>
}
 800f2ba:	bf00      	nop
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	20001214 	.word	0x20001214

0800f2c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b086      	sub	sp, #24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d10b      	bne.n	800f2f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2de:	f383 8811 	msr	BASEPRI, r3
 800f2e2:	f3bf 8f6f 	isb	sy
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	617b      	str	r3, [r7, #20]
}
 800f2ec:	bf00      	nop
 800f2ee:	bf00      	nop
 800f2f0:	e7fd      	b.n	800f2ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2f2:	4b0a      	ldr	r3, [pc, #40]	@ (800f31c <vTaskPlaceOnEventListRestricted+0x54>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	3318      	adds	r3, #24
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	68f8      	ldr	r0, [r7, #12]
 800f2fc:	f7fe fdfd 	bl	800defa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d002      	beq.n	800f30c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f306:	f04f 33ff 	mov.w	r3, #4294967295
 800f30a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f30c:	6879      	ldr	r1, [r7, #4]
 800f30e:	68b8      	ldr	r0, [r7, #8]
 800f310:	f000 fa5a 	bl	800f7c8 <prvAddCurrentTaskToDelayedList>
	}
 800f314:	bf00      	nop
 800f316:	3718      	adds	r7, #24
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	20001214 	.word	0x20001214

0800f320 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	68db      	ldr	r3, [r3, #12]
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d10b      	bne.n	800f34e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f33a:	f383 8811 	msr	BASEPRI, r3
 800f33e:	f3bf 8f6f 	isb	sy
 800f342:	f3bf 8f4f 	dsb	sy
 800f346:	60fb      	str	r3, [r7, #12]
}
 800f348:	bf00      	nop
 800f34a:	bf00      	nop
 800f34c:	e7fd      	b.n	800f34a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	3318      	adds	r3, #24
 800f352:	4618      	mov	r0, r3
 800f354:	f7fe fe2e 	bl	800dfb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f358:	4b1d      	ldr	r3, [pc, #116]	@ (800f3d0 <xTaskRemoveFromEventList+0xb0>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d11d      	bne.n	800f39c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	3304      	adds	r3, #4
 800f364:	4618      	mov	r0, r3
 800f366:	f7fe fe25 	bl	800dfb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f36e:	4b19      	ldr	r3, [pc, #100]	@ (800f3d4 <xTaskRemoveFromEventList+0xb4>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	429a      	cmp	r2, r3
 800f374:	d903      	bls.n	800f37e <xTaskRemoveFromEventList+0x5e>
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f37a:	4a16      	ldr	r2, [pc, #88]	@ (800f3d4 <xTaskRemoveFromEventList+0xb4>)
 800f37c:	6013      	str	r3, [r2, #0]
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f382:	4613      	mov	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	4413      	add	r3, r2
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	4a13      	ldr	r2, [pc, #76]	@ (800f3d8 <xTaskRemoveFromEventList+0xb8>)
 800f38c:	441a      	add	r2, r3
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	3304      	adds	r3, #4
 800f392:	4619      	mov	r1, r3
 800f394:	4610      	mov	r0, r2
 800f396:	f7fe fdb0 	bl	800defa <vListInsertEnd>
 800f39a:	e005      	b.n	800f3a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	3318      	adds	r3, #24
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	480e      	ldr	r0, [pc, #56]	@ (800f3dc <xTaskRemoveFromEventList+0xbc>)
 800f3a4:	f7fe fda9 	bl	800defa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3ac:	4b0c      	ldr	r3, [pc, #48]	@ (800f3e0 <xTaskRemoveFromEventList+0xc0>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d905      	bls.n	800f3c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f3ba:	4b0a      	ldr	r3, [pc, #40]	@ (800f3e4 <xTaskRemoveFromEventList+0xc4>)
 800f3bc:	2201      	movs	r2, #1
 800f3be:	601a      	str	r2, [r3, #0]
 800f3c0:	e001      	b.n	800f3c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f3c6:	697b      	ldr	r3, [r7, #20]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	20001710 	.word	0x20001710
 800f3d4:	200016f0 	.word	0x200016f0
 800f3d8:	20001218 	.word	0x20001218
 800f3dc:	200016a8 	.word	0x200016a8
 800f3e0:	20001214 	.word	0x20001214
 800f3e4:	200016fc 	.word	0x200016fc

0800f3e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f3f0:	4b06      	ldr	r3, [pc, #24]	@ (800f40c <vTaskInternalSetTimeOutState+0x24>)
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f3f8:	4b05      	ldr	r3, [pc, #20]	@ (800f410 <vTaskInternalSetTimeOutState+0x28>)
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	605a      	str	r2, [r3, #4]
}
 800f400:	bf00      	nop
 800f402:	370c      	adds	r7, #12
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr
 800f40c:	20001700 	.word	0x20001700
 800f410:	200016ec 	.word	0x200016ec

0800f414 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b088      	sub	sp, #32
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10b      	bne.n	800f43c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f428:	f383 8811 	msr	BASEPRI, r3
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	613b      	str	r3, [r7, #16]
}
 800f436:	bf00      	nop
 800f438:	bf00      	nop
 800f43a:	e7fd      	b.n	800f438 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d10b      	bne.n	800f45a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f446:	f383 8811 	msr	BASEPRI, r3
 800f44a:	f3bf 8f6f 	isb	sy
 800f44e:	f3bf 8f4f 	dsb	sy
 800f452:	60fb      	str	r3, [r7, #12]
}
 800f454:	bf00      	nop
 800f456:	bf00      	nop
 800f458:	e7fd      	b.n	800f456 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f45a:	f000 fe95 	bl	8010188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f45e:	4b1d      	ldr	r3, [pc, #116]	@ (800f4d4 <xTaskCheckForTimeOut+0xc0>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	69ba      	ldr	r2, [r7, #24]
 800f46a:	1ad3      	subs	r3, r2, r3
 800f46c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f476:	d102      	bne.n	800f47e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f478:	2300      	movs	r3, #0
 800f47a:	61fb      	str	r3, [r7, #28]
 800f47c:	e023      	b.n	800f4c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	4b15      	ldr	r3, [pc, #84]	@ (800f4d8 <xTaskCheckForTimeOut+0xc4>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	429a      	cmp	r2, r3
 800f488:	d007      	beq.n	800f49a <xTaskCheckForTimeOut+0x86>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	69ba      	ldr	r2, [r7, #24]
 800f490:	429a      	cmp	r2, r3
 800f492:	d302      	bcc.n	800f49a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f494:	2301      	movs	r3, #1
 800f496:	61fb      	str	r3, [r7, #28]
 800f498:	e015      	b.n	800f4c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	697a      	ldr	r2, [r7, #20]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d20b      	bcs.n	800f4bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	681a      	ldr	r2, [r3, #0]
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	1ad2      	subs	r2, r2, r3
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7ff ff99 	bl	800f3e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	61fb      	str	r3, [r7, #28]
 800f4ba:	e004      	b.n	800f4c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f4c6:	f000 fe91 	bl	80101ec <vPortExitCritical>

	return xReturn;
 800f4ca:	69fb      	ldr	r3, [r7, #28]
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3720      	adds	r7, #32
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	200016ec 	.word	0x200016ec
 800f4d8:	20001700 	.word	0x20001700

0800f4dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f4dc:	b480      	push	{r7}
 800f4de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f4e0:	4b03      	ldr	r3, [pc, #12]	@ (800f4f0 <vTaskMissedYield+0x14>)
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	601a      	str	r2, [r3, #0]
}
 800f4e6:	bf00      	nop
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr
 800f4f0:	200016fc 	.word	0x200016fc

0800f4f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f4fc:	f000 f852 	bl	800f5a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f500:	4b06      	ldr	r3, [pc, #24]	@ (800f51c <prvIdleTask+0x28>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b01      	cmp	r3, #1
 800f506:	d9f9      	bls.n	800f4fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800f508:	4b05      	ldr	r3, [pc, #20]	@ (800f520 <prvIdleTask+0x2c>)
 800f50a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f50e:	601a      	str	r2, [r3, #0]
 800f510:	f3bf 8f4f 	dsb	sy
 800f514:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f518:	e7f0      	b.n	800f4fc <prvIdleTask+0x8>
 800f51a:	bf00      	nop
 800f51c:	20001218 	.word	0x20001218
 800f520:	e000ed04 	.word	0xe000ed04

0800f524 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f52a:	2300      	movs	r3, #0
 800f52c:	607b      	str	r3, [r7, #4]
 800f52e:	e00c      	b.n	800f54a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	4613      	mov	r3, r2
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	4413      	add	r3, r2
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	4a12      	ldr	r2, [pc, #72]	@ (800f584 <prvInitialiseTaskLists+0x60>)
 800f53c:	4413      	add	r3, r2
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fe fcae 	bl	800dea0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	3301      	adds	r3, #1
 800f548:	607b      	str	r3, [r7, #4]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2b37      	cmp	r3, #55	@ 0x37
 800f54e:	d9ef      	bls.n	800f530 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f550:	480d      	ldr	r0, [pc, #52]	@ (800f588 <prvInitialiseTaskLists+0x64>)
 800f552:	f7fe fca5 	bl	800dea0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f556:	480d      	ldr	r0, [pc, #52]	@ (800f58c <prvInitialiseTaskLists+0x68>)
 800f558:	f7fe fca2 	bl	800dea0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f55c:	480c      	ldr	r0, [pc, #48]	@ (800f590 <prvInitialiseTaskLists+0x6c>)
 800f55e:	f7fe fc9f 	bl	800dea0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f562:	480c      	ldr	r0, [pc, #48]	@ (800f594 <prvInitialiseTaskLists+0x70>)
 800f564:	f7fe fc9c 	bl	800dea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f568:	480b      	ldr	r0, [pc, #44]	@ (800f598 <prvInitialiseTaskLists+0x74>)
 800f56a:	f7fe fc99 	bl	800dea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f56e:	4b0b      	ldr	r3, [pc, #44]	@ (800f59c <prvInitialiseTaskLists+0x78>)
 800f570:	4a05      	ldr	r2, [pc, #20]	@ (800f588 <prvInitialiseTaskLists+0x64>)
 800f572:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f574:	4b0a      	ldr	r3, [pc, #40]	@ (800f5a0 <prvInitialiseTaskLists+0x7c>)
 800f576:	4a05      	ldr	r2, [pc, #20]	@ (800f58c <prvInitialiseTaskLists+0x68>)
 800f578:	601a      	str	r2, [r3, #0]
}
 800f57a:	bf00      	nop
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	20001218 	.word	0x20001218
 800f588:	20001678 	.word	0x20001678
 800f58c:	2000168c 	.word	0x2000168c
 800f590:	200016a8 	.word	0x200016a8
 800f594:	200016bc 	.word	0x200016bc
 800f598:	200016d4 	.word	0x200016d4
 800f59c:	200016a0 	.word	0x200016a0
 800f5a0:	200016a4 	.word	0x200016a4

0800f5a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5aa:	e019      	b.n	800f5e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f5ac:	f000 fdec 	bl	8010188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5b0:	4b10      	ldr	r3, [pc, #64]	@ (800f5f4 <prvCheckTasksWaitingTermination+0x50>)
 800f5b2:	68db      	ldr	r3, [r3, #12]
 800f5b4:	68db      	ldr	r3, [r3, #12]
 800f5b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	3304      	adds	r3, #4
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7fe fcf9 	bl	800dfb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f5f8 <prvCheckTasksWaitingTermination+0x54>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	4a0b      	ldr	r2, [pc, #44]	@ (800f5f8 <prvCheckTasksWaitingTermination+0x54>)
 800f5ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f5cc:	4b0b      	ldr	r3, [pc, #44]	@ (800f5fc <prvCheckTasksWaitingTermination+0x58>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	3b01      	subs	r3, #1
 800f5d2:	4a0a      	ldr	r2, [pc, #40]	@ (800f5fc <prvCheckTasksWaitingTermination+0x58>)
 800f5d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f5d6:	f000 fe09 	bl	80101ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f810 	bl	800f600 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5e0:	4b06      	ldr	r3, [pc, #24]	@ (800f5fc <prvCheckTasksWaitingTermination+0x58>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d1e1      	bne.n	800f5ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f5e8:	bf00      	nop
 800f5ea:	bf00      	nop
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	200016bc 	.word	0x200016bc
 800f5f8:	200016e8 	.word	0x200016e8
 800f5fc:	200016d0 	.word	0x200016d0

0800f600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	3354      	adds	r3, #84	@ 0x54
 800f60c:	4618      	mov	r0, r3
 800f60e:	f002 f889 	bl	8011724 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d108      	bne.n	800f62e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f620:	4618      	mov	r0, r3
 800f622:	f000 ffa1 	bl	8010568 <vPortFree>
				vPortFree( pxTCB );
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 ff9e 	bl	8010568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f62c:	e019      	b.n	800f662 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f634:	2b01      	cmp	r3, #1
 800f636:	d103      	bne.n	800f640 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 ff95 	bl	8010568 <vPortFree>
	}
 800f63e:	e010      	b.n	800f662 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f646:	2b02      	cmp	r3, #2
 800f648:	d00b      	beq.n	800f662 <prvDeleteTCB+0x62>
	__asm volatile
 800f64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64e:	f383 8811 	msr	BASEPRI, r3
 800f652:	f3bf 8f6f 	isb	sy
 800f656:	f3bf 8f4f 	dsb	sy
 800f65a:	60fb      	str	r3, [r7, #12]
}
 800f65c:	bf00      	nop
 800f65e:	bf00      	nop
 800f660:	e7fd      	b.n	800f65e <prvDeleteTCB+0x5e>
	}
 800f662:	bf00      	nop
 800f664:	3710      	adds	r7, #16
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
	...

0800f66c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f672:	4b0c      	ldr	r3, [pc, #48]	@ (800f6a4 <prvResetNextTaskUnblockTime+0x38>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d104      	bne.n	800f686 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f67c:	4b0a      	ldr	r3, [pc, #40]	@ (800f6a8 <prvResetNextTaskUnblockTime+0x3c>)
 800f67e:	f04f 32ff 	mov.w	r2, #4294967295
 800f682:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f684:	e008      	b.n	800f698 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f686:	4b07      	ldr	r3, [pc, #28]	@ (800f6a4 <prvResetNextTaskUnblockTime+0x38>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	4a04      	ldr	r2, [pc, #16]	@ (800f6a8 <prvResetNextTaskUnblockTime+0x3c>)
 800f696:	6013      	str	r3, [r2, #0]
}
 800f698:	bf00      	nop
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr
 800f6a4:	200016a0 	.word	0x200016a0
 800f6a8:	20001708 	.word	0x20001708

0800f6ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800f6e0 <xTaskGetSchedulerState+0x34>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d102      	bne.n	800f6c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	607b      	str	r3, [r7, #4]
 800f6be:	e008      	b.n	800f6d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6c0:	4b08      	ldr	r3, [pc, #32]	@ (800f6e4 <xTaskGetSchedulerState+0x38>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d102      	bne.n	800f6ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f6c8:	2302      	movs	r3, #2
 800f6ca:	607b      	str	r3, [r7, #4]
 800f6cc:	e001      	b.n	800f6d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f6d2:	687b      	ldr	r3, [r7, #4]
	}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	200016f4 	.word	0x200016f4
 800f6e4:	20001710 	.word	0x20001710

0800f6e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b086      	sub	sp, #24
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d058      	beq.n	800f7b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f6fe:	4b2f      	ldr	r3, [pc, #188]	@ (800f7bc <xTaskPriorityDisinherit+0xd4>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	693a      	ldr	r2, [r7, #16]
 800f704:	429a      	cmp	r2, r3
 800f706:	d00b      	beq.n	800f720 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f70c:	f383 8811 	msr	BASEPRI, r3
 800f710:	f3bf 8f6f 	isb	sy
 800f714:	f3bf 8f4f 	dsb	sy
 800f718:	60fb      	str	r3, [r7, #12]
}
 800f71a:	bf00      	nop
 800f71c:	bf00      	nop
 800f71e:	e7fd      	b.n	800f71c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f724:	2b00      	cmp	r3, #0
 800f726:	d10b      	bne.n	800f740 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f72c:	f383 8811 	msr	BASEPRI, r3
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	f3bf 8f4f 	dsb	sy
 800f738:	60bb      	str	r3, [r7, #8]
}
 800f73a:	bf00      	nop
 800f73c:	bf00      	nop
 800f73e:	e7fd      	b.n	800f73c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f744:	1e5a      	subs	r2, r3, #1
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f752:	429a      	cmp	r2, r3
 800f754:	d02c      	beq.n	800f7b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d128      	bne.n	800f7b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	3304      	adds	r3, #4
 800f762:	4618      	mov	r0, r3
 800f764:	f7fe fc26 	bl	800dfb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f774:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f780:	4b0f      	ldr	r3, [pc, #60]	@ (800f7c0 <xTaskPriorityDisinherit+0xd8>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	429a      	cmp	r2, r3
 800f786:	d903      	bls.n	800f790 <xTaskPriorityDisinherit+0xa8>
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f78c:	4a0c      	ldr	r2, [pc, #48]	@ (800f7c0 <xTaskPriorityDisinherit+0xd8>)
 800f78e:	6013      	str	r3, [r2, #0]
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f794:	4613      	mov	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	4413      	add	r3, r2
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4a09      	ldr	r2, [pc, #36]	@ (800f7c4 <xTaskPriorityDisinherit+0xdc>)
 800f79e:	441a      	add	r2, r3
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	3304      	adds	r3, #4
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	4610      	mov	r0, r2
 800f7a8:	f7fe fba7 	bl	800defa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f7b0:	697b      	ldr	r3, [r7, #20]
	}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3718      	adds	r7, #24
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	20001214 	.word	0x20001214
 800f7c0:	200016f0 	.word	0x200016f0
 800f7c4:	20001218 	.word	0x20001218

0800f7c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f7d2:	4b21      	ldr	r3, [pc, #132]	@ (800f858 <prvAddCurrentTaskToDelayedList+0x90>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7d8:	4b20      	ldr	r3, [pc, #128]	@ (800f85c <prvAddCurrentTaskToDelayedList+0x94>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	3304      	adds	r3, #4
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fe fbe8 	bl	800dfb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ea:	d10a      	bne.n	800f802 <prvAddCurrentTaskToDelayedList+0x3a>
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d007      	beq.n	800f802 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7f2:	4b1a      	ldr	r3, [pc, #104]	@ (800f85c <prvAddCurrentTaskToDelayedList+0x94>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	3304      	adds	r3, #4
 800f7f8:	4619      	mov	r1, r3
 800f7fa:	4819      	ldr	r0, [pc, #100]	@ (800f860 <prvAddCurrentTaskToDelayedList+0x98>)
 800f7fc:	f7fe fb7d 	bl	800defa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f800:	e026      	b.n	800f850 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f802:	68fa      	ldr	r2, [r7, #12]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4413      	add	r3, r2
 800f808:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f80a:	4b14      	ldr	r3, [pc, #80]	@ (800f85c <prvAddCurrentTaskToDelayedList+0x94>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	68ba      	ldr	r2, [r7, #8]
 800f810:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f812:	68ba      	ldr	r2, [r7, #8]
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	429a      	cmp	r2, r3
 800f818:	d209      	bcs.n	800f82e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f81a:	4b12      	ldr	r3, [pc, #72]	@ (800f864 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	4b0f      	ldr	r3, [pc, #60]	@ (800f85c <prvAddCurrentTaskToDelayedList+0x94>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	3304      	adds	r3, #4
 800f824:	4619      	mov	r1, r3
 800f826:	4610      	mov	r0, r2
 800f828:	f7fe fb8b 	bl	800df42 <vListInsert>
}
 800f82c:	e010      	b.n	800f850 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f82e:	4b0e      	ldr	r3, [pc, #56]	@ (800f868 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	4b0a      	ldr	r3, [pc, #40]	@ (800f85c <prvAddCurrentTaskToDelayedList+0x94>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	3304      	adds	r3, #4
 800f838:	4619      	mov	r1, r3
 800f83a:	4610      	mov	r0, r2
 800f83c:	f7fe fb81 	bl	800df42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f840:	4b0a      	ldr	r3, [pc, #40]	@ (800f86c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	429a      	cmp	r2, r3
 800f848:	d202      	bcs.n	800f850 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f84a:	4a08      	ldr	r2, [pc, #32]	@ (800f86c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	6013      	str	r3, [r2, #0]
}
 800f850:	bf00      	nop
 800f852:	3710      	adds	r7, #16
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	200016ec 	.word	0x200016ec
 800f85c:	20001214 	.word	0x20001214
 800f860:	200016d4 	.word	0x200016d4
 800f864:	200016a4 	.word	0x200016a4
 800f868:	200016a0 	.word	0x200016a0
 800f86c:	20001708 	.word	0x20001708

0800f870 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b08a      	sub	sp, #40	@ 0x28
 800f874:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f876:	2300      	movs	r3, #0
 800f878:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f87a:	f000 fb13 	bl	800fea4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f87e:	4b1d      	ldr	r3, [pc, #116]	@ (800f8f4 <xTimerCreateTimerTask+0x84>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d021      	beq.n	800f8ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f886:	2300      	movs	r3, #0
 800f888:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f88a:	2300      	movs	r3, #0
 800f88c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f88e:	1d3a      	adds	r2, r7, #4
 800f890:	f107 0108 	add.w	r1, r7, #8
 800f894:	f107 030c 	add.w	r3, r7, #12
 800f898:	4618      	mov	r0, r3
 800f89a:	f7fe fae7 	bl	800de6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f89e:	6879      	ldr	r1, [r7, #4]
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	68fa      	ldr	r2, [r7, #12]
 800f8a4:	9202      	str	r2, [sp, #8]
 800f8a6:	9301      	str	r3, [sp, #4]
 800f8a8:	2302      	movs	r3, #2
 800f8aa:	9300      	str	r3, [sp, #0]
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	460a      	mov	r2, r1
 800f8b0:	4911      	ldr	r1, [pc, #68]	@ (800f8f8 <xTimerCreateTimerTask+0x88>)
 800f8b2:	4812      	ldr	r0, [pc, #72]	@ (800f8fc <xTimerCreateTimerTask+0x8c>)
 800f8b4:	f7ff f8a2 	bl	800e9fc <xTaskCreateStatic>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	4a11      	ldr	r2, [pc, #68]	@ (800f900 <xTimerCreateTimerTask+0x90>)
 800f8bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f8be:	4b10      	ldr	r3, [pc, #64]	@ (800f900 <xTimerCreateTimerTask+0x90>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d001      	beq.n	800f8ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d10b      	bne.n	800f8e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d4:	f383 8811 	msr	BASEPRI, r3
 800f8d8:	f3bf 8f6f 	isb	sy
 800f8dc:	f3bf 8f4f 	dsb	sy
 800f8e0:	613b      	str	r3, [r7, #16]
}
 800f8e2:	bf00      	nop
 800f8e4:	bf00      	nop
 800f8e6:	e7fd      	b.n	800f8e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f8e8:	697b      	ldr	r3, [r7, #20]
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3718      	adds	r7, #24
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	20001744 	.word	0x20001744
 800f8f8:	08015b0c 	.word	0x08015b0c
 800f8fc:	0800fa3d 	.word	0x0800fa3d
 800f900:	20001748 	.word	0x20001748

0800f904 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b08a      	sub	sp, #40	@ 0x28
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
 800f910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f912:	2300      	movs	r3, #0
 800f914:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d10b      	bne.n	800f934 <xTimerGenericCommand+0x30>
	__asm volatile
 800f91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f920:	f383 8811 	msr	BASEPRI, r3
 800f924:	f3bf 8f6f 	isb	sy
 800f928:	f3bf 8f4f 	dsb	sy
 800f92c:	623b      	str	r3, [r7, #32]
}
 800f92e:	bf00      	nop
 800f930:	bf00      	nop
 800f932:	e7fd      	b.n	800f930 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f934:	4b19      	ldr	r3, [pc, #100]	@ (800f99c <xTimerGenericCommand+0x98>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d02a      	beq.n	800f992 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	2b05      	cmp	r3, #5
 800f94c:	dc18      	bgt.n	800f980 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f94e:	f7ff fead 	bl	800f6ac <xTaskGetSchedulerState>
 800f952:	4603      	mov	r3, r0
 800f954:	2b02      	cmp	r3, #2
 800f956:	d109      	bne.n	800f96c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f958:	4b10      	ldr	r3, [pc, #64]	@ (800f99c <xTimerGenericCommand+0x98>)
 800f95a:	6818      	ldr	r0, [r3, #0]
 800f95c:	f107 0110 	add.w	r1, r7, #16
 800f960:	2300      	movs	r3, #0
 800f962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f964:	f7fe fc5a 	bl	800e21c <xQueueGenericSend>
 800f968:	6278      	str	r0, [r7, #36]	@ 0x24
 800f96a:	e012      	b.n	800f992 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f96c:	4b0b      	ldr	r3, [pc, #44]	@ (800f99c <xTimerGenericCommand+0x98>)
 800f96e:	6818      	ldr	r0, [r3, #0]
 800f970:	f107 0110 	add.w	r1, r7, #16
 800f974:	2300      	movs	r3, #0
 800f976:	2200      	movs	r2, #0
 800f978:	f7fe fc50 	bl	800e21c <xQueueGenericSend>
 800f97c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f97e:	e008      	b.n	800f992 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f980:	4b06      	ldr	r3, [pc, #24]	@ (800f99c <xTimerGenericCommand+0x98>)
 800f982:	6818      	ldr	r0, [r3, #0]
 800f984:	f107 0110 	add.w	r1, r7, #16
 800f988:	2300      	movs	r3, #0
 800f98a:	683a      	ldr	r2, [r7, #0]
 800f98c:	f7fe fd48 	bl	800e420 <xQueueGenericSendFromISR>
 800f990:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f994:	4618      	mov	r0, r3
 800f996:	3728      	adds	r7, #40	@ 0x28
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}
 800f99c:	20001744 	.word	0x20001744

0800f9a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b088      	sub	sp, #32
 800f9a4:	af02      	add	r7, sp, #8
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9aa:	4b23      	ldr	r3, [pc, #140]	@ (800fa38 <prvProcessExpiredTimer+0x98>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fe fafb 	bl	800dfb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9c4:	f003 0304 	and.w	r3, r3, #4
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d023      	beq.n	800fa14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	699a      	ldr	r2, [r3, #24]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	18d1      	adds	r1, r2, r3
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	683a      	ldr	r2, [r7, #0]
 800f9d8:	6978      	ldr	r0, [r7, #20]
 800f9da:	f000 f8d5 	bl	800fb88 <prvInsertTimerInActiveList>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d020      	beq.n	800fa26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	687a      	ldr	r2, [r7, #4]
 800f9ec:	2100      	movs	r1, #0
 800f9ee:	6978      	ldr	r0, [r7, #20]
 800f9f0:	f7ff ff88 	bl	800f904 <xTimerGenericCommand>
 800f9f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d114      	bne.n	800fa26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa00:	f383 8811 	msr	BASEPRI, r3
 800fa04:	f3bf 8f6f 	isb	sy
 800fa08:	f3bf 8f4f 	dsb	sy
 800fa0c:	60fb      	str	r3, [r7, #12]
}
 800fa0e:	bf00      	nop
 800fa10:	bf00      	nop
 800fa12:	e7fd      	b.n	800fa10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa1a:	f023 0301 	bic.w	r3, r3, #1
 800fa1e:	b2da      	uxtb	r2, r3
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	6a1b      	ldr	r3, [r3, #32]
 800fa2a:	6978      	ldr	r0, [r7, #20]
 800fa2c:	4798      	blx	r3
}
 800fa2e:	bf00      	nop
 800fa30:	3718      	adds	r7, #24
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	2000173c 	.word	0x2000173c

0800fa3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fa44:	f107 0308 	add.w	r3, r7, #8
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f000 f859 	bl	800fb00 <prvGetNextExpireTime>
 800fa4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	4619      	mov	r1, r3
 800fa54:	68f8      	ldr	r0, [r7, #12]
 800fa56:	f000 f805 	bl	800fa64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fa5a:	f000 f8d7 	bl	800fc0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fa5e:	bf00      	nop
 800fa60:	e7f0      	b.n	800fa44 <prvTimerTask+0x8>
	...

0800fa64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fa6e:	f7ff fa29 	bl	800eec4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fa72:	f107 0308 	add.w	r3, r7, #8
 800fa76:	4618      	mov	r0, r3
 800fa78:	f000 f866 	bl	800fb48 <prvSampleTimeNow>
 800fa7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d130      	bne.n	800fae6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d10a      	bne.n	800faa0 <prvProcessTimerOrBlockTask+0x3c>
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d806      	bhi.n	800faa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fa92:	f7ff fa25 	bl	800eee0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fa96:	68f9      	ldr	r1, [r7, #12]
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f7ff ff81 	bl	800f9a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fa9e:	e024      	b.n	800faea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d008      	beq.n	800fab8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800faa6:	4b13      	ldr	r3, [pc, #76]	@ (800faf4 <prvProcessTimerOrBlockTask+0x90>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d101      	bne.n	800fab4 <prvProcessTimerOrBlockTask+0x50>
 800fab0:	2301      	movs	r3, #1
 800fab2:	e000      	b.n	800fab6 <prvProcessTimerOrBlockTask+0x52>
 800fab4:	2300      	movs	r3, #0
 800fab6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fab8:	4b0f      	ldr	r3, [pc, #60]	@ (800faf8 <prvProcessTimerOrBlockTask+0x94>)
 800faba:	6818      	ldr	r0, [r3, #0]
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	683a      	ldr	r2, [r7, #0]
 800fac4:	4619      	mov	r1, r3
 800fac6:	f7fe ff65 	bl	800e994 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800faca:	f7ff fa09 	bl	800eee0 <xTaskResumeAll>
 800face:	4603      	mov	r3, r0
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d10a      	bne.n	800faea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fad4:	4b09      	ldr	r3, [pc, #36]	@ (800fafc <prvProcessTimerOrBlockTask+0x98>)
 800fad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fada:	601a      	str	r2, [r3, #0]
 800fadc:	f3bf 8f4f 	dsb	sy
 800fae0:	f3bf 8f6f 	isb	sy
}
 800fae4:	e001      	b.n	800faea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fae6:	f7ff f9fb 	bl	800eee0 <xTaskResumeAll>
}
 800faea:	bf00      	nop
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
 800faf2:	bf00      	nop
 800faf4:	20001740 	.word	0x20001740
 800faf8:	20001744 	.word	0x20001744
 800fafc:	e000ed04 	.word	0xe000ed04

0800fb00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fb00:	b480      	push	{r7}
 800fb02:	b085      	sub	sp, #20
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fb08:	4b0e      	ldr	r3, [pc, #56]	@ (800fb44 <prvGetNextExpireTime+0x44>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d101      	bne.n	800fb16 <prvGetNextExpireTime+0x16>
 800fb12:	2201      	movs	r2, #1
 800fb14:	e000      	b.n	800fb18 <prvGetNextExpireTime+0x18>
 800fb16:	2200      	movs	r2, #0
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d105      	bne.n	800fb30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb24:	4b07      	ldr	r3, [pc, #28]	@ (800fb44 <prvGetNextExpireTime+0x44>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	68db      	ldr	r3, [r3, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	60fb      	str	r3, [r7, #12]
 800fb2e:	e001      	b.n	800fb34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fb30:	2300      	movs	r3, #0
 800fb32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fb34:	68fb      	ldr	r3, [r7, #12]
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3714      	adds	r7, #20
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	2000173c 	.word	0x2000173c

0800fb48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fb50:	f7ff fa64 	bl	800f01c <xTaskGetTickCount>
 800fb54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fb56:	4b0b      	ldr	r3, [pc, #44]	@ (800fb84 <prvSampleTimeNow+0x3c>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	68fa      	ldr	r2, [r7, #12]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d205      	bcs.n	800fb6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fb60:	f000 f93a 	bl	800fdd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2201      	movs	r2, #1
 800fb68:	601a      	str	r2, [r3, #0]
 800fb6a:	e002      	b.n	800fb72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fb72:	4a04      	ldr	r2, [pc, #16]	@ (800fb84 <prvSampleTimeNow+0x3c>)
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fb78:	68fb      	ldr	r3, [r7, #12]
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	2000174c 	.word	0x2000174c

0800fb88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b086      	sub	sp, #24
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
 800fb94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fb96:	2300      	movs	r3, #0
 800fb98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	68ba      	ldr	r2, [r7, #8]
 800fb9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	68fa      	ldr	r2, [r7, #12]
 800fba4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fba6:	68ba      	ldr	r2, [r7, #8]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d812      	bhi.n	800fbd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	1ad2      	subs	r2, r2, r3
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	699b      	ldr	r3, [r3, #24]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d302      	bcc.n	800fbc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	617b      	str	r3, [r7, #20]
 800fbc0:	e01b      	b.n	800fbfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fbc2:	4b10      	ldr	r3, [pc, #64]	@ (800fc04 <prvInsertTimerInActiveList+0x7c>)
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	3304      	adds	r3, #4
 800fbca:	4619      	mov	r1, r3
 800fbcc:	4610      	mov	r0, r2
 800fbce:	f7fe f9b8 	bl	800df42 <vListInsert>
 800fbd2:	e012      	b.n	800fbfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d206      	bcs.n	800fbea <prvInsertTimerInActiveList+0x62>
 800fbdc:	68ba      	ldr	r2, [r7, #8]
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d302      	bcc.n	800fbea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	617b      	str	r3, [r7, #20]
 800fbe8:	e007      	b.n	800fbfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fbea:	4b07      	ldr	r3, [pc, #28]	@ (800fc08 <prvInsertTimerInActiveList+0x80>)
 800fbec:	681a      	ldr	r2, [r3, #0]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	3304      	adds	r3, #4
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	f7fe f9a4 	bl	800df42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fbfa:	697b      	ldr	r3, [r7, #20]
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3718      	adds	r7, #24
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	20001740 	.word	0x20001740
 800fc08:	2000173c 	.word	0x2000173c

0800fc0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b08e      	sub	sp, #56	@ 0x38
 800fc10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fc12:	e0ce      	b.n	800fdb2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	da19      	bge.n	800fc4e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fc1a:	1d3b      	adds	r3, r7, #4
 800fc1c:	3304      	adds	r3, #4
 800fc1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d10b      	bne.n	800fc3e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800fc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc2a:	f383 8811 	msr	BASEPRI, r3
 800fc2e:	f3bf 8f6f 	isb	sy
 800fc32:	f3bf 8f4f 	dsb	sy
 800fc36:	61fb      	str	r3, [r7, #28]
}
 800fc38:	bf00      	nop
 800fc3a:	bf00      	nop
 800fc3c:	e7fd      	b.n	800fc3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc44:	6850      	ldr	r0, [r2, #4]
 800fc46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc48:	6892      	ldr	r2, [r2, #8]
 800fc4a:	4611      	mov	r1, r2
 800fc4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	f2c0 80ae 	blt.w	800fdb2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fc5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc5c:	695b      	ldr	r3, [r3, #20]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d004      	beq.n	800fc6c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc64:	3304      	adds	r3, #4
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fe f9a4 	bl	800dfb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc6c:	463b      	mov	r3, r7
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7ff ff6a 	bl	800fb48 <prvSampleTimeNow>
 800fc74:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2b09      	cmp	r3, #9
 800fc7a:	f200 8097 	bhi.w	800fdac <prvProcessReceivedCommands+0x1a0>
 800fc7e:	a201      	add	r2, pc, #4	@ (adr r2, 800fc84 <prvProcessReceivedCommands+0x78>)
 800fc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc84:	0800fcad 	.word	0x0800fcad
 800fc88:	0800fcad 	.word	0x0800fcad
 800fc8c:	0800fcad 	.word	0x0800fcad
 800fc90:	0800fd23 	.word	0x0800fd23
 800fc94:	0800fd37 	.word	0x0800fd37
 800fc98:	0800fd83 	.word	0x0800fd83
 800fc9c:	0800fcad 	.word	0x0800fcad
 800fca0:	0800fcad 	.word	0x0800fcad
 800fca4:	0800fd23 	.word	0x0800fd23
 800fca8:	0800fd37 	.word	0x0800fd37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fcac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fcb2:	f043 0301 	orr.w	r3, r3, #1
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fcbe:	68ba      	ldr	r2, [r7, #8]
 800fcc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcc2:	699b      	ldr	r3, [r3, #24]
 800fcc4:	18d1      	adds	r1, r2, r3
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fccc:	f7ff ff5c 	bl	800fb88 <prvInsertTimerInActiveList>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d06c      	beq.n	800fdb0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fcd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd8:	6a1b      	ldr	r3, [r3, #32]
 800fcda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fcdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fcde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fce0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fce4:	f003 0304 	and.w	r3, r3, #4
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d061      	beq.n	800fdb0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fcec:	68ba      	ldr	r2, [r7, #8]
 800fcee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcf0:	699b      	ldr	r3, [r3, #24]
 800fcf2:	441a      	add	r2, r3
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	2100      	movs	r1, #0
 800fcfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fcfe:	f7ff fe01 	bl	800f904 <xTimerGenericCommand>
 800fd02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fd04:	6a3b      	ldr	r3, [r7, #32]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d152      	bne.n	800fdb0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800fd0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd0e:	f383 8811 	msr	BASEPRI, r3
 800fd12:	f3bf 8f6f 	isb	sy
 800fd16:	f3bf 8f4f 	dsb	sy
 800fd1a:	61bb      	str	r3, [r7, #24]
}
 800fd1c:	bf00      	nop
 800fd1e:	bf00      	nop
 800fd20:	e7fd      	b.n	800fd1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd28:	f023 0301 	bic.w	r3, r3, #1
 800fd2c:	b2da      	uxtb	r2, r3
 800fd2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fd34:	e03d      	b.n	800fdb2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd3c:	f043 0301 	orr.w	r3, r3, #1
 800fd40:	b2da      	uxtb	r2, r3
 800fd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fd48:	68ba      	ldr	r2, [r7, #8]
 800fd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd50:	699b      	ldr	r3, [r3, #24]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d10b      	bne.n	800fd6e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800fd56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd5a:	f383 8811 	msr	BASEPRI, r3
 800fd5e:	f3bf 8f6f 	isb	sy
 800fd62:	f3bf 8f4f 	dsb	sy
 800fd66:	617b      	str	r3, [r7, #20]
}
 800fd68:	bf00      	nop
 800fd6a:	bf00      	nop
 800fd6c:	e7fd      	b.n	800fd6a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd70:	699a      	ldr	r2, [r3, #24]
 800fd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd74:	18d1      	adds	r1, r2, r3
 800fd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd7c:	f7ff ff04 	bl	800fb88 <prvInsertTimerInActiveList>
					break;
 800fd80:	e017      	b.n	800fdb2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd88:	f003 0302 	and.w	r3, r3, #2
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d103      	bne.n	800fd98 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fd90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd92:	f000 fbe9 	bl	8010568 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fd96:	e00c      	b.n	800fdb2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd9e:	f023 0301 	bic.w	r3, r3, #1
 800fda2:	b2da      	uxtb	r2, r3
 800fda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fdaa:	e002      	b.n	800fdb2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fdac:	bf00      	nop
 800fdae:	e000      	b.n	800fdb2 <prvProcessReceivedCommands+0x1a6>
					break;
 800fdb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fdb2:	4b08      	ldr	r3, [pc, #32]	@ (800fdd4 <prvProcessReceivedCommands+0x1c8>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	1d39      	adds	r1, r7, #4
 800fdb8:	2200      	movs	r2, #0
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fe fbce 	bl	800e55c <xQueueReceive>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f47f af26 	bne.w	800fc14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fdc8:	bf00      	nop
 800fdca:	bf00      	nop
 800fdcc:	3730      	adds	r7, #48	@ 0x30
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	20001744 	.word	0x20001744

0800fdd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b088      	sub	sp, #32
 800fddc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fdde:	e049      	b.n	800fe74 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fde0:	4b2e      	ldr	r3, [pc, #184]	@ (800fe9c <prvSwitchTimerLists+0xc4>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdea:	4b2c      	ldr	r3, [pc, #176]	@ (800fe9c <prvSwitchTimerLists+0xc4>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	3304      	adds	r3, #4
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7fe f8db 	bl	800dfb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	6a1b      	ldr	r3, [r3, #32]
 800fe02:	68f8      	ldr	r0, [r7, #12]
 800fe04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fe0c:	f003 0304 	and.w	r3, r3, #4
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d02f      	beq.n	800fe74 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	699b      	ldr	r3, [r3, #24]
 800fe18:	693a      	ldr	r2, [r7, #16]
 800fe1a:	4413      	add	r3, r2
 800fe1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fe1e:	68ba      	ldr	r2, [r7, #8]
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d90e      	bls.n	800fe44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	68fa      	ldr	r2, [r7, #12]
 800fe30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fe32:	4b1a      	ldr	r3, [pc, #104]	@ (800fe9c <prvSwitchTimerLists+0xc4>)
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	3304      	adds	r3, #4
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	4610      	mov	r0, r2
 800fe3e:	f7fe f880 	bl	800df42 <vListInsert>
 800fe42:	e017      	b.n	800fe74 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe44:	2300      	movs	r3, #0
 800fe46:	9300      	str	r3, [sp, #0]
 800fe48:	2300      	movs	r3, #0
 800fe4a:	693a      	ldr	r2, [r7, #16]
 800fe4c:	2100      	movs	r1, #0
 800fe4e:	68f8      	ldr	r0, [r7, #12]
 800fe50:	f7ff fd58 	bl	800f904 <xTimerGenericCommand>
 800fe54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d10b      	bne.n	800fe74 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fe5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe60:	f383 8811 	msr	BASEPRI, r3
 800fe64:	f3bf 8f6f 	isb	sy
 800fe68:	f3bf 8f4f 	dsb	sy
 800fe6c:	603b      	str	r3, [r7, #0]
}
 800fe6e:	bf00      	nop
 800fe70:	bf00      	nop
 800fe72:	e7fd      	b.n	800fe70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe74:	4b09      	ldr	r3, [pc, #36]	@ (800fe9c <prvSwitchTimerLists+0xc4>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d1b0      	bne.n	800fde0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fe7e:	4b07      	ldr	r3, [pc, #28]	@ (800fe9c <prvSwitchTimerLists+0xc4>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fe84:	4b06      	ldr	r3, [pc, #24]	@ (800fea0 <prvSwitchTimerLists+0xc8>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	4a04      	ldr	r2, [pc, #16]	@ (800fe9c <prvSwitchTimerLists+0xc4>)
 800fe8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fe8c:	4a04      	ldr	r2, [pc, #16]	@ (800fea0 <prvSwitchTimerLists+0xc8>)
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	6013      	str	r3, [r2, #0]
}
 800fe92:	bf00      	nop
 800fe94:	3718      	adds	r7, #24
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	2000173c 	.word	0x2000173c
 800fea0:	20001740 	.word	0x20001740

0800fea4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800feaa:	f000 f96d 	bl	8010188 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800feae:	4b15      	ldr	r3, [pc, #84]	@ (800ff04 <prvCheckForValidListAndQueue+0x60>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d120      	bne.n	800fef8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800feb6:	4814      	ldr	r0, [pc, #80]	@ (800ff08 <prvCheckForValidListAndQueue+0x64>)
 800feb8:	f7fd fff2 	bl	800dea0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800febc:	4813      	ldr	r0, [pc, #76]	@ (800ff0c <prvCheckForValidListAndQueue+0x68>)
 800febe:	f7fd ffef 	bl	800dea0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fec2:	4b13      	ldr	r3, [pc, #76]	@ (800ff10 <prvCheckForValidListAndQueue+0x6c>)
 800fec4:	4a10      	ldr	r2, [pc, #64]	@ (800ff08 <prvCheckForValidListAndQueue+0x64>)
 800fec6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fec8:	4b12      	ldr	r3, [pc, #72]	@ (800ff14 <prvCheckForValidListAndQueue+0x70>)
 800feca:	4a10      	ldr	r2, [pc, #64]	@ (800ff0c <prvCheckForValidListAndQueue+0x68>)
 800fecc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fece:	2300      	movs	r3, #0
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	4b11      	ldr	r3, [pc, #68]	@ (800ff18 <prvCheckForValidListAndQueue+0x74>)
 800fed4:	4a11      	ldr	r2, [pc, #68]	@ (800ff1c <prvCheckForValidListAndQueue+0x78>)
 800fed6:	2110      	movs	r1, #16
 800fed8:	200a      	movs	r0, #10
 800feda:	f7fe f8ff 	bl	800e0dc <xQueueGenericCreateStatic>
 800fede:	4603      	mov	r3, r0
 800fee0:	4a08      	ldr	r2, [pc, #32]	@ (800ff04 <prvCheckForValidListAndQueue+0x60>)
 800fee2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fee4:	4b07      	ldr	r3, [pc, #28]	@ (800ff04 <prvCheckForValidListAndQueue+0x60>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d005      	beq.n	800fef8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800feec:	4b05      	ldr	r3, [pc, #20]	@ (800ff04 <prvCheckForValidListAndQueue+0x60>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	490b      	ldr	r1, [pc, #44]	@ (800ff20 <prvCheckForValidListAndQueue+0x7c>)
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fe fd24 	bl	800e940 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fef8:	f000 f978 	bl	80101ec <vPortExitCritical>
}
 800fefc:	bf00      	nop
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	bf00      	nop
 800ff04:	20001744 	.word	0x20001744
 800ff08:	20001714 	.word	0x20001714
 800ff0c:	20001728 	.word	0x20001728
 800ff10:	2000173c 	.word	0x2000173c
 800ff14:	20001740 	.word	0x20001740
 800ff18:	200017f0 	.word	0x200017f0
 800ff1c:	20001750 	.word	0x20001750
 800ff20:	08015b14 	.word	0x08015b14

0800ff24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ff24:	b480      	push	{r7}
 800ff26:	b085      	sub	sp, #20
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	3b04      	subs	r3, #4
 800ff34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ff3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	3b04      	subs	r3, #4
 800ff42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	f023 0201 	bic.w	r2, r3, #1
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	3b04      	subs	r3, #4
 800ff52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ff54:	4a0c      	ldr	r2, [pc, #48]	@ (800ff88 <pxPortInitialiseStack+0x64>)
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	3b14      	subs	r3, #20
 800ff5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ff60:	687a      	ldr	r2, [r7, #4]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	3b04      	subs	r3, #4
 800ff6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f06f 0202 	mvn.w	r2, #2
 800ff72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	3b20      	subs	r3, #32
 800ff78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3714      	adds	r7, #20
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	0800ff8d 	.word	0x0800ff8d

0800ff8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b085      	sub	sp, #20
 800ff90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ff92:	2300      	movs	r3, #0
 800ff94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ff96:	4b13      	ldr	r3, [pc, #76]	@ (800ffe4 <prvTaskExitError+0x58>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff9e:	d00b      	beq.n	800ffb8 <prvTaskExitError+0x2c>
	__asm volatile
 800ffa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffa4:	f383 8811 	msr	BASEPRI, r3
 800ffa8:	f3bf 8f6f 	isb	sy
 800ffac:	f3bf 8f4f 	dsb	sy
 800ffb0:	60fb      	str	r3, [r7, #12]
}
 800ffb2:	bf00      	nop
 800ffb4:	bf00      	nop
 800ffb6:	e7fd      	b.n	800ffb4 <prvTaskExitError+0x28>
	__asm volatile
 800ffb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffbc:	f383 8811 	msr	BASEPRI, r3
 800ffc0:	f3bf 8f6f 	isb	sy
 800ffc4:	f3bf 8f4f 	dsb	sy
 800ffc8:	60bb      	str	r3, [r7, #8]
}
 800ffca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ffcc:	bf00      	nop
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d0fc      	beq.n	800ffce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ffd4:	bf00      	nop
 800ffd6:	bf00      	nop
 800ffd8:	3714      	adds	r7, #20
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop
 800ffe4:	20000094 	.word	0x20000094
	...

0800fff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fff0:	4b07      	ldr	r3, [pc, #28]	@ (8010010 <pxCurrentTCBConst2>)
 800fff2:	6819      	ldr	r1, [r3, #0]
 800fff4:	6808      	ldr	r0, [r1, #0]
 800fff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffa:	f380 8809 	msr	PSP, r0
 800fffe:	f3bf 8f6f 	isb	sy
 8010002:	f04f 0000 	mov.w	r0, #0
 8010006:	f380 8811 	msr	BASEPRI, r0
 801000a:	4770      	bx	lr
 801000c:	f3af 8000 	nop.w

08010010 <pxCurrentTCBConst2>:
 8010010:	20001214 	.word	0x20001214
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010014:	bf00      	nop
 8010016:	bf00      	nop

08010018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010018:	4808      	ldr	r0, [pc, #32]	@ (801003c <prvPortStartFirstTask+0x24>)
 801001a:	6800      	ldr	r0, [r0, #0]
 801001c:	6800      	ldr	r0, [r0, #0]
 801001e:	f380 8808 	msr	MSP, r0
 8010022:	f04f 0000 	mov.w	r0, #0
 8010026:	f380 8814 	msr	CONTROL, r0
 801002a:	b662      	cpsie	i
 801002c:	b661      	cpsie	f
 801002e:	f3bf 8f4f 	dsb	sy
 8010032:	f3bf 8f6f 	isb	sy
 8010036:	df00      	svc	0
 8010038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801003a:	bf00      	nop
 801003c:	e000ed08 	.word	0xe000ed08

08010040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b086      	sub	sp, #24
 8010044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010046:	4b47      	ldr	r3, [pc, #284]	@ (8010164 <xPortStartScheduler+0x124>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a47      	ldr	r2, [pc, #284]	@ (8010168 <xPortStartScheduler+0x128>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d10b      	bne.n	8010068 <xPortStartScheduler+0x28>
	__asm volatile
 8010050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010054:	f383 8811 	msr	BASEPRI, r3
 8010058:	f3bf 8f6f 	isb	sy
 801005c:	f3bf 8f4f 	dsb	sy
 8010060:	613b      	str	r3, [r7, #16]
}
 8010062:	bf00      	nop
 8010064:	bf00      	nop
 8010066:	e7fd      	b.n	8010064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010068:	4b3e      	ldr	r3, [pc, #248]	@ (8010164 <xPortStartScheduler+0x124>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4a3f      	ldr	r2, [pc, #252]	@ (801016c <xPortStartScheduler+0x12c>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d10b      	bne.n	801008a <xPortStartScheduler+0x4a>
	__asm volatile
 8010072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010076:	f383 8811 	msr	BASEPRI, r3
 801007a:	f3bf 8f6f 	isb	sy
 801007e:	f3bf 8f4f 	dsb	sy
 8010082:	60fb      	str	r3, [r7, #12]
}
 8010084:	bf00      	nop
 8010086:	bf00      	nop
 8010088:	e7fd      	b.n	8010086 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801008a:	4b39      	ldr	r3, [pc, #228]	@ (8010170 <xPortStartScheduler+0x130>)
 801008c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	b2db      	uxtb	r3, r3
 8010094:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	22ff      	movs	r2, #255	@ 0xff
 801009a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80100a4:	78fb      	ldrb	r3, [r7, #3]
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80100ac:	b2da      	uxtb	r2, r3
 80100ae:	4b31      	ldr	r3, [pc, #196]	@ (8010174 <xPortStartScheduler+0x134>)
 80100b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80100b2:	4b31      	ldr	r3, [pc, #196]	@ (8010178 <xPortStartScheduler+0x138>)
 80100b4:	2207      	movs	r2, #7
 80100b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80100b8:	e009      	b.n	80100ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80100ba:	4b2f      	ldr	r3, [pc, #188]	@ (8010178 <xPortStartScheduler+0x138>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	3b01      	subs	r3, #1
 80100c0:	4a2d      	ldr	r2, [pc, #180]	@ (8010178 <xPortStartScheduler+0x138>)
 80100c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80100c4:	78fb      	ldrb	r3, [r7, #3]
 80100c6:	b2db      	uxtb	r3, r3
 80100c8:	005b      	lsls	r3, r3, #1
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80100ce:	78fb      	ldrb	r3, [r7, #3]
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100d6:	2b80      	cmp	r3, #128	@ 0x80
 80100d8:	d0ef      	beq.n	80100ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80100da:	4b27      	ldr	r3, [pc, #156]	@ (8010178 <xPortStartScheduler+0x138>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f1c3 0307 	rsb	r3, r3, #7
 80100e2:	2b04      	cmp	r3, #4
 80100e4:	d00b      	beq.n	80100fe <xPortStartScheduler+0xbe>
	__asm volatile
 80100e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ea:	f383 8811 	msr	BASEPRI, r3
 80100ee:	f3bf 8f6f 	isb	sy
 80100f2:	f3bf 8f4f 	dsb	sy
 80100f6:	60bb      	str	r3, [r7, #8]
}
 80100f8:	bf00      	nop
 80100fa:	bf00      	nop
 80100fc:	e7fd      	b.n	80100fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80100fe:	4b1e      	ldr	r3, [pc, #120]	@ (8010178 <xPortStartScheduler+0x138>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	021b      	lsls	r3, r3, #8
 8010104:	4a1c      	ldr	r2, [pc, #112]	@ (8010178 <xPortStartScheduler+0x138>)
 8010106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010108:	4b1b      	ldr	r3, [pc, #108]	@ (8010178 <xPortStartScheduler+0x138>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010110:	4a19      	ldr	r2, [pc, #100]	@ (8010178 <xPortStartScheduler+0x138>)
 8010112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	b2da      	uxtb	r2, r3
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801011c:	4b17      	ldr	r3, [pc, #92]	@ (801017c <xPortStartScheduler+0x13c>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4a16      	ldr	r2, [pc, #88]	@ (801017c <xPortStartScheduler+0x13c>)
 8010122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010128:	4b14      	ldr	r3, [pc, #80]	@ (801017c <xPortStartScheduler+0x13c>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4a13      	ldr	r2, [pc, #76]	@ (801017c <xPortStartScheduler+0x13c>)
 801012e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010134:	f000 f8da 	bl	80102ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010138:	4b11      	ldr	r3, [pc, #68]	@ (8010180 <xPortStartScheduler+0x140>)
 801013a:	2200      	movs	r2, #0
 801013c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801013e:	f000 f8f9 	bl	8010334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010142:	4b10      	ldr	r3, [pc, #64]	@ (8010184 <xPortStartScheduler+0x144>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4a0f      	ldr	r2, [pc, #60]	@ (8010184 <xPortStartScheduler+0x144>)
 8010148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801014c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801014e:	f7ff ff63 	bl	8010018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010152:	f7ff f82d 	bl	800f1b0 <vTaskSwitchContext>
	prvTaskExitError();
 8010156:	f7ff ff19 	bl	800ff8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801015a:	2300      	movs	r3, #0
}
 801015c:	4618      	mov	r0, r3
 801015e:	3718      	adds	r7, #24
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}
 8010164:	e000ed00 	.word	0xe000ed00
 8010168:	410fc271 	.word	0x410fc271
 801016c:	410fc270 	.word	0x410fc270
 8010170:	e000e400 	.word	0xe000e400
 8010174:	20001840 	.word	0x20001840
 8010178:	20001844 	.word	0x20001844
 801017c:	e000ed20 	.word	0xe000ed20
 8010180:	20000094 	.word	0x20000094
 8010184:	e000ef34 	.word	0xe000ef34

08010188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
	__asm volatile
 801018e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010192:	f383 8811 	msr	BASEPRI, r3
 8010196:	f3bf 8f6f 	isb	sy
 801019a:	f3bf 8f4f 	dsb	sy
 801019e:	607b      	str	r3, [r7, #4]
}
 80101a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80101a2:	4b10      	ldr	r3, [pc, #64]	@ (80101e4 <vPortEnterCritical+0x5c>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	3301      	adds	r3, #1
 80101a8:	4a0e      	ldr	r2, [pc, #56]	@ (80101e4 <vPortEnterCritical+0x5c>)
 80101aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80101ac:	4b0d      	ldr	r3, [pc, #52]	@ (80101e4 <vPortEnterCritical+0x5c>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d110      	bne.n	80101d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80101b4:	4b0c      	ldr	r3, [pc, #48]	@ (80101e8 <vPortEnterCritical+0x60>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d00b      	beq.n	80101d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80101be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101c2:	f383 8811 	msr	BASEPRI, r3
 80101c6:	f3bf 8f6f 	isb	sy
 80101ca:	f3bf 8f4f 	dsb	sy
 80101ce:	603b      	str	r3, [r7, #0]
}
 80101d0:	bf00      	nop
 80101d2:	bf00      	nop
 80101d4:	e7fd      	b.n	80101d2 <vPortEnterCritical+0x4a>
	}
}
 80101d6:	bf00      	nop
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	20000094 	.word	0x20000094
 80101e8:	e000ed04 	.word	0xe000ed04

080101ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80101f2:	4b12      	ldr	r3, [pc, #72]	@ (801023c <vPortExitCritical+0x50>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d10b      	bne.n	8010212 <vPortExitCritical+0x26>
	__asm volatile
 80101fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101fe:	f383 8811 	msr	BASEPRI, r3
 8010202:	f3bf 8f6f 	isb	sy
 8010206:	f3bf 8f4f 	dsb	sy
 801020a:	607b      	str	r3, [r7, #4]
}
 801020c:	bf00      	nop
 801020e:	bf00      	nop
 8010210:	e7fd      	b.n	801020e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010212:	4b0a      	ldr	r3, [pc, #40]	@ (801023c <vPortExitCritical+0x50>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	3b01      	subs	r3, #1
 8010218:	4a08      	ldr	r2, [pc, #32]	@ (801023c <vPortExitCritical+0x50>)
 801021a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801021c:	4b07      	ldr	r3, [pc, #28]	@ (801023c <vPortExitCritical+0x50>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d105      	bne.n	8010230 <vPortExitCritical+0x44>
 8010224:	2300      	movs	r3, #0
 8010226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	f383 8811 	msr	BASEPRI, r3
}
 801022e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010230:	bf00      	nop
 8010232:	370c      	adds	r7, #12
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr
 801023c:	20000094 	.word	0x20000094

08010240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010240:	f3ef 8009 	mrs	r0, PSP
 8010244:	f3bf 8f6f 	isb	sy
 8010248:	4b15      	ldr	r3, [pc, #84]	@ (80102a0 <pxCurrentTCBConst>)
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	f01e 0f10 	tst.w	lr, #16
 8010250:	bf08      	it	eq
 8010252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801025a:	6010      	str	r0, [r2, #0]
 801025c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010264:	f380 8811 	msr	BASEPRI, r0
 8010268:	f3bf 8f4f 	dsb	sy
 801026c:	f3bf 8f6f 	isb	sy
 8010270:	f7fe ff9e 	bl	800f1b0 <vTaskSwitchContext>
 8010274:	f04f 0000 	mov.w	r0, #0
 8010278:	f380 8811 	msr	BASEPRI, r0
 801027c:	bc09      	pop	{r0, r3}
 801027e:	6819      	ldr	r1, [r3, #0]
 8010280:	6808      	ldr	r0, [r1, #0]
 8010282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010286:	f01e 0f10 	tst.w	lr, #16
 801028a:	bf08      	it	eq
 801028c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010290:	f380 8809 	msr	PSP, r0
 8010294:	f3bf 8f6f 	isb	sy
 8010298:	4770      	bx	lr
 801029a:	bf00      	nop
 801029c:	f3af 8000 	nop.w

080102a0 <pxCurrentTCBConst>:
 80102a0:	20001214 	.word	0x20001214
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80102a4:	bf00      	nop
 80102a6:	bf00      	nop

080102a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b082      	sub	sp, #8
 80102ac:	af00      	add	r7, sp, #0
	__asm volatile
 80102ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102b2:	f383 8811 	msr	BASEPRI, r3
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	607b      	str	r3, [r7, #4]
}
 80102c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80102c2:	f7fe febb 	bl	800f03c <xTaskIncrementTick>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d003      	beq.n	80102d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80102cc:	4b06      	ldr	r3, [pc, #24]	@ (80102e8 <xPortSysTickHandler+0x40>)
 80102ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102d2:	601a      	str	r2, [r3, #0]
 80102d4:	2300      	movs	r3, #0
 80102d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	f383 8811 	msr	BASEPRI, r3
}
 80102de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80102e0:	bf00      	nop
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	e000ed04 	.word	0xe000ed04

080102ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80102ec:	b480      	push	{r7}
 80102ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80102f0:	4b0b      	ldr	r3, [pc, #44]	@ (8010320 <vPortSetupTimerInterrupt+0x34>)
 80102f2:	2200      	movs	r2, #0
 80102f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80102f6:	4b0b      	ldr	r3, [pc, #44]	@ (8010324 <vPortSetupTimerInterrupt+0x38>)
 80102f8:	2200      	movs	r2, #0
 80102fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80102fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010328 <vPortSetupTimerInterrupt+0x3c>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	4a0a      	ldr	r2, [pc, #40]	@ (801032c <vPortSetupTimerInterrupt+0x40>)
 8010302:	fba2 2303 	umull	r2, r3, r2, r3
 8010306:	099b      	lsrs	r3, r3, #6
 8010308:	4a09      	ldr	r2, [pc, #36]	@ (8010330 <vPortSetupTimerInterrupt+0x44>)
 801030a:	3b01      	subs	r3, #1
 801030c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801030e:	4b04      	ldr	r3, [pc, #16]	@ (8010320 <vPortSetupTimerInterrupt+0x34>)
 8010310:	2207      	movs	r2, #7
 8010312:	601a      	str	r2, [r3, #0]
}
 8010314:	bf00      	nop
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr
 801031e:	bf00      	nop
 8010320:	e000e010 	.word	0xe000e010
 8010324:	e000e018 	.word	0xe000e018
 8010328:	20000018 	.word	0x20000018
 801032c:	10624dd3 	.word	0x10624dd3
 8010330:	e000e014 	.word	0xe000e014

08010334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010344 <vPortEnableVFP+0x10>
 8010338:	6801      	ldr	r1, [r0, #0]
 801033a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801033e:	6001      	str	r1, [r0, #0]
 8010340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010342:	bf00      	nop
 8010344:	e000ed88 	.word	0xe000ed88

08010348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010348:	b480      	push	{r7}
 801034a:	b085      	sub	sp, #20
 801034c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801034e:	f3ef 8305 	mrs	r3, IPSR
 8010352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2b0f      	cmp	r3, #15
 8010358:	d915      	bls.n	8010386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801035a:	4a18      	ldr	r2, [pc, #96]	@ (80103bc <vPortValidateInterruptPriority+0x74>)
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	4413      	add	r3, r2
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010364:	4b16      	ldr	r3, [pc, #88]	@ (80103c0 <vPortValidateInterruptPriority+0x78>)
 8010366:	781b      	ldrb	r3, [r3, #0]
 8010368:	7afa      	ldrb	r2, [r7, #11]
 801036a:	429a      	cmp	r2, r3
 801036c:	d20b      	bcs.n	8010386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801036e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010372:	f383 8811 	msr	BASEPRI, r3
 8010376:	f3bf 8f6f 	isb	sy
 801037a:	f3bf 8f4f 	dsb	sy
 801037e:	607b      	str	r3, [r7, #4]
}
 8010380:	bf00      	nop
 8010382:	bf00      	nop
 8010384:	e7fd      	b.n	8010382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010386:	4b0f      	ldr	r3, [pc, #60]	@ (80103c4 <vPortValidateInterruptPriority+0x7c>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801038e:	4b0e      	ldr	r3, [pc, #56]	@ (80103c8 <vPortValidateInterruptPriority+0x80>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	429a      	cmp	r2, r3
 8010394:	d90b      	bls.n	80103ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801039a:	f383 8811 	msr	BASEPRI, r3
 801039e:	f3bf 8f6f 	isb	sy
 80103a2:	f3bf 8f4f 	dsb	sy
 80103a6:	603b      	str	r3, [r7, #0]
}
 80103a8:	bf00      	nop
 80103aa:	bf00      	nop
 80103ac:	e7fd      	b.n	80103aa <vPortValidateInterruptPriority+0x62>
	}
 80103ae:	bf00      	nop
 80103b0:	3714      	adds	r7, #20
 80103b2:	46bd      	mov	sp, r7
 80103b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop
 80103bc:	e000e3f0 	.word	0xe000e3f0
 80103c0:	20001840 	.word	0x20001840
 80103c4:	e000ed0c 	.word	0xe000ed0c
 80103c8:	20001844 	.word	0x20001844

080103cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b08a      	sub	sp, #40	@ 0x28
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80103d4:	2300      	movs	r3, #0
 80103d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80103d8:	f7fe fd74 	bl	800eec4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80103dc:	4b5c      	ldr	r3, [pc, #368]	@ (8010550 <pvPortMalloc+0x184>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d101      	bne.n	80103e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80103e4:	f000 f924 	bl	8010630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80103e8:	4b5a      	ldr	r3, [pc, #360]	@ (8010554 <pvPortMalloc+0x188>)
 80103ea:	681a      	ldr	r2, [r3, #0]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4013      	ands	r3, r2
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	f040 8095 	bne.w	8010520 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d01e      	beq.n	801043a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80103fc:	2208      	movs	r2, #8
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4413      	add	r3, r2
 8010402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f003 0307 	and.w	r3, r3, #7
 801040a:	2b00      	cmp	r3, #0
 801040c:	d015      	beq.n	801043a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f023 0307 	bic.w	r3, r3, #7
 8010414:	3308      	adds	r3, #8
 8010416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f003 0307 	and.w	r3, r3, #7
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00b      	beq.n	801043a <pvPortMalloc+0x6e>
	__asm volatile
 8010422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010426:	f383 8811 	msr	BASEPRI, r3
 801042a:	f3bf 8f6f 	isb	sy
 801042e:	f3bf 8f4f 	dsb	sy
 8010432:	617b      	str	r3, [r7, #20]
}
 8010434:	bf00      	nop
 8010436:	bf00      	nop
 8010438:	e7fd      	b.n	8010436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d06f      	beq.n	8010520 <pvPortMalloc+0x154>
 8010440:	4b45      	ldr	r3, [pc, #276]	@ (8010558 <pvPortMalloc+0x18c>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	429a      	cmp	r2, r3
 8010448:	d86a      	bhi.n	8010520 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801044a:	4b44      	ldr	r3, [pc, #272]	@ (801055c <pvPortMalloc+0x190>)
 801044c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801044e:	4b43      	ldr	r3, [pc, #268]	@ (801055c <pvPortMalloc+0x190>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010454:	e004      	b.n	8010460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801045a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	429a      	cmp	r2, r3
 8010468:	d903      	bls.n	8010472 <pvPortMalloc+0xa6>
 801046a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d1f1      	bne.n	8010456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010472:	4b37      	ldr	r3, [pc, #220]	@ (8010550 <pvPortMalloc+0x184>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010478:	429a      	cmp	r2, r3
 801047a:	d051      	beq.n	8010520 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801047c:	6a3b      	ldr	r3, [r7, #32]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	2208      	movs	r2, #8
 8010482:	4413      	add	r3, r2
 8010484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	6a3b      	ldr	r3, [r7, #32]
 801048c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801048e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010490:	685a      	ldr	r2, [r3, #4]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	1ad2      	subs	r2, r2, r3
 8010496:	2308      	movs	r3, #8
 8010498:	005b      	lsls	r3, r3, #1
 801049a:	429a      	cmp	r2, r3
 801049c:	d920      	bls.n	80104e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801049e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	4413      	add	r3, r2
 80104a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	f003 0307 	and.w	r3, r3, #7
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d00b      	beq.n	80104c8 <pvPortMalloc+0xfc>
	__asm volatile
 80104b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104b4:	f383 8811 	msr	BASEPRI, r3
 80104b8:	f3bf 8f6f 	isb	sy
 80104bc:	f3bf 8f4f 	dsb	sy
 80104c0:	613b      	str	r3, [r7, #16]
}
 80104c2:	bf00      	nop
 80104c4:	bf00      	nop
 80104c6:	e7fd      	b.n	80104c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80104c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ca:	685a      	ldr	r2, [r3, #4]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	1ad2      	subs	r2, r2, r3
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80104d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104d6:	687a      	ldr	r2, [r7, #4]
 80104d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80104da:	69b8      	ldr	r0, [r7, #24]
 80104dc:	f000 f90a 	bl	80106f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80104e0:	4b1d      	ldr	r3, [pc, #116]	@ (8010558 <pvPortMalloc+0x18c>)
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	1ad3      	subs	r3, r2, r3
 80104ea:	4a1b      	ldr	r2, [pc, #108]	@ (8010558 <pvPortMalloc+0x18c>)
 80104ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80104ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010558 <pvPortMalloc+0x18c>)
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010560 <pvPortMalloc+0x194>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d203      	bcs.n	8010502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80104fa:	4b17      	ldr	r3, [pc, #92]	@ (8010558 <pvPortMalloc+0x18c>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	4a18      	ldr	r2, [pc, #96]	@ (8010560 <pvPortMalloc+0x194>)
 8010500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010504:	685a      	ldr	r2, [r3, #4]
 8010506:	4b13      	ldr	r3, [pc, #76]	@ (8010554 <pvPortMalloc+0x188>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	431a      	orrs	r2, r3
 801050c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801050e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010512:	2200      	movs	r2, #0
 8010514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010516:	4b13      	ldr	r3, [pc, #76]	@ (8010564 <pvPortMalloc+0x198>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	3301      	adds	r3, #1
 801051c:	4a11      	ldr	r2, [pc, #68]	@ (8010564 <pvPortMalloc+0x198>)
 801051e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010520:	f7fe fcde 	bl	800eee0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	f003 0307 	and.w	r3, r3, #7
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00b      	beq.n	8010546 <pvPortMalloc+0x17a>
	__asm volatile
 801052e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010532:	f383 8811 	msr	BASEPRI, r3
 8010536:	f3bf 8f6f 	isb	sy
 801053a:	f3bf 8f4f 	dsb	sy
 801053e:	60fb      	str	r3, [r7, #12]
}
 8010540:	bf00      	nop
 8010542:	bf00      	nop
 8010544:	e7fd      	b.n	8010542 <pvPortMalloc+0x176>
	return pvReturn;
 8010546:	69fb      	ldr	r3, [r7, #28]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3728      	adds	r7, #40	@ 0x28
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	20005450 	.word	0x20005450
 8010554:	20005464 	.word	0x20005464
 8010558:	20005454 	.word	0x20005454
 801055c:	20005448 	.word	0x20005448
 8010560:	20005458 	.word	0x20005458
 8010564:	2000545c 	.word	0x2000545c

08010568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b086      	sub	sp, #24
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d04f      	beq.n	801061a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801057a:	2308      	movs	r3, #8
 801057c:	425b      	negs	r3, r3
 801057e:	697a      	ldr	r2, [r7, #20]
 8010580:	4413      	add	r3, r2
 8010582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	685a      	ldr	r2, [r3, #4]
 801058c:	4b25      	ldr	r3, [pc, #148]	@ (8010624 <vPortFree+0xbc>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	4013      	ands	r3, r2
 8010592:	2b00      	cmp	r3, #0
 8010594:	d10b      	bne.n	80105ae <vPortFree+0x46>
	__asm volatile
 8010596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801059a:	f383 8811 	msr	BASEPRI, r3
 801059e:	f3bf 8f6f 	isb	sy
 80105a2:	f3bf 8f4f 	dsb	sy
 80105a6:	60fb      	str	r3, [r7, #12]
}
 80105a8:	bf00      	nop
 80105aa:	bf00      	nop
 80105ac:	e7fd      	b.n	80105aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00b      	beq.n	80105ce <vPortFree+0x66>
	__asm volatile
 80105b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105ba:	f383 8811 	msr	BASEPRI, r3
 80105be:	f3bf 8f6f 	isb	sy
 80105c2:	f3bf 8f4f 	dsb	sy
 80105c6:	60bb      	str	r3, [r7, #8]
}
 80105c8:	bf00      	nop
 80105ca:	bf00      	nop
 80105cc:	e7fd      	b.n	80105ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	685a      	ldr	r2, [r3, #4]
 80105d2:	4b14      	ldr	r3, [pc, #80]	@ (8010624 <vPortFree+0xbc>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	4013      	ands	r3, r2
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d01e      	beq.n	801061a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d11a      	bne.n	801061a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	685a      	ldr	r2, [r3, #4]
 80105e8:	4b0e      	ldr	r3, [pc, #56]	@ (8010624 <vPortFree+0xbc>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	43db      	mvns	r3, r3
 80105ee:	401a      	ands	r2, r3
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80105f4:	f7fe fc66 	bl	800eec4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	685a      	ldr	r2, [r3, #4]
 80105fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010628 <vPortFree+0xc0>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	4413      	add	r3, r2
 8010602:	4a09      	ldr	r2, [pc, #36]	@ (8010628 <vPortFree+0xc0>)
 8010604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010606:	6938      	ldr	r0, [r7, #16]
 8010608:	f000 f874 	bl	80106f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801060c:	4b07      	ldr	r3, [pc, #28]	@ (801062c <vPortFree+0xc4>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	3301      	adds	r3, #1
 8010612:	4a06      	ldr	r2, [pc, #24]	@ (801062c <vPortFree+0xc4>)
 8010614:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010616:	f7fe fc63 	bl	800eee0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801061a:	bf00      	nop
 801061c:	3718      	adds	r7, #24
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	20005464 	.word	0x20005464
 8010628:	20005454 	.word	0x20005454
 801062c:	20005460 	.word	0x20005460

08010630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010630:	b480      	push	{r7}
 8010632:	b085      	sub	sp, #20
 8010634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010636:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801063a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801063c:	4b27      	ldr	r3, [pc, #156]	@ (80106dc <prvHeapInit+0xac>)
 801063e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f003 0307 	and.w	r3, r3, #7
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00c      	beq.n	8010664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	3307      	adds	r3, #7
 801064e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f023 0307 	bic.w	r3, r3, #7
 8010656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010658:	68ba      	ldr	r2, [r7, #8]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	4a1f      	ldr	r2, [pc, #124]	@ (80106dc <prvHeapInit+0xac>)
 8010660:	4413      	add	r3, r2
 8010662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010668:	4a1d      	ldr	r2, [pc, #116]	@ (80106e0 <prvHeapInit+0xb0>)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801066e:	4b1c      	ldr	r3, [pc, #112]	@ (80106e0 <prvHeapInit+0xb0>)
 8010670:	2200      	movs	r2, #0
 8010672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	68ba      	ldr	r2, [r7, #8]
 8010678:	4413      	add	r3, r2
 801067a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801067c:	2208      	movs	r2, #8
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	1a9b      	subs	r3, r3, r2
 8010682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f023 0307 	bic.w	r3, r3, #7
 801068a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	4a15      	ldr	r2, [pc, #84]	@ (80106e4 <prvHeapInit+0xb4>)
 8010690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010692:	4b14      	ldr	r3, [pc, #80]	@ (80106e4 <prvHeapInit+0xb4>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	2200      	movs	r2, #0
 8010698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801069a:	4b12      	ldr	r3, [pc, #72]	@ (80106e4 <prvHeapInit+0xb4>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2200      	movs	r2, #0
 80106a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	68fa      	ldr	r2, [r7, #12]
 80106aa:	1ad2      	subs	r2, r2, r3
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80106b0:	4b0c      	ldr	r3, [pc, #48]	@ (80106e4 <prvHeapInit+0xb4>)
 80106b2:	681a      	ldr	r2, [r3, #0]
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	685b      	ldr	r3, [r3, #4]
 80106bc:	4a0a      	ldr	r2, [pc, #40]	@ (80106e8 <prvHeapInit+0xb8>)
 80106be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	4a09      	ldr	r2, [pc, #36]	@ (80106ec <prvHeapInit+0xbc>)
 80106c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80106c8:	4b09      	ldr	r3, [pc, #36]	@ (80106f0 <prvHeapInit+0xc0>)
 80106ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80106ce:	601a      	str	r2, [r3, #0]
}
 80106d0:	bf00      	nop
 80106d2:	3714      	adds	r7, #20
 80106d4:	46bd      	mov	sp, r7
 80106d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106da:	4770      	bx	lr
 80106dc:	20001848 	.word	0x20001848
 80106e0:	20005448 	.word	0x20005448
 80106e4:	20005450 	.word	0x20005450
 80106e8:	20005458 	.word	0x20005458
 80106ec:	20005454 	.word	0x20005454
 80106f0:	20005464 	.word	0x20005464

080106f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80106fc:	4b28      	ldr	r3, [pc, #160]	@ (80107a0 <prvInsertBlockIntoFreeList+0xac>)
 80106fe:	60fb      	str	r3, [r7, #12]
 8010700:	e002      	b.n	8010708 <prvInsertBlockIntoFreeList+0x14>
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	60fb      	str	r3, [r7, #12]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	429a      	cmp	r2, r3
 8010710:	d8f7      	bhi.n	8010702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	68ba      	ldr	r2, [r7, #8]
 801071c:	4413      	add	r3, r2
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	429a      	cmp	r2, r3
 8010722:	d108      	bne.n	8010736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	685a      	ldr	r2, [r3, #4]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	441a      	add	r2, r3
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	68ba      	ldr	r2, [r7, #8]
 8010740:	441a      	add	r2, r3
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	429a      	cmp	r2, r3
 8010748:	d118      	bne.n	801077c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681a      	ldr	r2, [r3, #0]
 801074e:	4b15      	ldr	r3, [pc, #84]	@ (80107a4 <prvInsertBlockIntoFreeList+0xb0>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	429a      	cmp	r2, r3
 8010754:	d00d      	beq.n	8010772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	685a      	ldr	r2, [r3, #4]
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	441a      	add	r2, r3
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	681a      	ldr	r2, [r3, #0]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	601a      	str	r2, [r3, #0]
 8010770:	e008      	b.n	8010784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010772:	4b0c      	ldr	r3, [pc, #48]	@ (80107a4 <prvInsertBlockIntoFreeList+0xb0>)
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	601a      	str	r2, [r3, #0]
 801077a:	e003      	b.n	8010784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010784:	68fa      	ldr	r2, [r7, #12]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	429a      	cmp	r2, r3
 801078a:	d002      	beq.n	8010792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010792:	bf00      	nop
 8010794:	3714      	adds	r7, #20
 8010796:	46bd      	mov	sp, r7
 8010798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079c:	4770      	bx	lr
 801079e:	bf00      	nop
 80107a0:	20005448 	.word	0x20005448
 80107a4:	20005450 	.word	0x20005450

080107a8 <__cvt>:
 80107a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107ac:	ec57 6b10 	vmov	r6, r7, d0
 80107b0:	2f00      	cmp	r7, #0
 80107b2:	460c      	mov	r4, r1
 80107b4:	4619      	mov	r1, r3
 80107b6:	463b      	mov	r3, r7
 80107b8:	bfbb      	ittet	lt
 80107ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80107be:	461f      	movlt	r7, r3
 80107c0:	2300      	movge	r3, #0
 80107c2:	232d      	movlt	r3, #45	@ 0x2d
 80107c4:	700b      	strb	r3, [r1, #0]
 80107c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80107c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80107cc:	4691      	mov	r9, r2
 80107ce:	f023 0820 	bic.w	r8, r3, #32
 80107d2:	bfbc      	itt	lt
 80107d4:	4632      	movlt	r2, r6
 80107d6:	4616      	movlt	r6, r2
 80107d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80107dc:	d005      	beq.n	80107ea <__cvt+0x42>
 80107de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80107e2:	d100      	bne.n	80107e6 <__cvt+0x3e>
 80107e4:	3401      	adds	r4, #1
 80107e6:	2102      	movs	r1, #2
 80107e8:	e000      	b.n	80107ec <__cvt+0x44>
 80107ea:	2103      	movs	r1, #3
 80107ec:	ab03      	add	r3, sp, #12
 80107ee:	9301      	str	r3, [sp, #4]
 80107f0:	ab02      	add	r3, sp, #8
 80107f2:	9300      	str	r3, [sp, #0]
 80107f4:	ec47 6b10 	vmov	d0, r6, r7
 80107f8:	4653      	mov	r3, sl
 80107fa:	4622      	mov	r2, r4
 80107fc:	f001 f8e8 	bl	80119d0 <_dtoa_r>
 8010800:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010804:	4605      	mov	r5, r0
 8010806:	d119      	bne.n	801083c <__cvt+0x94>
 8010808:	f019 0f01 	tst.w	r9, #1
 801080c:	d00e      	beq.n	801082c <__cvt+0x84>
 801080e:	eb00 0904 	add.w	r9, r0, r4
 8010812:	2200      	movs	r2, #0
 8010814:	2300      	movs	r3, #0
 8010816:	4630      	mov	r0, r6
 8010818:	4639      	mov	r1, r7
 801081a:	f7f0 f95d 	bl	8000ad8 <__aeabi_dcmpeq>
 801081e:	b108      	cbz	r0, 8010824 <__cvt+0x7c>
 8010820:	f8cd 900c 	str.w	r9, [sp, #12]
 8010824:	2230      	movs	r2, #48	@ 0x30
 8010826:	9b03      	ldr	r3, [sp, #12]
 8010828:	454b      	cmp	r3, r9
 801082a:	d31e      	bcc.n	801086a <__cvt+0xc2>
 801082c:	9b03      	ldr	r3, [sp, #12]
 801082e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010830:	1b5b      	subs	r3, r3, r5
 8010832:	4628      	mov	r0, r5
 8010834:	6013      	str	r3, [r2, #0]
 8010836:	b004      	add	sp, #16
 8010838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801083c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010840:	eb00 0904 	add.w	r9, r0, r4
 8010844:	d1e5      	bne.n	8010812 <__cvt+0x6a>
 8010846:	7803      	ldrb	r3, [r0, #0]
 8010848:	2b30      	cmp	r3, #48	@ 0x30
 801084a:	d10a      	bne.n	8010862 <__cvt+0xba>
 801084c:	2200      	movs	r2, #0
 801084e:	2300      	movs	r3, #0
 8010850:	4630      	mov	r0, r6
 8010852:	4639      	mov	r1, r7
 8010854:	f7f0 f940 	bl	8000ad8 <__aeabi_dcmpeq>
 8010858:	b918      	cbnz	r0, 8010862 <__cvt+0xba>
 801085a:	f1c4 0401 	rsb	r4, r4, #1
 801085e:	f8ca 4000 	str.w	r4, [sl]
 8010862:	f8da 3000 	ldr.w	r3, [sl]
 8010866:	4499      	add	r9, r3
 8010868:	e7d3      	b.n	8010812 <__cvt+0x6a>
 801086a:	1c59      	adds	r1, r3, #1
 801086c:	9103      	str	r1, [sp, #12]
 801086e:	701a      	strb	r2, [r3, #0]
 8010870:	e7d9      	b.n	8010826 <__cvt+0x7e>

08010872 <__exponent>:
 8010872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010874:	2900      	cmp	r1, #0
 8010876:	bfba      	itte	lt
 8010878:	4249      	neglt	r1, r1
 801087a:	232d      	movlt	r3, #45	@ 0x2d
 801087c:	232b      	movge	r3, #43	@ 0x2b
 801087e:	2909      	cmp	r1, #9
 8010880:	7002      	strb	r2, [r0, #0]
 8010882:	7043      	strb	r3, [r0, #1]
 8010884:	dd29      	ble.n	80108da <__exponent+0x68>
 8010886:	f10d 0307 	add.w	r3, sp, #7
 801088a:	461d      	mov	r5, r3
 801088c:	270a      	movs	r7, #10
 801088e:	461a      	mov	r2, r3
 8010890:	fbb1 f6f7 	udiv	r6, r1, r7
 8010894:	fb07 1416 	mls	r4, r7, r6, r1
 8010898:	3430      	adds	r4, #48	@ 0x30
 801089a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801089e:	460c      	mov	r4, r1
 80108a0:	2c63      	cmp	r4, #99	@ 0x63
 80108a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80108a6:	4631      	mov	r1, r6
 80108a8:	dcf1      	bgt.n	801088e <__exponent+0x1c>
 80108aa:	3130      	adds	r1, #48	@ 0x30
 80108ac:	1e94      	subs	r4, r2, #2
 80108ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80108b2:	1c41      	adds	r1, r0, #1
 80108b4:	4623      	mov	r3, r4
 80108b6:	42ab      	cmp	r3, r5
 80108b8:	d30a      	bcc.n	80108d0 <__exponent+0x5e>
 80108ba:	f10d 0309 	add.w	r3, sp, #9
 80108be:	1a9b      	subs	r3, r3, r2
 80108c0:	42ac      	cmp	r4, r5
 80108c2:	bf88      	it	hi
 80108c4:	2300      	movhi	r3, #0
 80108c6:	3302      	adds	r3, #2
 80108c8:	4403      	add	r3, r0
 80108ca:	1a18      	subs	r0, r3, r0
 80108cc:	b003      	add	sp, #12
 80108ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80108d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80108d8:	e7ed      	b.n	80108b6 <__exponent+0x44>
 80108da:	2330      	movs	r3, #48	@ 0x30
 80108dc:	3130      	adds	r1, #48	@ 0x30
 80108de:	7083      	strb	r3, [r0, #2]
 80108e0:	70c1      	strb	r1, [r0, #3]
 80108e2:	1d03      	adds	r3, r0, #4
 80108e4:	e7f1      	b.n	80108ca <__exponent+0x58>
	...

080108e8 <_printf_float>:
 80108e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ec:	b08d      	sub	sp, #52	@ 0x34
 80108ee:	460c      	mov	r4, r1
 80108f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80108f4:	4616      	mov	r6, r2
 80108f6:	461f      	mov	r7, r3
 80108f8:	4605      	mov	r5, r0
 80108fa:	f000 feff 	bl	80116fc <_localeconv_r>
 80108fe:	6803      	ldr	r3, [r0, #0]
 8010900:	9304      	str	r3, [sp, #16]
 8010902:	4618      	mov	r0, r3
 8010904:	f7ef fcbc 	bl	8000280 <strlen>
 8010908:	2300      	movs	r3, #0
 801090a:	930a      	str	r3, [sp, #40]	@ 0x28
 801090c:	f8d8 3000 	ldr.w	r3, [r8]
 8010910:	9005      	str	r0, [sp, #20]
 8010912:	3307      	adds	r3, #7
 8010914:	f023 0307 	bic.w	r3, r3, #7
 8010918:	f103 0208 	add.w	r2, r3, #8
 801091c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010920:	f8d4 b000 	ldr.w	fp, [r4]
 8010924:	f8c8 2000 	str.w	r2, [r8]
 8010928:	e9d3 8900 	ldrd	r8, r9, [r3]
 801092c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010930:	9307      	str	r3, [sp, #28]
 8010932:	f8cd 8018 	str.w	r8, [sp, #24]
 8010936:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801093a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801093e:	4b9c      	ldr	r3, [pc, #624]	@ (8010bb0 <_printf_float+0x2c8>)
 8010940:	f04f 32ff 	mov.w	r2, #4294967295
 8010944:	f7f0 f8fa 	bl	8000b3c <__aeabi_dcmpun>
 8010948:	bb70      	cbnz	r0, 80109a8 <_printf_float+0xc0>
 801094a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801094e:	4b98      	ldr	r3, [pc, #608]	@ (8010bb0 <_printf_float+0x2c8>)
 8010950:	f04f 32ff 	mov.w	r2, #4294967295
 8010954:	f7f0 f8d4 	bl	8000b00 <__aeabi_dcmple>
 8010958:	bb30      	cbnz	r0, 80109a8 <_printf_float+0xc0>
 801095a:	2200      	movs	r2, #0
 801095c:	2300      	movs	r3, #0
 801095e:	4640      	mov	r0, r8
 8010960:	4649      	mov	r1, r9
 8010962:	f7f0 f8c3 	bl	8000aec <__aeabi_dcmplt>
 8010966:	b110      	cbz	r0, 801096e <_printf_float+0x86>
 8010968:	232d      	movs	r3, #45	@ 0x2d
 801096a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801096e:	4a91      	ldr	r2, [pc, #580]	@ (8010bb4 <_printf_float+0x2cc>)
 8010970:	4b91      	ldr	r3, [pc, #580]	@ (8010bb8 <_printf_float+0x2d0>)
 8010972:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010976:	bf94      	ite	ls
 8010978:	4690      	movls	r8, r2
 801097a:	4698      	movhi	r8, r3
 801097c:	2303      	movs	r3, #3
 801097e:	6123      	str	r3, [r4, #16]
 8010980:	f02b 0304 	bic.w	r3, fp, #4
 8010984:	6023      	str	r3, [r4, #0]
 8010986:	f04f 0900 	mov.w	r9, #0
 801098a:	9700      	str	r7, [sp, #0]
 801098c:	4633      	mov	r3, r6
 801098e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010990:	4621      	mov	r1, r4
 8010992:	4628      	mov	r0, r5
 8010994:	f000 f9d2 	bl	8010d3c <_printf_common>
 8010998:	3001      	adds	r0, #1
 801099a:	f040 808d 	bne.w	8010ab8 <_printf_float+0x1d0>
 801099e:	f04f 30ff 	mov.w	r0, #4294967295
 80109a2:	b00d      	add	sp, #52	@ 0x34
 80109a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a8:	4642      	mov	r2, r8
 80109aa:	464b      	mov	r3, r9
 80109ac:	4640      	mov	r0, r8
 80109ae:	4649      	mov	r1, r9
 80109b0:	f7f0 f8c4 	bl	8000b3c <__aeabi_dcmpun>
 80109b4:	b140      	cbz	r0, 80109c8 <_printf_float+0xe0>
 80109b6:	464b      	mov	r3, r9
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	bfbc      	itt	lt
 80109bc:	232d      	movlt	r3, #45	@ 0x2d
 80109be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80109c2:	4a7e      	ldr	r2, [pc, #504]	@ (8010bbc <_printf_float+0x2d4>)
 80109c4:	4b7e      	ldr	r3, [pc, #504]	@ (8010bc0 <_printf_float+0x2d8>)
 80109c6:	e7d4      	b.n	8010972 <_printf_float+0x8a>
 80109c8:	6863      	ldr	r3, [r4, #4]
 80109ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80109ce:	9206      	str	r2, [sp, #24]
 80109d0:	1c5a      	adds	r2, r3, #1
 80109d2:	d13b      	bne.n	8010a4c <_printf_float+0x164>
 80109d4:	2306      	movs	r3, #6
 80109d6:	6063      	str	r3, [r4, #4]
 80109d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80109dc:	2300      	movs	r3, #0
 80109de:	6022      	str	r2, [r4, #0]
 80109e0:	9303      	str	r3, [sp, #12]
 80109e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80109e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80109e8:	ab09      	add	r3, sp, #36	@ 0x24
 80109ea:	9300      	str	r3, [sp, #0]
 80109ec:	6861      	ldr	r1, [r4, #4]
 80109ee:	ec49 8b10 	vmov	d0, r8, r9
 80109f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80109f6:	4628      	mov	r0, r5
 80109f8:	f7ff fed6 	bl	80107a8 <__cvt>
 80109fc:	9b06      	ldr	r3, [sp, #24]
 80109fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010a00:	2b47      	cmp	r3, #71	@ 0x47
 8010a02:	4680      	mov	r8, r0
 8010a04:	d129      	bne.n	8010a5a <_printf_float+0x172>
 8010a06:	1cc8      	adds	r0, r1, #3
 8010a08:	db02      	blt.n	8010a10 <_printf_float+0x128>
 8010a0a:	6863      	ldr	r3, [r4, #4]
 8010a0c:	4299      	cmp	r1, r3
 8010a0e:	dd41      	ble.n	8010a94 <_printf_float+0x1ac>
 8010a10:	f1aa 0a02 	sub.w	sl, sl, #2
 8010a14:	fa5f fa8a 	uxtb.w	sl, sl
 8010a18:	3901      	subs	r1, #1
 8010a1a:	4652      	mov	r2, sl
 8010a1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010a20:	9109      	str	r1, [sp, #36]	@ 0x24
 8010a22:	f7ff ff26 	bl	8010872 <__exponent>
 8010a26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a28:	1813      	adds	r3, r2, r0
 8010a2a:	2a01      	cmp	r2, #1
 8010a2c:	4681      	mov	r9, r0
 8010a2e:	6123      	str	r3, [r4, #16]
 8010a30:	dc02      	bgt.n	8010a38 <_printf_float+0x150>
 8010a32:	6822      	ldr	r2, [r4, #0]
 8010a34:	07d2      	lsls	r2, r2, #31
 8010a36:	d501      	bpl.n	8010a3c <_printf_float+0x154>
 8010a38:	3301      	adds	r3, #1
 8010a3a:	6123      	str	r3, [r4, #16]
 8010a3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d0a2      	beq.n	801098a <_printf_float+0xa2>
 8010a44:	232d      	movs	r3, #45	@ 0x2d
 8010a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a4a:	e79e      	b.n	801098a <_printf_float+0xa2>
 8010a4c:	9a06      	ldr	r2, [sp, #24]
 8010a4e:	2a47      	cmp	r2, #71	@ 0x47
 8010a50:	d1c2      	bne.n	80109d8 <_printf_float+0xf0>
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d1c0      	bne.n	80109d8 <_printf_float+0xf0>
 8010a56:	2301      	movs	r3, #1
 8010a58:	e7bd      	b.n	80109d6 <_printf_float+0xee>
 8010a5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010a5e:	d9db      	bls.n	8010a18 <_printf_float+0x130>
 8010a60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010a64:	d118      	bne.n	8010a98 <_printf_float+0x1b0>
 8010a66:	2900      	cmp	r1, #0
 8010a68:	6863      	ldr	r3, [r4, #4]
 8010a6a:	dd0b      	ble.n	8010a84 <_printf_float+0x19c>
 8010a6c:	6121      	str	r1, [r4, #16]
 8010a6e:	b913      	cbnz	r3, 8010a76 <_printf_float+0x18e>
 8010a70:	6822      	ldr	r2, [r4, #0]
 8010a72:	07d0      	lsls	r0, r2, #31
 8010a74:	d502      	bpl.n	8010a7c <_printf_float+0x194>
 8010a76:	3301      	adds	r3, #1
 8010a78:	440b      	add	r3, r1
 8010a7a:	6123      	str	r3, [r4, #16]
 8010a7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010a7e:	f04f 0900 	mov.w	r9, #0
 8010a82:	e7db      	b.n	8010a3c <_printf_float+0x154>
 8010a84:	b913      	cbnz	r3, 8010a8c <_printf_float+0x1a4>
 8010a86:	6822      	ldr	r2, [r4, #0]
 8010a88:	07d2      	lsls	r2, r2, #31
 8010a8a:	d501      	bpl.n	8010a90 <_printf_float+0x1a8>
 8010a8c:	3302      	adds	r3, #2
 8010a8e:	e7f4      	b.n	8010a7a <_printf_float+0x192>
 8010a90:	2301      	movs	r3, #1
 8010a92:	e7f2      	b.n	8010a7a <_printf_float+0x192>
 8010a94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010a98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a9a:	4299      	cmp	r1, r3
 8010a9c:	db05      	blt.n	8010aaa <_printf_float+0x1c2>
 8010a9e:	6823      	ldr	r3, [r4, #0]
 8010aa0:	6121      	str	r1, [r4, #16]
 8010aa2:	07d8      	lsls	r0, r3, #31
 8010aa4:	d5ea      	bpl.n	8010a7c <_printf_float+0x194>
 8010aa6:	1c4b      	adds	r3, r1, #1
 8010aa8:	e7e7      	b.n	8010a7a <_printf_float+0x192>
 8010aaa:	2900      	cmp	r1, #0
 8010aac:	bfd4      	ite	le
 8010aae:	f1c1 0202 	rsble	r2, r1, #2
 8010ab2:	2201      	movgt	r2, #1
 8010ab4:	4413      	add	r3, r2
 8010ab6:	e7e0      	b.n	8010a7a <_printf_float+0x192>
 8010ab8:	6823      	ldr	r3, [r4, #0]
 8010aba:	055a      	lsls	r2, r3, #21
 8010abc:	d407      	bmi.n	8010ace <_printf_float+0x1e6>
 8010abe:	6923      	ldr	r3, [r4, #16]
 8010ac0:	4642      	mov	r2, r8
 8010ac2:	4631      	mov	r1, r6
 8010ac4:	4628      	mov	r0, r5
 8010ac6:	47b8      	blx	r7
 8010ac8:	3001      	adds	r0, #1
 8010aca:	d12b      	bne.n	8010b24 <_printf_float+0x23c>
 8010acc:	e767      	b.n	801099e <_printf_float+0xb6>
 8010ace:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010ad2:	f240 80dd 	bls.w	8010c90 <_printf_float+0x3a8>
 8010ad6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010ada:	2200      	movs	r2, #0
 8010adc:	2300      	movs	r3, #0
 8010ade:	f7ef fffb 	bl	8000ad8 <__aeabi_dcmpeq>
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	d033      	beq.n	8010b4e <_printf_float+0x266>
 8010ae6:	4a37      	ldr	r2, [pc, #220]	@ (8010bc4 <_printf_float+0x2dc>)
 8010ae8:	2301      	movs	r3, #1
 8010aea:	4631      	mov	r1, r6
 8010aec:	4628      	mov	r0, r5
 8010aee:	47b8      	blx	r7
 8010af0:	3001      	adds	r0, #1
 8010af2:	f43f af54 	beq.w	801099e <_printf_float+0xb6>
 8010af6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010afa:	4543      	cmp	r3, r8
 8010afc:	db02      	blt.n	8010b04 <_printf_float+0x21c>
 8010afe:	6823      	ldr	r3, [r4, #0]
 8010b00:	07d8      	lsls	r0, r3, #31
 8010b02:	d50f      	bpl.n	8010b24 <_printf_float+0x23c>
 8010b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b08:	4631      	mov	r1, r6
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	47b8      	blx	r7
 8010b0e:	3001      	adds	r0, #1
 8010b10:	f43f af45 	beq.w	801099e <_printf_float+0xb6>
 8010b14:	f04f 0900 	mov.w	r9, #0
 8010b18:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b1c:	f104 0a1a 	add.w	sl, r4, #26
 8010b20:	45c8      	cmp	r8, r9
 8010b22:	dc09      	bgt.n	8010b38 <_printf_float+0x250>
 8010b24:	6823      	ldr	r3, [r4, #0]
 8010b26:	079b      	lsls	r3, r3, #30
 8010b28:	f100 8103 	bmi.w	8010d32 <_printf_float+0x44a>
 8010b2c:	68e0      	ldr	r0, [r4, #12]
 8010b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b30:	4298      	cmp	r0, r3
 8010b32:	bfb8      	it	lt
 8010b34:	4618      	movlt	r0, r3
 8010b36:	e734      	b.n	80109a2 <_printf_float+0xba>
 8010b38:	2301      	movs	r3, #1
 8010b3a:	4652      	mov	r2, sl
 8010b3c:	4631      	mov	r1, r6
 8010b3e:	4628      	mov	r0, r5
 8010b40:	47b8      	blx	r7
 8010b42:	3001      	adds	r0, #1
 8010b44:	f43f af2b 	beq.w	801099e <_printf_float+0xb6>
 8010b48:	f109 0901 	add.w	r9, r9, #1
 8010b4c:	e7e8      	b.n	8010b20 <_printf_float+0x238>
 8010b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	dc39      	bgt.n	8010bc8 <_printf_float+0x2e0>
 8010b54:	4a1b      	ldr	r2, [pc, #108]	@ (8010bc4 <_printf_float+0x2dc>)
 8010b56:	2301      	movs	r3, #1
 8010b58:	4631      	mov	r1, r6
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	47b8      	blx	r7
 8010b5e:	3001      	adds	r0, #1
 8010b60:	f43f af1d 	beq.w	801099e <_printf_float+0xb6>
 8010b64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010b68:	ea59 0303 	orrs.w	r3, r9, r3
 8010b6c:	d102      	bne.n	8010b74 <_printf_float+0x28c>
 8010b6e:	6823      	ldr	r3, [r4, #0]
 8010b70:	07d9      	lsls	r1, r3, #31
 8010b72:	d5d7      	bpl.n	8010b24 <_printf_float+0x23c>
 8010b74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b78:	4631      	mov	r1, r6
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	47b8      	blx	r7
 8010b7e:	3001      	adds	r0, #1
 8010b80:	f43f af0d 	beq.w	801099e <_printf_float+0xb6>
 8010b84:	f04f 0a00 	mov.w	sl, #0
 8010b88:	f104 0b1a 	add.w	fp, r4, #26
 8010b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b8e:	425b      	negs	r3, r3
 8010b90:	4553      	cmp	r3, sl
 8010b92:	dc01      	bgt.n	8010b98 <_printf_float+0x2b0>
 8010b94:	464b      	mov	r3, r9
 8010b96:	e793      	b.n	8010ac0 <_printf_float+0x1d8>
 8010b98:	2301      	movs	r3, #1
 8010b9a:	465a      	mov	r2, fp
 8010b9c:	4631      	mov	r1, r6
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	47b8      	blx	r7
 8010ba2:	3001      	adds	r0, #1
 8010ba4:	f43f aefb 	beq.w	801099e <_printf_float+0xb6>
 8010ba8:	f10a 0a01 	add.w	sl, sl, #1
 8010bac:	e7ee      	b.n	8010b8c <_printf_float+0x2a4>
 8010bae:	bf00      	nop
 8010bb0:	7fefffff 	.word	0x7fefffff
 8010bb4:	08016ff8 	.word	0x08016ff8
 8010bb8:	08016ffc 	.word	0x08016ffc
 8010bbc:	08017000 	.word	0x08017000
 8010bc0:	08017004 	.word	0x08017004
 8010bc4:	08017008 	.word	0x08017008
 8010bc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010bca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010bce:	4553      	cmp	r3, sl
 8010bd0:	bfa8      	it	ge
 8010bd2:	4653      	movge	r3, sl
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	4699      	mov	r9, r3
 8010bd8:	dc36      	bgt.n	8010c48 <_printf_float+0x360>
 8010bda:	f04f 0b00 	mov.w	fp, #0
 8010bde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010be2:	f104 021a 	add.w	r2, r4, #26
 8010be6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010be8:	9306      	str	r3, [sp, #24]
 8010bea:	eba3 0309 	sub.w	r3, r3, r9
 8010bee:	455b      	cmp	r3, fp
 8010bf0:	dc31      	bgt.n	8010c56 <_printf_float+0x36e>
 8010bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bf4:	459a      	cmp	sl, r3
 8010bf6:	dc3a      	bgt.n	8010c6e <_printf_float+0x386>
 8010bf8:	6823      	ldr	r3, [r4, #0]
 8010bfa:	07da      	lsls	r2, r3, #31
 8010bfc:	d437      	bmi.n	8010c6e <_printf_float+0x386>
 8010bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c00:	ebaa 0903 	sub.w	r9, sl, r3
 8010c04:	9b06      	ldr	r3, [sp, #24]
 8010c06:	ebaa 0303 	sub.w	r3, sl, r3
 8010c0a:	4599      	cmp	r9, r3
 8010c0c:	bfa8      	it	ge
 8010c0e:	4699      	movge	r9, r3
 8010c10:	f1b9 0f00 	cmp.w	r9, #0
 8010c14:	dc33      	bgt.n	8010c7e <_printf_float+0x396>
 8010c16:	f04f 0800 	mov.w	r8, #0
 8010c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c1e:	f104 0b1a 	add.w	fp, r4, #26
 8010c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c24:	ebaa 0303 	sub.w	r3, sl, r3
 8010c28:	eba3 0309 	sub.w	r3, r3, r9
 8010c2c:	4543      	cmp	r3, r8
 8010c2e:	f77f af79 	ble.w	8010b24 <_printf_float+0x23c>
 8010c32:	2301      	movs	r3, #1
 8010c34:	465a      	mov	r2, fp
 8010c36:	4631      	mov	r1, r6
 8010c38:	4628      	mov	r0, r5
 8010c3a:	47b8      	blx	r7
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	f43f aeae 	beq.w	801099e <_printf_float+0xb6>
 8010c42:	f108 0801 	add.w	r8, r8, #1
 8010c46:	e7ec      	b.n	8010c22 <_printf_float+0x33a>
 8010c48:	4642      	mov	r2, r8
 8010c4a:	4631      	mov	r1, r6
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	47b8      	blx	r7
 8010c50:	3001      	adds	r0, #1
 8010c52:	d1c2      	bne.n	8010bda <_printf_float+0x2f2>
 8010c54:	e6a3      	b.n	801099e <_printf_float+0xb6>
 8010c56:	2301      	movs	r3, #1
 8010c58:	4631      	mov	r1, r6
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	9206      	str	r2, [sp, #24]
 8010c5e:	47b8      	blx	r7
 8010c60:	3001      	adds	r0, #1
 8010c62:	f43f ae9c 	beq.w	801099e <_printf_float+0xb6>
 8010c66:	9a06      	ldr	r2, [sp, #24]
 8010c68:	f10b 0b01 	add.w	fp, fp, #1
 8010c6c:	e7bb      	b.n	8010be6 <_printf_float+0x2fe>
 8010c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c72:	4631      	mov	r1, r6
 8010c74:	4628      	mov	r0, r5
 8010c76:	47b8      	blx	r7
 8010c78:	3001      	adds	r0, #1
 8010c7a:	d1c0      	bne.n	8010bfe <_printf_float+0x316>
 8010c7c:	e68f      	b.n	801099e <_printf_float+0xb6>
 8010c7e:	9a06      	ldr	r2, [sp, #24]
 8010c80:	464b      	mov	r3, r9
 8010c82:	4442      	add	r2, r8
 8010c84:	4631      	mov	r1, r6
 8010c86:	4628      	mov	r0, r5
 8010c88:	47b8      	blx	r7
 8010c8a:	3001      	adds	r0, #1
 8010c8c:	d1c3      	bne.n	8010c16 <_printf_float+0x32e>
 8010c8e:	e686      	b.n	801099e <_printf_float+0xb6>
 8010c90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010c94:	f1ba 0f01 	cmp.w	sl, #1
 8010c98:	dc01      	bgt.n	8010c9e <_printf_float+0x3b6>
 8010c9a:	07db      	lsls	r3, r3, #31
 8010c9c:	d536      	bpl.n	8010d0c <_printf_float+0x424>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	4642      	mov	r2, r8
 8010ca2:	4631      	mov	r1, r6
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	47b8      	blx	r7
 8010ca8:	3001      	adds	r0, #1
 8010caa:	f43f ae78 	beq.w	801099e <_printf_float+0xb6>
 8010cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cb2:	4631      	mov	r1, r6
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	47b8      	blx	r7
 8010cb8:	3001      	adds	r0, #1
 8010cba:	f43f ae70 	beq.w	801099e <_printf_float+0xb6>
 8010cbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010cca:	f7ef ff05 	bl	8000ad8 <__aeabi_dcmpeq>
 8010cce:	b9c0      	cbnz	r0, 8010d02 <_printf_float+0x41a>
 8010cd0:	4653      	mov	r3, sl
 8010cd2:	f108 0201 	add.w	r2, r8, #1
 8010cd6:	4631      	mov	r1, r6
 8010cd8:	4628      	mov	r0, r5
 8010cda:	47b8      	blx	r7
 8010cdc:	3001      	adds	r0, #1
 8010cde:	d10c      	bne.n	8010cfa <_printf_float+0x412>
 8010ce0:	e65d      	b.n	801099e <_printf_float+0xb6>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	465a      	mov	r2, fp
 8010ce6:	4631      	mov	r1, r6
 8010ce8:	4628      	mov	r0, r5
 8010cea:	47b8      	blx	r7
 8010cec:	3001      	adds	r0, #1
 8010cee:	f43f ae56 	beq.w	801099e <_printf_float+0xb6>
 8010cf2:	f108 0801 	add.w	r8, r8, #1
 8010cf6:	45d0      	cmp	r8, sl
 8010cf8:	dbf3      	blt.n	8010ce2 <_printf_float+0x3fa>
 8010cfa:	464b      	mov	r3, r9
 8010cfc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010d00:	e6df      	b.n	8010ac2 <_printf_float+0x1da>
 8010d02:	f04f 0800 	mov.w	r8, #0
 8010d06:	f104 0b1a 	add.w	fp, r4, #26
 8010d0a:	e7f4      	b.n	8010cf6 <_printf_float+0x40e>
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	4642      	mov	r2, r8
 8010d10:	e7e1      	b.n	8010cd6 <_printf_float+0x3ee>
 8010d12:	2301      	movs	r3, #1
 8010d14:	464a      	mov	r2, r9
 8010d16:	4631      	mov	r1, r6
 8010d18:	4628      	mov	r0, r5
 8010d1a:	47b8      	blx	r7
 8010d1c:	3001      	adds	r0, #1
 8010d1e:	f43f ae3e 	beq.w	801099e <_printf_float+0xb6>
 8010d22:	f108 0801 	add.w	r8, r8, #1
 8010d26:	68e3      	ldr	r3, [r4, #12]
 8010d28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010d2a:	1a5b      	subs	r3, r3, r1
 8010d2c:	4543      	cmp	r3, r8
 8010d2e:	dcf0      	bgt.n	8010d12 <_printf_float+0x42a>
 8010d30:	e6fc      	b.n	8010b2c <_printf_float+0x244>
 8010d32:	f04f 0800 	mov.w	r8, #0
 8010d36:	f104 0919 	add.w	r9, r4, #25
 8010d3a:	e7f4      	b.n	8010d26 <_printf_float+0x43e>

08010d3c <_printf_common>:
 8010d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d40:	4616      	mov	r6, r2
 8010d42:	4698      	mov	r8, r3
 8010d44:	688a      	ldr	r2, [r1, #8]
 8010d46:	690b      	ldr	r3, [r1, #16]
 8010d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	bfb8      	it	lt
 8010d50:	4613      	movlt	r3, r2
 8010d52:	6033      	str	r3, [r6, #0]
 8010d54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010d58:	4607      	mov	r7, r0
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	b10a      	cbz	r2, 8010d62 <_printf_common+0x26>
 8010d5e:	3301      	adds	r3, #1
 8010d60:	6033      	str	r3, [r6, #0]
 8010d62:	6823      	ldr	r3, [r4, #0]
 8010d64:	0699      	lsls	r1, r3, #26
 8010d66:	bf42      	ittt	mi
 8010d68:	6833      	ldrmi	r3, [r6, #0]
 8010d6a:	3302      	addmi	r3, #2
 8010d6c:	6033      	strmi	r3, [r6, #0]
 8010d6e:	6825      	ldr	r5, [r4, #0]
 8010d70:	f015 0506 	ands.w	r5, r5, #6
 8010d74:	d106      	bne.n	8010d84 <_printf_common+0x48>
 8010d76:	f104 0a19 	add.w	sl, r4, #25
 8010d7a:	68e3      	ldr	r3, [r4, #12]
 8010d7c:	6832      	ldr	r2, [r6, #0]
 8010d7e:	1a9b      	subs	r3, r3, r2
 8010d80:	42ab      	cmp	r3, r5
 8010d82:	dc26      	bgt.n	8010dd2 <_printf_common+0x96>
 8010d84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010d88:	6822      	ldr	r2, [r4, #0]
 8010d8a:	3b00      	subs	r3, #0
 8010d8c:	bf18      	it	ne
 8010d8e:	2301      	movne	r3, #1
 8010d90:	0692      	lsls	r2, r2, #26
 8010d92:	d42b      	bmi.n	8010dec <_printf_common+0xb0>
 8010d94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010d98:	4641      	mov	r1, r8
 8010d9a:	4638      	mov	r0, r7
 8010d9c:	47c8      	blx	r9
 8010d9e:	3001      	adds	r0, #1
 8010da0:	d01e      	beq.n	8010de0 <_printf_common+0xa4>
 8010da2:	6823      	ldr	r3, [r4, #0]
 8010da4:	6922      	ldr	r2, [r4, #16]
 8010da6:	f003 0306 	and.w	r3, r3, #6
 8010daa:	2b04      	cmp	r3, #4
 8010dac:	bf02      	ittt	eq
 8010dae:	68e5      	ldreq	r5, [r4, #12]
 8010db0:	6833      	ldreq	r3, [r6, #0]
 8010db2:	1aed      	subeq	r5, r5, r3
 8010db4:	68a3      	ldr	r3, [r4, #8]
 8010db6:	bf0c      	ite	eq
 8010db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010dbc:	2500      	movne	r5, #0
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	bfc4      	itt	gt
 8010dc2:	1a9b      	subgt	r3, r3, r2
 8010dc4:	18ed      	addgt	r5, r5, r3
 8010dc6:	2600      	movs	r6, #0
 8010dc8:	341a      	adds	r4, #26
 8010dca:	42b5      	cmp	r5, r6
 8010dcc:	d11a      	bne.n	8010e04 <_printf_common+0xc8>
 8010dce:	2000      	movs	r0, #0
 8010dd0:	e008      	b.n	8010de4 <_printf_common+0xa8>
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	4652      	mov	r2, sl
 8010dd6:	4641      	mov	r1, r8
 8010dd8:	4638      	mov	r0, r7
 8010dda:	47c8      	blx	r9
 8010ddc:	3001      	adds	r0, #1
 8010dde:	d103      	bne.n	8010de8 <_printf_common+0xac>
 8010de0:	f04f 30ff 	mov.w	r0, #4294967295
 8010de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010de8:	3501      	adds	r5, #1
 8010dea:	e7c6      	b.n	8010d7a <_printf_common+0x3e>
 8010dec:	18e1      	adds	r1, r4, r3
 8010dee:	1c5a      	adds	r2, r3, #1
 8010df0:	2030      	movs	r0, #48	@ 0x30
 8010df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010df6:	4422      	add	r2, r4
 8010df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010dfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010e00:	3302      	adds	r3, #2
 8010e02:	e7c7      	b.n	8010d94 <_printf_common+0x58>
 8010e04:	2301      	movs	r3, #1
 8010e06:	4622      	mov	r2, r4
 8010e08:	4641      	mov	r1, r8
 8010e0a:	4638      	mov	r0, r7
 8010e0c:	47c8      	blx	r9
 8010e0e:	3001      	adds	r0, #1
 8010e10:	d0e6      	beq.n	8010de0 <_printf_common+0xa4>
 8010e12:	3601      	adds	r6, #1
 8010e14:	e7d9      	b.n	8010dca <_printf_common+0x8e>
	...

08010e18 <_printf_i>:
 8010e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e1c:	7e0f      	ldrb	r7, [r1, #24]
 8010e1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010e20:	2f78      	cmp	r7, #120	@ 0x78
 8010e22:	4691      	mov	r9, r2
 8010e24:	4680      	mov	r8, r0
 8010e26:	460c      	mov	r4, r1
 8010e28:	469a      	mov	sl, r3
 8010e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010e2e:	d807      	bhi.n	8010e40 <_printf_i+0x28>
 8010e30:	2f62      	cmp	r7, #98	@ 0x62
 8010e32:	d80a      	bhi.n	8010e4a <_printf_i+0x32>
 8010e34:	2f00      	cmp	r7, #0
 8010e36:	f000 80d2 	beq.w	8010fde <_printf_i+0x1c6>
 8010e3a:	2f58      	cmp	r7, #88	@ 0x58
 8010e3c:	f000 80b9 	beq.w	8010fb2 <_printf_i+0x19a>
 8010e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010e48:	e03a      	b.n	8010ec0 <_printf_i+0xa8>
 8010e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010e4e:	2b15      	cmp	r3, #21
 8010e50:	d8f6      	bhi.n	8010e40 <_printf_i+0x28>
 8010e52:	a101      	add	r1, pc, #4	@ (adr r1, 8010e58 <_printf_i+0x40>)
 8010e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e58:	08010eb1 	.word	0x08010eb1
 8010e5c:	08010ec5 	.word	0x08010ec5
 8010e60:	08010e41 	.word	0x08010e41
 8010e64:	08010e41 	.word	0x08010e41
 8010e68:	08010e41 	.word	0x08010e41
 8010e6c:	08010e41 	.word	0x08010e41
 8010e70:	08010ec5 	.word	0x08010ec5
 8010e74:	08010e41 	.word	0x08010e41
 8010e78:	08010e41 	.word	0x08010e41
 8010e7c:	08010e41 	.word	0x08010e41
 8010e80:	08010e41 	.word	0x08010e41
 8010e84:	08010fc5 	.word	0x08010fc5
 8010e88:	08010eef 	.word	0x08010eef
 8010e8c:	08010f7f 	.word	0x08010f7f
 8010e90:	08010e41 	.word	0x08010e41
 8010e94:	08010e41 	.word	0x08010e41
 8010e98:	08010fe7 	.word	0x08010fe7
 8010e9c:	08010e41 	.word	0x08010e41
 8010ea0:	08010eef 	.word	0x08010eef
 8010ea4:	08010e41 	.word	0x08010e41
 8010ea8:	08010e41 	.word	0x08010e41
 8010eac:	08010f87 	.word	0x08010f87
 8010eb0:	6833      	ldr	r3, [r6, #0]
 8010eb2:	1d1a      	adds	r2, r3, #4
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	6032      	str	r2, [r6, #0]
 8010eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	e09d      	b.n	8011000 <_printf_i+0x1e8>
 8010ec4:	6833      	ldr	r3, [r6, #0]
 8010ec6:	6820      	ldr	r0, [r4, #0]
 8010ec8:	1d19      	adds	r1, r3, #4
 8010eca:	6031      	str	r1, [r6, #0]
 8010ecc:	0606      	lsls	r6, r0, #24
 8010ece:	d501      	bpl.n	8010ed4 <_printf_i+0xbc>
 8010ed0:	681d      	ldr	r5, [r3, #0]
 8010ed2:	e003      	b.n	8010edc <_printf_i+0xc4>
 8010ed4:	0645      	lsls	r5, r0, #25
 8010ed6:	d5fb      	bpl.n	8010ed0 <_printf_i+0xb8>
 8010ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010edc:	2d00      	cmp	r5, #0
 8010ede:	da03      	bge.n	8010ee8 <_printf_i+0xd0>
 8010ee0:	232d      	movs	r3, #45	@ 0x2d
 8010ee2:	426d      	negs	r5, r5
 8010ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ee8:	4859      	ldr	r0, [pc, #356]	@ (8011050 <_printf_i+0x238>)
 8010eea:	230a      	movs	r3, #10
 8010eec:	e011      	b.n	8010f12 <_printf_i+0xfa>
 8010eee:	6821      	ldr	r1, [r4, #0]
 8010ef0:	6833      	ldr	r3, [r6, #0]
 8010ef2:	0608      	lsls	r0, r1, #24
 8010ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ef8:	d402      	bmi.n	8010f00 <_printf_i+0xe8>
 8010efa:	0649      	lsls	r1, r1, #25
 8010efc:	bf48      	it	mi
 8010efe:	b2ad      	uxthmi	r5, r5
 8010f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8010f02:	4853      	ldr	r0, [pc, #332]	@ (8011050 <_printf_i+0x238>)
 8010f04:	6033      	str	r3, [r6, #0]
 8010f06:	bf14      	ite	ne
 8010f08:	230a      	movne	r3, #10
 8010f0a:	2308      	moveq	r3, #8
 8010f0c:	2100      	movs	r1, #0
 8010f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010f12:	6866      	ldr	r6, [r4, #4]
 8010f14:	60a6      	str	r6, [r4, #8]
 8010f16:	2e00      	cmp	r6, #0
 8010f18:	bfa2      	ittt	ge
 8010f1a:	6821      	ldrge	r1, [r4, #0]
 8010f1c:	f021 0104 	bicge.w	r1, r1, #4
 8010f20:	6021      	strge	r1, [r4, #0]
 8010f22:	b90d      	cbnz	r5, 8010f28 <_printf_i+0x110>
 8010f24:	2e00      	cmp	r6, #0
 8010f26:	d04b      	beq.n	8010fc0 <_printf_i+0x1a8>
 8010f28:	4616      	mov	r6, r2
 8010f2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8010f2e:	fb03 5711 	mls	r7, r3, r1, r5
 8010f32:	5dc7      	ldrb	r7, [r0, r7]
 8010f34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010f38:	462f      	mov	r7, r5
 8010f3a:	42bb      	cmp	r3, r7
 8010f3c:	460d      	mov	r5, r1
 8010f3e:	d9f4      	bls.n	8010f2a <_printf_i+0x112>
 8010f40:	2b08      	cmp	r3, #8
 8010f42:	d10b      	bne.n	8010f5c <_printf_i+0x144>
 8010f44:	6823      	ldr	r3, [r4, #0]
 8010f46:	07df      	lsls	r7, r3, #31
 8010f48:	d508      	bpl.n	8010f5c <_printf_i+0x144>
 8010f4a:	6923      	ldr	r3, [r4, #16]
 8010f4c:	6861      	ldr	r1, [r4, #4]
 8010f4e:	4299      	cmp	r1, r3
 8010f50:	bfde      	ittt	le
 8010f52:	2330      	movle	r3, #48	@ 0x30
 8010f54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010f58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010f5c:	1b92      	subs	r2, r2, r6
 8010f5e:	6122      	str	r2, [r4, #16]
 8010f60:	f8cd a000 	str.w	sl, [sp]
 8010f64:	464b      	mov	r3, r9
 8010f66:	aa03      	add	r2, sp, #12
 8010f68:	4621      	mov	r1, r4
 8010f6a:	4640      	mov	r0, r8
 8010f6c:	f7ff fee6 	bl	8010d3c <_printf_common>
 8010f70:	3001      	adds	r0, #1
 8010f72:	d14a      	bne.n	801100a <_printf_i+0x1f2>
 8010f74:	f04f 30ff 	mov.w	r0, #4294967295
 8010f78:	b004      	add	sp, #16
 8010f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f7e:	6823      	ldr	r3, [r4, #0]
 8010f80:	f043 0320 	orr.w	r3, r3, #32
 8010f84:	6023      	str	r3, [r4, #0]
 8010f86:	4833      	ldr	r0, [pc, #204]	@ (8011054 <_printf_i+0x23c>)
 8010f88:	2778      	movs	r7, #120	@ 0x78
 8010f8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010f8e:	6823      	ldr	r3, [r4, #0]
 8010f90:	6831      	ldr	r1, [r6, #0]
 8010f92:	061f      	lsls	r7, r3, #24
 8010f94:	f851 5b04 	ldr.w	r5, [r1], #4
 8010f98:	d402      	bmi.n	8010fa0 <_printf_i+0x188>
 8010f9a:	065f      	lsls	r7, r3, #25
 8010f9c:	bf48      	it	mi
 8010f9e:	b2ad      	uxthmi	r5, r5
 8010fa0:	6031      	str	r1, [r6, #0]
 8010fa2:	07d9      	lsls	r1, r3, #31
 8010fa4:	bf44      	itt	mi
 8010fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8010faa:	6023      	strmi	r3, [r4, #0]
 8010fac:	b11d      	cbz	r5, 8010fb6 <_printf_i+0x19e>
 8010fae:	2310      	movs	r3, #16
 8010fb0:	e7ac      	b.n	8010f0c <_printf_i+0xf4>
 8010fb2:	4827      	ldr	r0, [pc, #156]	@ (8011050 <_printf_i+0x238>)
 8010fb4:	e7e9      	b.n	8010f8a <_printf_i+0x172>
 8010fb6:	6823      	ldr	r3, [r4, #0]
 8010fb8:	f023 0320 	bic.w	r3, r3, #32
 8010fbc:	6023      	str	r3, [r4, #0]
 8010fbe:	e7f6      	b.n	8010fae <_printf_i+0x196>
 8010fc0:	4616      	mov	r6, r2
 8010fc2:	e7bd      	b.n	8010f40 <_printf_i+0x128>
 8010fc4:	6833      	ldr	r3, [r6, #0]
 8010fc6:	6825      	ldr	r5, [r4, #0]
 8010fc8:	6961      	ldr	r1, [r4, #20]
 8010fca:	1d18      	adds	r0, r3, #4
 8010fcc:	6030      	str	r0, [r6, #0]
 8010fce:	062e      	lsls	r6, r5, #24
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	d501      	bpl.n	8010fd8 <_printf_i+0x1c0>
 8010fd4:	6019      	str	r1, [r3, #0]
 8010fd6:	e002      	b.n	8010fde <_printf_i+0x1c6>
 8010fd8:	0668      	lsls	r0, r5, #25
 8010fda:	d5fb      	bpl.n	8010fd4 <_printf_i+0x1bc>
 8010fdc:	8019      	strh	r1, [r3, #0]
 8010fde:	2300      	movs	r3, #0
 8010fe0:	6123      	str	r3, [r4, #16]
 8010fe2:	4616      	mov	r6, r2
 8010fe4:	e7bc      	b.n	8010f60 <_printf_i+0x148>
 8010fe6:	6833      	ldr	r3, [r6, #0]
 8010fe8:	1d1a      	adds	r2, r3, #4
 8010fea:	6032      	str	r2, [r6, #0]
 8010fec:	681e      	ldr	r6, [r3, #0]
 8010fee:	6862      	ldr	r2, [r4, #4]
 8010ff0:	2100      	movs	r1, #0
 8010ff2:	4630      	mov	r0, r6
 8010ff4:	f7ef f8f4 	bl	80001e0 <memchr>
 8010ff8:	b108      	cbz	r0, 8010ffe <_printf_i+0x1e6>
 8010ffa:	1b80      	subs	r0, r0, r6
 8010ffc:	6060      	str	r0, [r4, #4]
 8010ffe:	6863      	ldr	r3, [r4, #4]
 8011000:	6123      	str	r3, [r4, #16]
 8011002:	2300      	movs	r3, #0
 8011004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011008:	e7aa      	b.n	8010f60 <_printf_i+0x148>
 801100a:	6923      	ldr	r3, [r4, #16]
 801100c:	4632      	mov	r2, r6
 801100e:	4649      	mov	r1, r9
 8011010:	4640      	mov	r0, r8
 8011012:	47d0      	blx	sl
 8011014:	3001      	adds	r0, #1
 8011016:	d0ad      	beq.n	8010f74 <_printf_i+0x15c>
 8011018:	6823      	ldr	r3, [r4, #0]
 801101a:	079b      	lsls	r3, r3, #30
 801101c:	d413      	bmi.n	8011046 <_printf_i+0x22e>
 801101e:	68e0      	ldr	r0, [r4, #12]
 8011020:	9b03      	ldr	r3, [sp, #12]
 8011022:	4298      	cmp	r0, r3
 8011024:	bfb8      	it	lt
 8011026:	4618      	movlt	r0, r3
 8011028:	e7a6      	b.n	8010f78 <_printf_i+0x160>
 801102a:	2301      	movs	r3, #1
 801102c:	4632      	mov	r2, r6
 801102e:	4649      	mov	r1, r9
 8011030:	4640      	mov	r0, r8
 8011032:	47d0      	blx	sl
 8011034:	3001      	adds	r0, #1
 8011036:	d09d      	beq.n	8010f74 <_printf_i+0x15c>
 8011038:	3501      	adds	r5, #1
 801103a:	68e3      	ldr	r3, [r4, #12]
 801103c:	9903      	ldr	r1, [sp, #12]
 801103e:	1a5b      	subs	r3, r3, r1
 8011040:	42ab      	cmp	r3, r5
 8011042:	dcf2      	bgt.n	801102a <_printf_i+0x212>
 8011044:	e7eb      	b.n	801101e <_printf_i+0x206>
 8011046:	2500      	movs	r5, #0
 8011048:	f104 0619 	add.w	r6, r4, #25
 801104c:	e7f5      	b.n	801103a <_printf_i+0x222>
 801104e:	bf00      	nop
 8011050:	0801700a 	.word	0x0801700a
 8011054:	0801701b 	.word	0x0801701b

08011058 <_scanf_float>:
 8011058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801105c:	b087      	sub	sp, #28
 801105e:	4617      	mov	r7, r2
 8011060:	9303      	str	r3, [sp, #12]
 8011062:	688b      	ldr	r3, [r1, #8]
 8011064:	1e5a      	subs	r2, r3, #1
 8011066:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801106a:	bf81      	itttt	hi
 801106c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011070:	eb03 0b05 	addhi.w	fp, r3, r5
 8011074:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011078:	608b      	strhi	r3, [r1, #8]
 801107a:	680b      	ldr	r3, [r1, #0]
 801107c:	460a      	mov	r2, r1
 801107e:	f04f 0500 	mov.w	r5, #0
 8011082:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8011086:	f842 3b1c 	str.w	r3, [r2], #28
 801108a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801108e:	4680      	mov	r8, r0
 8011090:	460c      	mov	r4, r1
 8011092:	bf98      	it	ls
 8011094:	f04f 0b00 	movls.w	fp, #0
 8011098:	9201      	str	r2, [sp, #4]
 801109a:	4616      	mov	r6, r2
 801109c:	46aa      	mov	sl, r5
 801109e:	46a9      	mov	r9, r5
 80110a0:	9502      	str	r5, [sp, #8]
 80110a2:	68a2      	ldr	r2, [r4, #8]
 80110a4:	b152      	cbz	r2, 80110bc <_scanf_float+0x64>
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80110ac:	d864      	bhi.n	8011178 <_scanf_float+0x120>
 80110ae:	2b40      	cmp	r3, #64	@ 0x40
 80110b0:	d83c      	bhi.n	801112c <_scanf_float+0xd4>
 80110b2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80110b6:	b2c8      	uxtb	r0, r1
 80110b8:	280e      	cmp	r0, #14
 80110ba:	d93a      	bls.n	8011132 <_scanf_float+0xda>
 80110bc:	f1b9 0f00 	cmp.w	r9, #0
 80110c0:	d003      	beq.n	80110ca <_scanf_float+0x72>
 80110c2:	6823      	ldr	r3, [r4, #0]
 80110c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80110c8:	6023      	str	r3, [r4, #0]
 80110ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80110ce:	f1ba 0f01 	cmp.w	sl, #1
 80110d2:	f200 8117 	bhi.w	8011304 <_scanf_float+0x2ac>
 80110d6:	9b01      	ldr	r3, [sp, #4]
 80110d8:	429e      	cmp	r6, r3
 80110da:	f200 8108 	bhi.w	80112ee <_scanf_float+0x296>
 80110de:	2001      	movs	r0, #1
 80110e0:	b007      	add	sp, #28
 80110e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80110ea:	2a0d      	cmp	r2, #13
 80110ec:	d8e6      	bhi.n	80110bc <_scanf_float+0x64>
 80110ee:	a101      	add	r1, pc, #4	@ (adr r1, 80110f4 <_scanf_float+0x9c>)
 80110f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80110f4:	0801123b 	.word	0x0801123b
 80110f8:	080110bd 	.word	0x080110bd
 80110fc:	080110bd 	.word	0x080110bd
 8011100:	080110bd 	.word	0x080110bd
 8011104:	0801129b 	.word	0x0801129b
 8011108:	08011273 	.word	0x08011273
 801110c:	080110bd 	.word	0x080110bd
 8011110:	080110bd 	.word	0x080110bd
 8011114:	08011249 	.word	0x08011249
 8011118:	080110bd 	.word	0x080110bd
 801111c:	080110bd 	.word	0x080110bd
 8011120:	080110bd 	.word	0x080110bd
 8011124:	080110bd 	.word	0x080110bd
 8011128:	08011201 	.word	0x08011201
 801112c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011130:	e7db      	b.n	80110ea <_scanf_float+0x92>
 8011132:	290e      	cmp	r1, #14
 8011134:	d8c2      	bhi.n	80110bc <_scanf_float+0x64>
 8011136:	a001      	add	r0, pc, #4	@ (adr r0, 801113c <_scanf_float+0xe4>)
 8011138:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801113c:	080111f1 	.word	0x080111f1
 8011140:	080110bd 	.word	0x080110bd
 8011144:	080111f1 	.word	0x080111f1
 8011148:	08011287 	.word	0x08011287
 801114c:	080110bd 	.word	0x080110bd
 8011150:	08011199 	.word	0x08011199
 8011154:	080111d7 	.word	0x080111d7
 8011158:	080111d7 	.word	0x080111d7
 801115c:	080111d7 	.word	0x080111d7
 8011160:	080111d7 	.word	0x080111d7
 8011164:	080111d7 	.word	0x080111d7
 8011168:	080111d7 	.word	0x080111d7
 801116c:	080111d7 	.word	0x080111d7
 8011170:	080111d7 	.word	0x080111d7
 8011174:	080111d7 	.word	0x080111d7
 8011178:	2b6e      	cmp	r3, #110	@ 0x6e
 801117a:	d809      	bhi.n	8011190 <_scanf_float+0x138>
 801117c:	2b60      	cmp	r3, #96	@ 0x60
 801117e:	d8b2      	bhi.n	80110e6 <_scanf_float+0x8e>
 8011180:	2b54      	cmp	r3, #84	@ 0x54
 8011182:	d07b      	beq.n	801127c <_scanf_float+0x224>
 8011184:	2b59      	cmp	r3, #89	@ 0x59
 8011186:	d199      	bne.n	80110bc <_scanf_float+0x64>
 8011188:	2d07      	cmp	r5, #7
 801118a:	d197      	bne.n	80110bc <_scanf_float+0x64>
 801118c:	2508      	movs	r5, #8
 801118e:	e02c      	b.n	80111ea <_scanf_float+0x192>
 8011190:	2b74      	cmp	r3, #116	@ 0x74
 8011192:	d073      	beq.n	801127c <_scanf_float+0x224>
 8011194:	2b79      	cmp	r3, #121	@ 0x79
 8011196:	e7f6      	b.n	8011186 <_scanf_float+0x12e>
 8011198:	6821      	ldr	r1, [r4, #0]
 801119a:	05c8      	lsls	r0, r1, #23
 801119c:	d51b      	bpl.n	80111d6 <_scanf_float+0x17e>
 801119e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80111a2:	6021      	str	r1, [r4, #0]
 80111a4:	f109 0901 	add.w	r9, r9, #1
 80111a8:	f1bb 0f00 	cmp.w	fp, #0
 80111ac:	d003      	beq.n	80111b6 <_scanf_float+0x15e>
 80111ae:	3201      	adds	r2, #1
 80111b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80111b4:	60a2      	str	r2, [r4, #8]
 80111b6:	68a3      	ldr	r3, [r4, #8]
 80111b8:	3b01      	subs	r3, #1
 80111ba:	60a3      	str	r3, [r4, #8]
 80111bc:	6923      	ldr	r3, [r4, #16]
 80111be:	3301      	adds	r3, #1
 80111c0:	6123      	str	r3, [r4, #16]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	607b      	str	r3, [r7, #4]
 80111ca:	f340 8087 	ble.w	80112dc <_scanf_float+0x284>
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	3301      	adds	r3, #1
 80111d2:	603b      	str	r3, [r7, #0]
 80111d4:	e765      	b.n	80110a2 <_scanf_float+0x4a>
 80111d6:	eb1a 0105 	adds.w	r1, sl, r5
 80111da:	f47f af6f 	bne.w	80110bc <_scanf_float+0x64>
 80111de:	6822      	ldr	r2, [r4, #0]
 80111e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80111e4:	6022      	str	r2, [r4, #0]
 80111e6:	460d      	mov	r5, r1
 80111e8:	468a      	mov	sl, r1
 80111ea:	f806 3b01 	strb.w	r3, [r6], #1
 80111ee:	e7e2      	b.n	80111b6 <_scanf_float+0x15e>
 80111f0:	6822      	ldr	r2, [r4, #0]
 80111f2:	0610      	lsls	r0, r2, #24
 80111f4:	f57f af62 	bpl.w	80110bc <_scanf_float+0x64>
 80111f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80111fc:	6022      	str	r2, [r4, #0]
 80111fe:	e7f4      	b.n	80111ea <_scanf_float+0x192>
 8011200:	f1ba 0f00 	cmp.w	sl, #0
 8011204:	d10e      	bne.n	8011224 <_scanf_float+0x1cc>
 8011206:	f1b9 0f00 	cmp.w	r9, #0
 801120a:	d10e      	bne.n	801122a <_scanf_float+0x1d2>
 801120c:	6822      	ldr	r2, [r4, #0]
 801120e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011212:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011216:	d108      	bne.n	801122a <_scanf_float+0x1d2>
 8011218:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801121c:	6022      	str	r2, [r4, #0]
 801121e:	f04f 0a01 	mov.w	sl, #1
 8011222:	e7e2      	b.n	80111ea <_scanf_float+0x192>
 8011224:	f1ba 0f02 	cmp.w	sl, #2
 8011228:	d055      	beq.n	80112d6 <_scanf_float+0x27e>
 801122a:	2d01      	cmp	r5, #1
 801122c:	d002      	beq.n	8011234 <_scanf_float+0x1dc>
 801122e:	2d04      	cmp	r5, #4
 8011230:	f47f af44 	bne.w	80110bc <_scanf_float+0x64>
 8011234:	3501      	adds	r5, #1
 8011236:	b2ed      	uxtb	r5, r5
 8011238:	e7d7      	b.n	80111ea <_scanf_float+0x192>
 801123a:	f1ba 0f01 	cmp.w	sl, #1
 801123e:	f47f af3d 	bne.w	80110bc <_scanf_float+0x64>
 8011242:	f04f 0a02 	mov.w	sl, #2
 8011246:	e7d0      	b.n	80111ea <_scanf_float+0x192>
 8011248:	b97d      	cbnz	r5, 801126a <_scanf_float+0x212>
 801124a:	f1b9 0f00 	cmp.w	r9, #0
 801124e:	f47f af38 	bne.w	80110c2 <_scanf_float+0x6a>
 8011252:	6822      	ldr	r2, [r4, #0]
 8011254:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011258:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801125c:	f040 8108 	bne.w	8011470 <_scanf_float+0x418>
 8011260:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011264:	6022      	str	r2, [r4, #0]
 8011266:	2501      	movs	r5, #1
 8011268:	e7bf      	b.n	80111ea <_scanf_float+0x192>
 801126a:	2d03      	cmp	r5, #3
 801126c:	d0e2      	beq.n	8011234 <_scanf_float+0x1dc>
 801126e:	2d05      	cmp	r5, #5
 8011270:	e7de      	b.n	8011230 <_scanf_float+0x1d8>
 8011272:	2d02      	cmp	r5, #2
 8011274:	f47f af22 	bne.w	80110bc <_scanf_float+0x64>
 8011278:	2503      	movs	r5, #3
 801127a:	e7b6      	b.n	80111ea <_scanf_float+0x192>
 801127c:	2d06      	cmp	r5, #6
 801127e:	f47f af1d 	bne.w	80110bc <_scanf_float+0x64>
 8011282:	2507      	movs	r5, #7
 8011284:	e7b1      	b.n	80111ea <_scanf_float+0x192>
 8011286:	6822      	ldr	r2, [r4, #0]
 8011288:	0591      	lsls	r1, r2, #22
 801128a:	f57f af17 	bpl.w	80110bc <_scanf_float+0x64>
 801128e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011292:	6022      	str	r2, [r4, #0]
 8011294:	f8cd 9008 	str.w	r9, [sp, #8]
 8011298:	e7a7      	b.n	80111ea <_scanf_float+0x192>
 801129a:	6822      	ldr	r2, [r4, #0]
 801129c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80112a0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80112a4:	d006      	beq.n	80112b4 <_scanf_float+0x25c>
 80112a6:	0550      	lsls	r0, r2, #21
 80112a8:	f57f af08 	bpl.w	80110bc <_scanf_float+0x64>
 80112ac:	f1b9 0f00 	cmp.w	r9, #0
 80112b0:	f000 80de 	beq.w	8011470 <_scanf_float+0x418>
 80112b4:	0591      	lsls	r1, r2, #22
 80112b6:	bf58      	it	pl
 80112b8:	9902      	ldrpl	r1, [sp, #8]
 80112ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80112be:	bf58      	it	pl
 80112c0:	eba9 0101 	subpl.w	r1, r9, r1
 80112c4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80112c8:	bf58      	it	pl
 80112ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80112ce:	6022      	str	r2, [r4, #0]
 80112d0:	f04f 0900 	mov.w	r9, #0
 80112d4:	e789      	b.n	80111ea <_scanf_float+0x192>
 80112d6:	f04f 0a03 	mov.w	sl, #3
 80112da:	e786      	b.n	80111ea <_scanf_float+0x192>
 80112dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80112e0:	4639      	mov	r1, r7
 80112e2:	4640      	mov	r0, r8
 80112e4:	4798      	blx	r3
 80112e6:	2800      	cmp	r0, #0
 80112e8:	f43f aedb 	beq.w	80110a2 <_scanf_float+0x4a>
 80112ec:	e6e6      	b.n	80110bc <_scanf_float+0x64>
 80112ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80112f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80112f6:	463a      	mov	r2, r7
 80112f8:	4640      	mov	r0, r8
 80112fa:	4798      	blx	r3
 80112fc:	6923      	ldr	r3, [r4, #16]
 80112fe:	3b01      	subs	r3, #1
 8011300:	6123      	str	r3, [r4, #16]
 8011302:	e6e8      	b.n	80110d6 <_scanf_float+0x7e>
 8011304:	1e6b      	subs	r3, r5, #1
 8011306:	2b06      	cmp	r3, #6
 8011308:	d824      	bhi.n	8011354 <_scanf_float+0x2fc>
 801130a:	2d02      	cmp	r5, #2
 801130c:	d836      	bhi.n	801137c <_scanf_float+0x324>
 801130e:	9b01      	ldr	r3, [sp, #4]
 8011310:	429e      	cmp	r6, r3
 8011312:	f67f aee4 	bls.w	80110de <_scanf_float+0x86>
 8011316:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801131a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801131e:	463a      	mov	r2, r7
 8011320:	4640      	mov	r0, r8
 8011322:	4798      	blx	r3
 8011324:	6923      	ldr	r3, [r4, #16]
 8011326:	3b01      	subs	r3, #1
 8011328:	6123      	str	r3, [r4, #16]
 801132a:	e7f0      	b.n	801130e <_scanf_float+0x2b6>
 801132c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011330:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011334:	463a      	mov	r2, r7
 8011336:	4640      	mov	r0, r8
 8011338:	4798      	blx	r3
 801133a:	6923      	ldr	r3, [r4, #16]
 801133c:	3b01      	subs	r3, #1
 801133e:	6123      	str	r3, [r4, #16]
 8011340:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011344:	fa5f fa8a 	uxtb.w	sl, sl
 8011348:	f1ba 0f02 	cmp.w	sl, #2
 801134c:	d1ee      	bne.n	801132c <_scanf_float+0x2d4>
 801134e:	3d03      	subs	r5, #3
 8011350:	b2ed      	uxtb	r5, r5
 8011352:	1b76      	subs	r6, r6, r5
 8011354:	6823      	ldr	r3, [r4, #0]
 8011356:	05da      	lsls	r2, r3, #23
 8011358:	d530      	bpl.n	80113bc <_scanf_float+0x364>
 801135a:	055b      	lsls	r3, r3, #21
 801135c:	d511      	bpl.n	8011382 <_scanf_float+0x32a>
 801135e:	9b01      	ldr	r3, [sp, #4]
 8011360:	429e      	cmp	r6, r3
 8011362:	f67f aebc 	bls.w	80110de <_scanf_float+0x86>
 8011366:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801136a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801136e:	463a      	mov	r2, r7
 8011370:	4640      	mov	r0, r8
 8011372:	4798      	blx	r3
 8011374:	6923      	ldr	r3, [r4, #16]
 8011376:	3b01      	subs	r3, #1
 8011378:	6123      	str	r3, [r4, #16]
 801137a:	e7f0      	b.n	801135e <_scanf_float+0x306>
 801137c:	46aa      	mov	sl, r5
 801137e:	46b3      	mov	fp, r6
 8011380:	e7de      	b.n	8011340 <_scanf_float+0x2e8>
 8011382:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011386:	6923      	ldr	r3, [r4, #16]
 8011388:	2965      	cmp	r1, #101	@ 0x65
 801138a:	f103 33ff 	add.w	r3, r3, #4294967295
 801138e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011392:	6123      	str	r3, [r4, #16]
 8011394:	d00c      	beq.n	80113b0 <_scanf_float+0x358>
 8011396:	2945      	cmp	r1, #69	@ 0x45
 8011398:	d00a      	beq.n	80113b0 <_scanf_float+0x358>
 801139a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801139e:	463a      	mov	r2, r7
 80113a0:	4640      	mov	r0, r8
 80113a2:	4798      	blx	r3
 80113a4:	6923      	ldr	r3, [r4, #16]
 80113a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80113aa:	3b01      	subs	r3, #1
 80113ac:	1eb5      	subs	r5, r6, #2
 80113ae:	6123      	str	r3, [r4, #16]
 80113b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80113b4:	463a      	mov	r2, r7
 80113b6:	4640      	mov	r0, r8
 80113b8:	4798      	blx	r3
 80113ba:	462e      	mov	r6, r5
 80113bc:	6822      	ldr	r2, [r4, #0]
 80113be:	f012 0210 	ands.w	r2, r2, #16
 80113c2:	d001      	beq.n	80113c8 <_scanf_float+0x370>
 80113c4:	2000      	movs	r0, #0
 80113c6:	e68b      	b.n	80110e0 <_scanf_float+0x88>
 80113c8:	7032      	strb	r2, [r6, #0]
 80113ca:	6823      	ldr	r3, [r4, #0]
 80113cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80113d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80113d4:	d11c      	bne.n	8011410 <_scanf_float+0x3b8>
 80113d6:	9b02      	ldr	r3, [sp, #8]
 80113d8:	454b      	cmp	r3, r9
 80113da:	eba3 0209 	sub.w	r2, r3, r9
 80113de:	d123      	bne.n	8011428 <_scanf_float+0x3d0>
 80113e0:	9901      	ldr	r1, [sp, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	4640      	mov	r0, r8
 80113e6:	f002 fc6b 	bl	8013cc0 <_strtod_r>
 80113ea:	9b03      	ldr	r3, [sp, #12]
 80113ec:	6821      	ldr	r1, [r4, #0]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	f011 0f02 	tst.w	r1, #2
 80113f4:	ec57 6b10 	vmov	r6, r7, d0
 80113f8:	f103 0204 	add.w	r2, r3, #4
 80113fc:	d01f      	beq.n	801143e <_scanf_float+0x3e6>
 80113fe:	9903      	ldr	r1, [sp, #12]
 8011400:	600a      	str	r2, [r1, #0]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	e9c3 6700 	strd	r6, r7, [r3]
 8011408:	68e3      	ldr	r3, [r4, #12]
 801140a:	3301      	adds	r3, #1
 801140c:	60e3      	str	r3, [r4, #12]
 801140e:	e7d9      	b.n	80113c4 <_scanf_float+0x36c>
 8011410:	9b04      	ldr	r3, [sp, #16]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d0e4      	beq.n	80113e0 <_scanf_float+0x388>
 8011416:	9905      	ldr	r1, [sp, #20]
 8011418:	230a      	movs	r3, #10
 801141a:	3101      	adds	r1, #1
 801141c:	4640      	mov	r0, r8
 801141e:	f002 fccf 	bl	8013dc0 <_strtol_r>
 8011422:	9b04      	ldr	r3, [sp, #16]
 8011424:	9e05      	ldr	r6, [sp, #20]
 8011426:	1ac2      	subs	r2, r0, r3
 8011428:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801142c:	429e      	cmp	r6, r3
 801142e:	bf28      	it	cs
 8011430:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011434:	4910      	ldr	r1, [pc, #64]	@ (8011478 <_scanf_float+0x420>)
 8011436:	4630      	mov	r0, r6
 8011438:	f000 f8e4 	bl	8011604 <siprintf>
 801143c:	e7d0      	b.n	80113e0 <_scanf_float+0x388>
 801143e:	f011 0f04 	tst.w	r1, #4
 8011442:	9903      	ldr	r1, [sp, #12]
 8011444:	600a      	str	r2, [r1, #0]
 8011446:	d1dc      	bne.n	8011402 <_scanf_float+0x3aa>
 8011448:	681d      	ldr	r5, [r3, #0]
 801144a:	4632      	mov	r2, r6
 801144c:	463b      	mov	r3, r7
 801144e:	4630      	mov	r0, r6
 8011450:	4639      	mov	r1, r7
 8011452:	f7ef fb73 	bl	8000b3c <__aeabi_dcmpun>
 8011456:	b128      	cbz	r0, 8011464 <_scanf_float+0x40c>
 8011458:	4808      	ldr	r0, [pc, #32]	@ (801147c <_scanf_float+0x424>)
 801145a:	f000 fa2b 	bl	80118b4 <nanf>
 801145e:	ed85 0a00 	vstr	s0, [r5]
 8011462:	e7d1      	b.n	8011408 <_scanf_float+0x3b0>
 8011464:	4630      	mov	r0, r6
 8011466:	4639      	mov	r1, r7
 8011468:	f7ef fbc6 	bl	8000bf8 <__aeabi_d2f>
 801146c:	6028      	str	r0, [r5, #0]
 801146e:	e7cb      	b.n	8011408 <_scanf_float+0x3b0>
 8011470:	f04f 0900 	mov.w	r9, #0
 8011474:	e629      	b.n	80110ca <_scanf_float+0x72>
 8011476:	bf00      	nop
 8011478:	0801702c 	.word	0x0801702c
 801147c:	080173c5 	.word	0x080173c5

08011480 <std>:
 8011480:	2300      	movs	r3, #0
 8011482:	b510      	push	{r4, lr}
 8011484:	4604      	mov	r4, r0
 8011486:	e9c0 3300 	strd	r3, r3, [r0]
 801148a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801148e:	6083      	str	r3, [r0, #8]
 8011490:	8181      	strh	r1, [r0, #12]
 8011492:	6643      	str	r3, [r0, #100]	@ 0x64
 8011494:	81c2      	strh	r2, [r0, #14]
 8011496:	6183      	str	r3, [r0, #24]
 8011498:	4619      	mov	r1, r3
 801149a:	2208      	movs	r2, #8
 801149c:	305c      	adds	r0, #92	@ 0x5c
 801149e:	f000 f924 	bl	80116ea <memset>
 80114a2:	4b0d      	ldr	r3, [pc, #52]	@ (80114d8 <std+0x58>)
 80114a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80114a6:	4b0d      	ldr	r3, [pc, #52]	@ (80114dc <std+0x5c>)
 80114a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80114aa:	4b0d      	ldr	r3, [pc, #52]	@ (80114e0 <std+0x60>)
 80114ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80114ae:	4b0d      	ldr	r3, [pc, #52]	@ (80114e4 <std+0x64>)
 80114b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80114b2:	4b0d      	ldr	r3, [pc, #52]	@ (80114e8 <std+0x68>)
 80114b4:	6224      	str	r4, [r4, #32]
 80114b6:	429c      	cmp	r4, r3
 80114b8:	d006      	beq.n	80114c8 <std+0x48>
 80114ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80114be:	4294      	cmp	r4, r2
 80114c0:	d002      	beq.n	80114c8 <std+0x48>
 80114c2:	33d0      	adds	r3, #208	@ 0xd0
 80114c4:	429c      	cmp	r4, r3
 80114c6:	d105      	bne.n	80114d4 <std+0x54>
 80114c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80114cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114d0:	f000 b9de 	b.w	8011890 <__retarget_lock_init_recursive>
 80114d4:	bd10      	pop	{r4, pc}
 80114d6:	bf00      	nop
 80114d8:	08011645 	.word	0x08011645
 80114dc:	08011667 	.word	0x08011667
 80114e0:	0801169f 	.word	0x0801169f
 80114e4:	080116c3 	.word	0x080116c3
 80114e8:	20005468 	.word	0x20005468

080114ec <stdio_exit_handler>:
 80114ec:	4a02      	ldr	r2, [pc, #8]	@ (80114f8 <stdio_exit_handler+0xc>)
 80114ee:	4903      	ldr	r1, [pc, #12]	@ (80114fc <stdio_exit_handler+0x10>)
 80114f0:	4803      	ldr	r0, [pc, #12]	@ (8011500 <stdio_exit_handler+0x14>)
 80114f2:	f000 b869 	b.w	80115c8 <_fwalk_sglue>
 80114f6:	bf00      	nop
 80114f8:	20000098 	.word	0x20000098
 80114fc:	0801417d 	.word	0x0801417d
 8011500:	200000a8 	.word	0x200000a8

08011504 <cleanup_stdio>:
 8011504:	6841      	ldr	r1, [r0, #4]
 8011506:	4b0c      	ldr	r3, [pc, #48]	@ (8011538 <cleanup_stdio+0x34>)
 8011508:	4299      	cmp	r1, r3
 801150a:	b510      	push	{r4, lr}
 801150c:	4604      	mov	r4, r0
 801150e:	d001      	beq.n	8011514 <cleanup_stdio+0x10>
 8011510:	f002 fe34 	bl	801417c <_fflush_r>
 8011514:	68a1      	ldr	r1, [r4, #8]
 8011516:	4b09      	ldr	r3, [pc, #36]	@ (801153c <cleanup_stdio+0x38>)
 8011518:	4299      	cmp	r1, r3
 801151a:	d002      	beq.n	8011522 <cleanup_stdio+0x1e>
 801151c:	4620      	mov	r0, r4
 801151e:	f002 fe2d 	bl	801417c <_fflush_r>
 8011522:	68e1      	ldr	r1, [r4, #12]
 8011524:	4b06      	ldr	r3, [pc, #24]	@ (8011540 <cleanup_stdio+0x3c>)
 8011526:	4299      	cmp	r1, r3
 8011528:	d004      	beq.n	8011534 <cleanup_stdio+0x30>
 801152a:	4620      	mov	r0, r4
 801152c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011530:	f002 be24 	b.w	801417c <_fflush_r>
 8011534:	bd10      	pop	{r4, pc}
 8011536:	bf00      	nop
 8011538:	20005468 	.word	0x20005468
 801153c:	200054d0 	.word	0x200054d0
 8011540:	20005538 	.word	0x20005538

08011544 <global_stdio_init.part.0>:
 8011544:	b510      	push	{r4, lr}
 8011546:	4b0b      	ldr	r3, [pc, #44]	@ (8011574 <global_stdio_init.part.0+0x30>)
 8011548:	4c0b      	ldr	r4, [pc, #44]	@ (8011578 <global_stdio_init.part.0+0x34>)
 801154a:	4a0c      	ldr	r2, [pc, #48]	@ (801157c <global_stdio_init.part.0+0x38>)
 801154c:	601a      	str	r2, [r3, #0]
 801154e:	4620      	mov	r0, r4
 8011550:	2200      	movs	r2, #0
 8011552:	2104      	movs	r1, #4
 8011554:	f7ff ff94 	bl	8011480 <std>
 8011558:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801155c:	2201      	movs	r2, #1
 801155e:	2109      	movs	r1, #9
 8011560:	f7ff ff8e 	bl	8011480 <std>
 8011564:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011568:	2202      	movs	r2, #2
 801156a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801156e:	2112      	movs	r1, #18
 8011570:	f7ff bf86 	b.w	8011480 <std>
 8011574:	200055a0 	.word	0x200055a0
 8011578:	20005468 	.word	0x20005468
 801157c:	080114ed 	.word	0x080114ed

08011580 <__sfp_lock_acquire>:
 8011580:	4801      	ldr	r0, [pc, #4]	@ (8011588 <__sfp_lock_acquire+0x8>)
 8011582:	f000 b986 	b.w	8011892 <__retarget_lock_acquire_recursive>
 8011586:	bf00      	nop
 8011588:	200055a9 	.word	0x200055a9

0801158c <__sfp_lock_release>:
 801158c:	4801      	ldr	r0, [pc, #4]	@ (8011594 <__sfp_lock_release+0x8>)
 801158e:	f000 b981 	b.w	8011894 <__retarget_lock_release_recursive>
 8011592:	bf00      	nop
 8011594:	200055a9 	.word	0x200055a9

08011598 <__sinit>:
 8011598:	b510      	push	{r4, lr}
 801159a:	4604      	mov	r4, r0
 801159c:	f7ff fff0 	bl	8011580 <__sfp_lock_acquire>
 80115a0:	6a23      	ldr	r3, [r4, #32]
 80115a2:	b11b      	cbz	r3, 80115ac <__sinit+0x14>
 80115a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115a8:	f7ff bff0 	b.w	801158c <__sfp_lock_release>
 80115ac:	4b04      	ldr	r3, [pc, #16]	@ (80115c0 <__sinit+0x28>)
 80115ae:	6223      	str	r3, [r4, #32]
 80115b0:	4b04      	ldr	r3, [pc, #16]	@ (80115c4 <__sinit+0x2c>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d1f5      	bne.n	80115a4 <__sinit+0xc>
 80115b8:	f7ff ffc4 	bl	8011544 <global_stdio_init.part.0>
 80115bc:	e7f2      	b.n	80115a4 <__sinit+0xc>
 80115be:	bf00      	nop
 80115c0:	08011505 	.word	0x08011505
 80115c4:	200055a0 	.word	0x200055a0

080115c8 <_fwalk_sglue>:
 80115c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115cc:	4607      	mov	r7, r0
 80115ce:	4688      	mov	r8, r1
 80115d0:	4614      	mov	r4, r2
 80115d2:	2600      	movs	r6, #0
 80115d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115d8:	f1b9 0901 	subs.w	r9, r9, #1
 80115dc:	d505      	bpl.n	80115ea <_fwalk_sglue+0x22>
 80115de:	6824      	ldr	r4, [r4, #0]
 80115e0:	2c00      	cmp	r4, #0
 80115e2:	d1f7      	bne.n	80115d4 <_fwalk_sglue+0xc>
 80115e4:	4630      	mov	r0, r6
 80115e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115ea:	89ab      	ldrh	r3, [r5, #12]
 80115ec:	2b01      	cmp	r3, #1
 80115ee:	d907      	bls.n	8011600 <_fwalk_sglue+0x38>
 80115f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115f4:	3301      	adds	r3, #1
 80115f6:	d003      	beq.n	8011600 <_fwalk_sglue+0x38>
 80115f8:	4629      	mov	r1, r5
 80115fa:	4638      	mov	r0, r7
 80115fc:	47c0      	blx	r8
 80115fe:	4306      	orrs	r6, r0
 8011600:	3568      	adds	r5, #104	@ 0x68
 8011602:	e7e9      	b.n	80115d8 <_fwalk_sglue+0x10>

08011604 <siprintf>:
 8011604:	b40e      	push	{r1, r2, r3}
 8011606:	b500      	push	{lr}
 8011608:	b09c      	sub	sp, #112	@ 0x70
 801160a:	ab1d      	add	r3, sp, #116	@ 0x74
 801160c:	9002      	str	r0, [sp, #8]
 801160e:	9006      	str	r0, [sp, #24]
 8011610:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011614:	4809      	ldr	r0, [pc, #36]	@ (801163c <siprintf+0x38>)
 8011616:	9107      	str	r1, [sp, #28]
 8011618:	9104      	str	r1, [sp, #16]
 801161a:	4909      	ldr	r1, [pc, #36]	@ (8011640 <siprintf+0x3c>)
 801161c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011620:	9105      	str	r1, [sp, #20]
 8011622:	6800      	ldr	r0, [r0, #0]
 8011624:	9301      	str	r3, [sp, #4]
 8011626:	a902      	add	r1, sp, #8
 8011628:	f002 fc28 	bl	8013e7c <_svfiprintf_r>
 801162c:	9b02      	ldr	r3, [sp, #8]
 801162e:	2200      	movs	r2, #0
 8011630:	701a      	strb	r2, [r3, #0]
 8011632:	b01c      	add	sp, #112	@ 0x70
 8011634:	f85d eb04 	ldr.w	lr, [sp], #4
 8011638:	b003      	add	sp, #12
 801163a:	4770      	bx	lr
 801163c:	200000a4 	.word	0x200000a4
 8011640:	ffff0208 	.word	0xffff0208

08011644 <__sread>:
 8011644:	b510      	push	{r4, lr}
 8011646:	460c      	mov	r4, r1
 8011648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801164c:	f000 f8d2 	bl	80117f4 <_read_r>
 8011650:	2800      	cmp	r0, #0
 8011652:	bfab      	itete	ge
 8011654:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011656:	89a3      	ldrhlt	r3, [r4, #12]
 8011658:	181b      	addge	r3, r3, r0
 801165a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801165e:	bfac      	ite	ge
 8011660:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011662:	81a3      	strhlt	r3, [r4, #12]
 8011664:	bd10      	pop	{r4, pc}

08011666 <__swrite>:
 8011666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801166a:	461f      	mov	r7, r3
 801166c:	898b      	ldrh	r3, [r1, #12]
 801166e:	05db      	lsls	r3, r3, #23
 8011670:	4605      	mov	r5, r0
 8011672:	460c      	mov	r4, r1
 8011674:	4616      	mov	r6, r2
 8011676:	d505      	bpl.n	8011684 <__swrite+0x1e>
 8011678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801167c:	2302      	movs	r3, #2
 801167e:	2200      	movs	r2, #0
 8011680:	f000 f8a6 	bl	80117d0 <_lseek_r>
 8011684:	89a3      	ldrh	r3, [r4, #12]
 8011686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801168a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801168e:	81a3      	strh	r3, [r4, #12]
 8011690:	4632      	mov	r2, r6
 8011692:	463b      	mov	r3, r7
 8011694:	4628      	mov	r0, r5
 8011696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801169a:	f000 b8bd 	b.w	8011818 <_write_r>

0801169e <__sseek>:
 801169e:	b510      	push	{r4, lr}
 80116a0:	460c      	mov	r4, r1
 80116a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116a6:	f000 f893 	bl	80117d0 <_lseek_r>
 80116aa:	1c43      	adds	r3, r0, #1
 80116ac:	89a3      	ldrh	r3, [r4, #12]
 80116ae:	bf15      	itete	ne
 80116b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80116b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80116b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80116ba:	81a3      	strheq	r3, [r4, #12]
 80116bc:	bf18      	it	ne
 80116be:	81a3      	strhne	r3, [r4, #12]
 80116c0:	bd10      	pop	{r4, pc}

080116c2 <__sclose>:
 80116c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116c6:	f000 b81d 	b.w	8011704 <_close_r>

080116ca <memcmp>:
 80116ca:	b510      	push	{r4, lr}
 80116cc:	3901      	subs	r1, #1
 80116ce:	4402      	add	r2, r0
 80116d0:	4290      	cmp	r0, r2
 80116d2:	d101      	bne.n	80116d8 <memcmp+0xe>
 80116d4:	2000      	movs	r0, #0
 80116d6:	e005      	b.n	80116e4 <memcmp+0x1a>
 80116d8:	7803      	ldrb	r3, [r0, #0]
 80116da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80116de:	42a3      	cmp	r3, r4
 80116e0:	d001      	beq.n	80116e6 <memcmp+0x1c>
 80116e2:	1b18      	subs	r0, r3, r4
 80116e4:	bd10      	pop	{r4, pc}
 80116e6:	3001      	adds	r0, #1
 80116e8:	e7f2      	b.n	80116d0 <memcmp+0x6>

080116ea <memset>:
 80116ea:	4402      	add	r2, r0
 80116ec:	4603      	mov	r3, r0
 80116ee:	4293      	cmp	r3, r2
 80116f0:	d100      	bne.n	80116f4 <memset+0xa>
 80116f2:	4770      	bx	lr
 80116f4:	f803 1b01 	strb.w	r1, [r3], #1
 80116f8:	e7f9      	b.n	80116ee <memset+0x4>
	...

080116fc <_localeconv_r>:
 80116fc:	4800      	ldr	r0, [pc, #0]	@ (8011700 <_localeconv_r+0x4>)
 80116fe:	4770      	bx	lr
 8011700:	200001e4 	.word	0x200001e4

08011704 <_close_r>:
 8011704:	b538      	push	{r3, r4, r5, lr}
 8011706:	4d06      	ldr	r5, [pc, #24]	@ (8011720 <_close_r+0x1c>)
 8011708:	2300      	movs	r3, #0
 801170a:	4604      	mov	r4, r0
 801170c:	4608      	mov	r0, r1
 801170e:	602b      	str	r3, [r5, #0]
 8011710:	f7f0 fb30 	bl	8001d74 <_close>
 8011714:	1c43      	adds	r3, r0, #1
 8011716:	d102      	bne.n	801171e <_close_r+0x1a>
 8011718:	682b      	ldr	r3, [r5, #0]
 801171a:	b103      	cbz	r3, 801171e <_close_r+0x1a>
 801171c:	6023      	str	r3, [r4, #0]
 801171e:	bd38      	pop	{r3, r4, r5, pc}
 8011720:	200055a4 	.word	0x200055a4

08011724 <_reclaim_reent>:
 8011724:	4b29      	ldr	r3, [pc, #164]	@ (80117cc <_reclaim_reent+0xa8>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4283      	cmp	r3, r0
 801172a:	b570      	push	{r4, r5, r6, lr}
 801172c:	4604      	mov	r4, r0
 801172e:	d04b      	beq.n	80117c8 <_reclaim_reent+0xa4>
 8011730:	69c3      	ldr	r3, [r0, #28]
 8011732:	b1ab      	cbz	r3, 8011760 <_reclaim_reent+0x3c>
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	b16b      	cbz	r3, 8011754 <_reclaim_reent+0x30>
 8011738:	2500      	movs	r5, #0
 801173a:	69e3      	ldr	r3, [r4, #28]
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	5959      	ldr	r1, [r3, r5]
 8011740:	2900      	cmp	r1, #0
 8011742:	d13b      	bne.n	80117bc <_reclaim_reent+0x98>
 8011744:	3504      	adds	r5, #4
 8011746:	2d80      	cmp	r5, #128	@ 0x80
 8011748:	d1f7      	bne.n	801173a <_reclaim_reent+0x16>
 801174a:	69e3      	ldr	r3, [r4, #28]
 801174c:	4620      	mov	r0, r4
 801174e:	68d9      	ldr	r1, [r3, #12]
 8011750:	f000 ff02 	bl	8012558 <_free_r>
 8011754:	69e3      	ldr	r3, [r4, #28]
 8011756:	6819      	ldr	r1, [r3, #0]
 8011758:	b111      	cbz	r1, 8011760 <_reclaim_reent+0x3c>
 801175a:	4620      	mov	r0, r4
 801175c:	f000 fefc 	bl	8012558 <_free_r>
 8011760:	6961      	ldr	r1, [r4, #20]
 8011762:	b111      	cbz	r1, 801176a <_reclaim_reent+0x46>
 8011764:	4620      	mov	r0, r4
 8011766:	f000 fef7 	bl	8012558 <_free_r>
 801176a:	69e1      	ldr	r1, [r4, #28]
 801176c:	b111      	cbz	r1, 8011774 <_reclaim_reent+0x50>
 801176e:	4620      	mov	r0, r4
 8011770:	f000 fef2 	bl	8012558 <_free_r>
 8011774:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011776:	b111      	cbz	r1, 801177e <_reclaim_reent+0x5a>
 8011778:	4620      	mov	r0, r4
 801177a:	f000 feed 	bl	8012558 <_free_r>
 801177e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011780:	b111      	cbz	r1, 8011788 <_reclaim_reent+0x64>
 8011782:	4620      	mov	r0, r4
 8011784:	f000 fee8 	bl	8012558 <_free_r>
 8011788:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801178a:	b111      	cbz	r1, 8011792 <_reclaim_reent+0x6e>
 801178c:	4620      	mov	r0, r4
 801178e:	f000 fee3 	bl	8012558 <_free_r>
 8011792:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011794:	b111      	cbz	r1, 801179c <_reclaim_reent+0x78>
 8011796:	4620      	mov	r0, r4
 8011798:	f000 fede 	bl	8012558 <_free_r>
 801179c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801179e:	b111      	cbz	r1, 80117a6 <_reclaim_reent+0x82>
 80117a0:	4620      	mov	r0, r4
 80117a2:	f000 fed9 	bl	8012558 <_free_r>
 80117a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80117a8:	b111      	cbz	r1, 80117b0 <_reclaim_reent+0x8c>
 80117aa:	4620      	mov	r0, r4
 80117ac:	f000 fed4 	bl	8012558 <_free_r>
 80117b0:	6a23      	ldr	r3, [r4, #32]
 80117b2:	b14b      	cbz	r3, 80117c8 <_reclaim_reent+0xa4>
 80117b4:	4620      	mov	r0, r4
 80117b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117ba:	4718      	bx	r3
 80117bc:	680e      	ldr	r6, [r1, #0]
 80117be:	4620      	mov	r0, r4
 80117c0:	f000 feca 	bl	8012558 <_free_r>
 80117c4:	4631      	mov	r1, r6
 80117c6:	e7bb      	b.n	8011740 <_reclaim_reent+0x1c>
 80117c8:	bd70      	pop	{r4, r5, r6, pc}
 80117ca:	bf00      	nop
 80117cc:	200000a4 	.word	0x200000a4

080117d0 <_lseek_r>:
 80117d0:	b538      	push	{r3, r4, r5, lr}
 80117d2:	4d07      	ldr	r5, [pc, #28]	@ (80117f0 <_lseek_r+0x20>)
 80117d4:	4604      	mov	r4, r0
 80117d6:	4608      	mov	r0, r1
 80117d8:	4611      	mov	r1, r2
 80117da:	2200      	movs	r2, #0
 80117dc:	602a      	str	r2, [r5, #0]
 80117de:	461a      	mov	r2, r3
 80117e0:	f7f0 faef 	bl	8001dc2 <_lseek>
 80117e4:	1c43      	adds	r3, r0, #1
 80117e6:	d102      	bne.n	80117ee <_lseek_r+0x1e>
 80117e8:	682b      	ldr	r3, [r5, #0]
 80117ea:	b103      	cbz	r3, 80117ee <_lseek_r+0x1e>
 80117ec:	6023      	str	r3, [r4, #0]
 80117ee:	bd38      	pop	{r3, r4, r5, pc}
 80117f0:	200055a4 	.word	0x200055a4

080117f4 <_read_r>:
 80117f4:	b538      	push	{r3, r4, r5, lr}
 80117f6:	4d07      	ldr	r5, [pc, #28]	@ (8011814 <_read_r+0x20>)
 80117f8:	4604      	mov	r4, r0
 80117fa:	4608      	mov	r0, r1
 80117fc:	4611      	mov	r1, r2
 80117fe:	2200      	movs	r2, #0
 8011800:	602a      	str	r2, [r5, #0]
 8011802:	461a      	mov	r2, r3
 8011804:	f7f0 fa99 	bl	8001d3a <_read>
 8011808:	1c43      	adds	r3, r0, #1
 801180a:	d102      	bne.n	8011812 <_read_r+0x1e>
 801180c:	682b      	ldr	r3, [r5, #0]
 801180e:	b103      	cbz	r3, 8011812 <_read_r+0x1e>
 8011810:	6023      	str	r3, [r4, #0]
 8011812:	bd38      	pop	{r3, r4, r5, pc}
 8011814:	200055a4 	.word	0x200055a4

08011818 <_write_r>:
 8011818:	b538      	push	{r3, r4, r5, lr}
 801181a:	4d07      	ldr	r5, [pc, #28]	@ (8011838 <_write_r+0x20>)
 801181c:	4604      	mov	r4, r0
 801181e:	4608      	mov	r0, r1
 8011820:	4611      	mov	r1, r2
 8011822:	2200      	movs	r2, #0
 8011824:	602a      	str	r2, [r5, #0]
 8011826:	461a      	mov	r2, r3
 8011828:	f7ef ff5c 	bl	80016e4 <_write>
 801182c:	1c43      	adds	r3, r0, #1
 801182e:	d102      	bne.n	8011836 <_write_r+0x1e>
 8011830:	682b      	ldr	r3, [r5, #0]
 8011832:	b103      	cbz	r3, 8011836 <_write_r+0x1e>
 8011834:	6023      	str	r3, [r4, #0]
 8011836:	bd38      	pop	{r3, r4, r5, pc}
 8011838:	200055a4 	.word	0x200055a4

0801183c <__errno>:
 801183c:	4b01      	ldr	r3, [pc, #4]	@ (8011844 <__errno+0x8>)
 801183e:	6818      	ldr	r0, [r3, #0]
 8011840:	4770      	bx	lr
 8011842:	bf00      	nop
 8011844:	200000a4 	.word	0x200000a4

08011848 <__libc_init_array>:
 8011848:	b570      	push	{r4, r5, r6, lr}
 801184a:	4d0d      	ldr	r5, [pc, #52]	@ (8011880 <__libc_init_array+0x38>)
 801184c:	4c0d      	ldr	r4, [pc, #52]	@ (8011884 <__libc_init_array+0x3c>)
 801184e:	1b64      	subs	r4, r4, r5
 8011850:	10a4      	asrs	r4, r4, #2
 8011852:	2600      	movs	r6, #0
 8011854:	42a6      	cmp	r6, r4
 8011856:	d109      	bne.n	801186c <__libc_init_array+0x24>
 8011858:	4d0b      	ldr	r5, [pc, #44]	@ (8011888 <__libc_init_array+0x40>)
 801185a:	4c0c      	ldr	r4, [pc, #48]	@ (801188c <__libc_init_array+0x44>)
 801185c:	f004 f8ee 	bl	8015a3c <_init>
 8011860:	1b64      	subs	r4, r4, r5
 8011862:	10a4      	asrs	r4, r4, #2
 8011864:	2600      	movs	r6, #0
 8011866:	42a6      	cmp	r6, r4
 8011868:	d105      	bne.n	8011876 <__libc_init_array+0x2e>
 801186a:	bd70      	pop	{r4, r5, r6, pc}
 801186c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011870:	4798      	blx	r3
 8011872:	3601      	adds	r6, #1
 8011874:	e7ee      	b.n	8011854 <__libc_init_array+0xc>
 8011876:	f855 3b04 	ldr.w	r3, [r5], #4
 801187a:	4798      	blx	r3
 801187c:	3601      	adds	r6, #1
 801187e:	e7f2      	b.n	8011866 <__libc_init_array+0x1e>
 8011880:	080174a0 	.word	0x080174a0
 8011884:	080174a0 	.word	0x080174a0
 8011888:	080174a0 	.word	0x080174a0
 801188c:	080174a4 	.word	0x080174a4

08011890 <__retarget_lock_init_recursive>:
 8011890:	4770      	bx	lr

08011892 <__retarget_lock_acquire_recursive>:
 8011892:	4770      	bx	lr

08011894 <__retarget_lock_release_recursive>:
 8011894:	4770      	bx	lr

08011896 <memcpy>:
 8011896:	440a      	add	r2, r1
 8011898:	4291      	cmp	r1, r2
 801189a:	f100 33ff 	add.w	r3, r0, #4294967295
 801189e:	d100      	bne.n	80118a2 <memcpy+0xc>
 80118a0:	4770      	bx	lr
 80118a2:	b510      	push	{r4, lr}
 80118a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118ac:	4291      	cmp	r1, r2
 80118ae:	d1f9      	bne.n	80118a4 <memcpy+0xe>
 80118b0:	bd10      	pop	{r4, pc}
	...

080118b4 <nanf>:
 80118b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80118bc <nanf+0x8>
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	7fc00000 	.word	0x7fc00000

080118c0 <quorem>:
 80118c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c4:	6903      	ldr	r3, [r0, #16]
 80118c6:	690c      	ldr	r4, [r1, #16]
 80118c8:	42a3      	cmp	r3, r4
 80118ca:	4607      	mov	r7, r0
 80118cc:	db7e      	blt.n	80119cc <quorem+0x10c>
 80118ce:	3c01      	subs	r4, #1
 80118d0:	f101 0814 	add.w	r8, r1, #20
 80118d4:	00a3      	lsls	r3, r4, #2
 80118d6:	f100 0514 	add.w	r5, r0, #20
 80118da:	9300      	str	r3, [sp, #0]
 80118dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118e0:	9301      	str	r3, [sp, #4]
 80118e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80118e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118ea:	3301      	adds	r3, #1
 80118ec:	429a      	cmp	r2, r3
 80118ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80118f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80118f6:	d32e      	bcc.n	8011956 <quorem+0x96>
 80118f8:	f04f 0a00 	mov.w	sl, #0
 80118fc:	46c4      	mov	ip, r8
 80118fe:	46ae      	mov	lr, r5
 8011900:	46d3      	mov	fp, sl
 8011902:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011906:	b298      	uxth	r0, r3
 8011908:	fb06 a000 	mla	r0, r6, r0, sl
 801190c:	0c02      	lsrs	r2, r0, #16
 801190e:	0c1b      	lsrs	r3, r3, #16
 8011910:	fb06 2303 	mla	r3, r6, r3, r2
 8011914:	f8de 2000 	ldr.w	r2, [lr]
 8011918:	b280      	uxth	r0, r0
 801191a:	b292      	uxth	r2, r2
 801191c:	1a12      	subs	r2, r2, r0
 801191e:	445a      	add	r2, fp
 8011920:	f8de 0000 	ldr.w	r0, [lr]
 8011924:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011928:	b29b      	uxth	r3, r3
 801192a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801192e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011932:	b292      	uxth	r2, r2
 8011934:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011938:	45e1      	cmp	r9, ip
 801193a:	f84e 2b04 	str.w	r2, [lr], #4
 801193e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011942:	d2de      	bcs.n	8011902 <quorem+0x42>
 8011944:	9b00      	ldr	r3, [sp, #0]
 8011946:	58eb      	ldr	r3, [r5, r3]
 8011948:	b92b      	cbnz	r3, 8011956 <quorem+0x96>
 801194a:	9b01      	ldr	r3, [sp, #4]
 801194c:	3b04      	subs	r3, #4
 801194e:	429d      	cmp	r5, r3
 8011950:	461a      	mov	r2, r3
 8011952:	d32f      	bcc.n	80119b4 <quorem+0xf4>
 8011954:	613c      	str	r4, [r7, #16]
 8011956:	4638      	mov	r0, r7
 8011958:	f001 f9c2 	bl	8012ce0 <__mcmp>
 801195c:	2800      	cmp	r0, #0
 801195e:	db25      	blt.n	80119ac <quorem+0xec>
 8011960:	4629      	mov	r1, r5
 8011962:	2000      	movs	r0, #0
 8011964:	f858 2b04 	ldr.w	r2, [r8], #4
 8011968:	f8d1 c000 	ldr.w	ip, [r1]
 801196c:	fa1f fe82 	uxth.w	lr, r2
 8011970:	fa1f f38c 	uxth.w	r3, ip
 8011974:	eba3 030e 	sub.w	r3, r3, lr
 8011978:	4403      	add	r3, r0
 801197a:	0c12      	lsrs	r2, r2, #16
 801197c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011980:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011984:	b29b      	uxth	r3, r3
 8011986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801198a:	45c1      	cmp	r9, r8
 801198c:	f841 3b04 	str.w	r3, [r1], #4
 8011990:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011994:	d2e6      	bcs.n	8011964 <quorem+0xa4>
 8011996:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801199a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801199e:	b922      	cbnz	r2, 80119aa <quorem+0xea>
 80119a0:	3b04      	subs	r3, #4
 80119a2:	429d      	cmp	r5, r3
 80119a4:	461a      	mov	r2, r3
 80119a6:	d30b      	bcc.n	80119c0 <quorem+0x100>
 80119a8:	613c      	str	r4, [r7, #16]
 80119aa:	3601      	adds	r6, #1
 80119ac:	4630      	mov	r0, r6
 80119ae:	b003      	add	sp, #12
 80119b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b4:	6812      	ldr	r2, [r2, #0]
 80119b6:	3b04      	subs	r3, #4
 80119b8:	2a00      	cmp	r2, #0
 80119ba:	d1cb      	bne.n	8011954 <quorem+0x94>
 80119bc:	3c01      	subs	r4, #1
 80119be:	e7c6      	b.n	801194e <quorem+0x8e>
 80119c0:	6812      	ldr	r2, [r2, #0]
 80119c2:	3b04      	subs	r3, #4
 80119c4:	2a00      	cmp	r2, #0
 80119c6:	d1ef      	bne.n	80119a8 <quorem+0xe8>
 80119c8:	3c01      	subs	r4, #1
 80119ca:	e7ea      	b.n	80119a2 <quorem+0xe2>
 80119cc:	2000      	movs	r0, #0
 80119ce:	e7ee      	b.n	80119ae <quorem+0xee>

080119d0 <_dtoa_r>:
 80119d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d4:	69c7      	ldr	r7, [r0, #28]
 80119d6:	b099      	sub	sp, #100	@ 0x64
 80119d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80119dc:	ec55 4b10 	vmov	r4, r5, d0
 80119e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80119e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80119e4:	4683      	mov	fp, r0
 80119e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80119e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80119ea:	b97f      	cbnz	r7, 8011a0c <_dtoa_r+0x3c>
 80119ec:	2010      	movs	r0, #16
 80119ee:	f000 fdfd 	bl	80125ec <malloc>
 80119f2:	4602      	mov	r2, r0
 80119f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80119f8:	b920      	cbnz	r0, 8011a04 <_dtoa_r+0x34>
 80119fa:	4ba7      	ldr	r3, [pc, #668]	@ (8011c98 <_dtoa_r+0x2c8>)
 80119fc:	21ef      	movs	r1, #239	@ 0xef
 80119fe:	48a7      	ldr	r0, [pc, #668]	@ (8011c9c <_dtoa_r+0x2cc>)
 8011a00:	f002 fc2a 	bl	8014258 <__assert_func>
 8011a04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011a08:	6007      	str	r7, [r0, #0]
 8011a0a:	60c7      	str	r7, [r0, #12]
 8011a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011a10:	6819      	ldr	r1, [r3, #0]
 8011a12:	b159      	cbz	r1, 8011a2c <_dtoa_r+0x5c>
 8011a14:	685a      	ldr	r2, [r3, #4]
 8011a16:	604a      	str	r2, [r1, #4]
 8011a18:	2301      	movs	r3, #1
 8011a1a:	4093      	lsls	r3, r2
 8011a1c:	608b      	str	r3, [r1, #8]
 8011a1e:	4658      	mov	r0, fp
 8011a20:	f000 feda 	bl	80127d8 <_Bfree>
 8011a24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	601a      	str	r2, [r3, #0]
 8011a2c:	1e2b      	subs	r3, r5, #0
 8011a2e:	bfb9      	ittee	lt
 8011a30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011a34:	9303      	strlt	r3, [sp, #12]
 8011a36:	2300      	movge	r3, #0
 8011a38:	6033      	strge	r3, [r6, #0]
 8011a3a:	9f03      	ldr	r7, [sp, #12]
 8011a3c:	4b98      	ldr	r3, [pc, #608]	@ (8011ca0 <_dtoa_r+0x2d0>)
 8011a3e:	bfbc      	itt	lt
 8011a40:	2201      	movlt	r2, #1
 8011a42:	6032      	strlt	r2, [r6, #0]
 8011a44:	43bb      	bics	r3, r7
 8011a46:	d112      	bne.n	8011a6e <_dtoa_r+0x9e>
 8011a48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011a4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011a4e:	6013      	str	r3, [r2, #0]
 8011a50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011a54:	4323      	orrs	r3, r4
 8011a56:	f000 854d 	beq.w	80124f4 <_dtoa_r+0xb24>
 8011a5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011a5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011cb4 <_dtoa_r+0x2e4>
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	f000 854f 	beq.w	8012504 <_dtoa_r+0xb34>
 8011a66:	f10a 0303 	add.w	r3, sl, #3
 8011a6a:	f000 bd49 	b.w	8012500 <_dtoa_r+0xb30>
 8011a6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a72:	2200      	movs	r2, #0
 8011a74:	ec51 0b17 	vmov	r0, r1, d7
 8011a78:	2300      	movs	r3, #0
 8011a7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011a7e:	f7ef f82b 	bl	8000ad8 <__aeabi_dcmpeq>
 8011a82:	4680      	mov	r8, r0
 8011a84:	b158      	cbz	r0, 8011a9e <_dtoa_r+0xce>
 8011a86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011a88:	2301      	movs	r3, #1
 8011a8a:	6013      	str	r3, [r2, #0]
 8011a8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011a8e:	b113      	cbz	r3, 8011a96 <_dtoa_r+0xc6>
 8011a90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011a92:	4b84      	ldr	r3, [pc, #528]	@ (8011ca4 <_dtoa_r+0x2d4>)
 8011a94:	6013      	str	r3, [r2, #0]
 8011a96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011cb8 <_dtoa_r+0x2e8>
 8011a9a:	f000 bd33 	b.w	8012504 <_dtoa_r+0xb34>
 8011a9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011aa2:	aa16      	add	r2, sp, #88	@ 0x58
 8011aa4:	a917      	add	r1, sp, #92	@ 0x5c
 8011aa6:	4658      	mov	r0, fp
 8011aa8:	f001 fa3a 	bl	8012f20 <__d2b>
 8011aac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011ab0:	4681      	mov	r9, r0
 8011ab2:	2e00      	cmp	r6, #0
 8011ab4:	d077      	beq.n	8011ba6 <_dtoa_r+0x1d6>
 8011ab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011ab8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ac4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011ac8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011acc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	4b74      	ldr	r3, [pc, #464]	@ (8011ca8 <_dtoa_r+0x2d8>)
 8011ad6:	f7ee fbdf 	bl	8000298 <__aeabi_dsub>
 8011ada:	a369      	add	r3, pc, #420	@ (adr r3, 8011c80 <_dtoa_r+0x2b0>)
 8011adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae0:	f7ee fd92 	bl	8000608 <__aeabi_dmul>
 8011ae4:	a368      	add	r3, pc, #416	@ (adr r3, 8011c88 <_dtoa_r+0x2b8>)
 8011ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aea:	f7ee fbd7 	bl	800029c <__adddf3>
 8011aee:	4604      	mov	r4, r0
 8011af0:	4630      	mov	r0, r6
 8011af2:	460d      	mov	r5, r1
 8011af4:	f7ee fd1e 	bl	8000534 <__aeabi_i2d>
 8011af8:	a365      	add	r3, pc, #404	@ (adr r3, 8011c90 <_dtoa_r+0x2c0>)
 8011afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011afe:	f7ee fd83 	bl	8000608 <__aeabi_dmul>
 8011b02:	4602      	mov	r2, r0
 8011b04:	460b      	mov	r3, r1
 8011b06:	4620      	mov	r0, r4
 8011b08:	4629      	mov	r1, r5
 8011b0a:	f7ee fbc7 	bl	800029c <__adddf3>
 8011b0e:	4604      	mov	r4, r0
 8011b10:	460d      	mov	r5, r1
 8011b12:	f7ef f829 	bl	8000b68 <__aeabi_d2iz>
 8011b16:	2200      	movs	r2, #0
 8011b18:	4607      	mov	r7, r0
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	4629      	mov	r1, r5
 8011b20:	f7ee ffe4 	bl	8000aec <__aeabi_dcmplt>
 8011b24:	b140      	cbz	r0, 8011b38 <_dtoa_r+0x168>
 8011b26:	4638      	mov	r0, r7
 8011b28:	f7ee fd04 	bl	8000534 <__aeabi_i2d>
 8011b2c:	4622      	mov	r2, r4
 8011b2e:	462b      	mov	r3, r5
 8011b30:	f7ee ffd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8011b34:	b900      	cbnz	r0, 8011b38 <_dtoa_r+0x168>
 8011b36:	3f01      	subs	r7, #1
 8011b38:	2f16      	cmp	r7, #22
 8011b3a:	d851      	bhi.n	8011be0 <_dtoa_r+0x210>
 8011b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8011cac <_dtoa_r+0x2dc>)
 8011b3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b4a:	f7ee ffcf 	bl	8000aec <__aeabi_dcmplt>
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d048      	beq.n	8011be4 <_dtoa_r+0x214>
 8011b52:	3f01      	subs	r7, #1
 8011b54:	2300      	movs	r3, #0
 8011b56:	9312      	str	r3, [sp, #72]	@ 0x48
 8011b58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011b5a:	1b9b      	subs	r3, r3, r6
 8011b5c:	1e5a      	subs	r2, r3, #1
 8011b5e:	bf44      	itt	mi
 8011b60:	f1c3 0801 	rsbmi	r8, r3, #1
 8011b64:	2300      	movmi	r3, #0
 8011b66:	9208      	str	r2, [sp, #32]
 8011b68:	bf54      	ite	pl
 8011b6a:	f04f 0800 	movpl.w	r8, #0
 8011b6e:	9308      	strmi	r3, [sp, #32]
 8011b70:	2f00      	cmp	r7, #0
 8011b72:	db39      	blt.n	8011be8 <_dtoa_r+0x218>
 8011b74:	9b08      	ldr	r3, [sp, #32]
 8011b76:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011b78:	443b      	add	r3, r7
 8011b7a:	9308      	str	r3, [sp, #32]
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b82:	2b09      	cmp	r3, #9
 8011b84:	d864      	bhi.n	8011c50 <_dtoa_r+0x280>
 8011b86:	2b05      	cmp	r3, #5
 8011b88:	bfc4      	itt	gt
 8011b8a:	3b04      	subgt	r3, #4
 8011b8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b90:	f1a3 0302 	sub.w	r3, r3, #2
 8011b94:	bfcc      	ite	gt
 8011b96:	2400      	movgt	r4, #0
 8011b98:	2401      	movle	r4, #1
 8011b9a:	2b03      	cmp	r3, #3
 8011b9c:	d863      	bhi.n	8011c66 <_dtoa_r+0x296>
 8011b9e:	e8df f003 	tbb	[pc, r3]
 8011ba2:	372a      	.short	0x372a
 8011ba4:	5535      	.short	0x5535
 8011ba6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011baa:	441e      	add	r6, r3
 8011bac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011bb0:	2b20      	cmp	r3, #32
 8011bb2:	bfc1      	itttt	gt
 8011bb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011bb8:	409f      	lslgt	r7, r3
 8011bba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011bbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011bc2:	bfd6      	itet	le
 8011bc4:	f1c3 0320 	rsble	r3, r3, #32
 8011bc8:	ea47 0003 	orrgt.w	r0, r7, r3
 8011bcc:	fa04 f003 	lslle.w	r0, r4, r3
 8011bd0:	f7ee fca0 	bl	8000514 <__aeabi_ui2d>
 8011bd4:	2201      	movs	r2, #1
 8011bd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011bda:	3e01      	subs	r6, #1
 8011bdc:	9214      	str	r2, [sp, #80]	@ 0x50
 8011bde:	e777      	b.n	8011ad0 <_dtoa_r+0x100>
 8011be0:	2301      	movs	r3, #1
 8011be2:	e7b8      	b.n	8011b56 <_dtoa_r+0x186>
 8011be4:	9012      	str	r0, [sp, #72]	@ 0x48
 8011be6:	e7b7      	b.n	8011b58 <_dtoa_r+0x188>
 8011be8:	427b      	negs	r3, r7
 8011bea:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bec:	2300      	movs	r3, #0
 8011bee:	eba8 0807 	sub.w	r8, r8, r7
 8011bf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011bf4:	e7c4      	b.n	8011b80 <_dtoa_r+0x1b0>
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	dc35      	bgt.n	8011c6c <_dtoa_r+0x29c>
 8011c00:	2301      	movs	r3, #1
 8011c02:	9300      	str	r3, [sp, #0]
 8011c04:	9307      	str	r3, [sp, #28]
 8011c06:	461a      	mov	r2, r3
 8011c08:	920e      	str	r2, [sp, #56]	@ 0x38
 8011c0a:	e00b      	b.n	8011c24 <_dtoa_r+0x254>
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	e7f3      	b.n	8011bf8 <_dtoa_r+0x228>
 8011c10:	2300      	movs	r3, #0
 8011c12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c16:	18fb      	adds	r3, r7, r3
 8011c18:	9300      	str	r3, [sp, #0]
 8011c1a:	3301      	adds	r3, #1
 8011c1c:	2b01      	cmp	r3, #1
 8011c1e:	9307      	str	r3, [sp, #28]
 8011c20:	bfb8      	it	lt
 8011c22:	2301      	movlt	r3, #1
 8011c24:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011c28:	2100      	movs	r1, #0
 8011c2a:	2204      	movs	r2, #4
 8011c2c:	f102 0514 	add.w	r5, r2, #20
 8011c30:	429d      	cmp	r5, r3
 8011c32:	d91f      	bls.n	8011c74 <_dtoa_r+0x2a4>
 8011c34:	6041      	str	r1, [r0, #4]
 8011c36:	4658      	mov	r0, fp
 8011c38:	f000 fd8e 	bl	8012758 <_Balloc>
 8011c3c:	4682      	mov	sl, r0
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	d13c      	bne.n	8011cbc <_dtoa_r+0x2ec>
 8011c42:	4b1b      	ldr	r3, [pc, #108]	@ (8011cb0 <_dtoa_r+0x2e0>)
 8011c44:	4602      	mov	r2, r0
 8011c46:	f240 11af 	movw	r1, #431	@ 0x1af
 8011c4a:	e6d8      	b.n	80119fe <_dtoa_r+0x2e>
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e7e0      	b.n	8011c12 <_dtoa_r+0x242>
 8011c50:	2401      	movs	r4, #1
 8011c52:	2300      	movs	r3, #0
 8011c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011c58:	f04f 33ff 	mov.w	r3, #4294967295
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	9307      	str	r3, [sp, #28]
 8011c60:	2200      	movs	r2, #0
 8011c62:	2312      	movs	r3, #18
 8011c64:	e7d0      	b.n	8011c08 <_dtoa_r+0x238>
 8011c66:	2301      	movs	r3, #1
 8011c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c6a:	e7f5      	b.n	8011c58 <_dtoa_r+0x288>
 8011c6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c6e:	9300      	str	r3, [sp, #0]
 8011c70:	9307      	str	r3, [sp, #28]
 8011c72:	e7d7      	b.n	8011c24 <_dtoa_r+0x254>
 8011c74:	3101      	adds	r1, #1
 8011c76:	0052      	lsls	r2, r2, #1
 8011c78:	e7d8      	b.n	8011c2c <_dtoa_r+0x25c>
 8011c7a:	bf00      	nop
 8011c7c:	f3af 8000 	nop.w
 8011c80:	636f4361 	.word	0x636f4361
 8011c84:	3fd287a7 	.word	0x3fd287a7
 8011c88:	8b60c8b3 	.word	0x8b60c8b3
 8011c8c:	3fc68a28 	.word	0x3fc68a28
 8011c90:	509f79fb 	.word	0x509f79fb
 8011c94:	3fd34413 	.word	0x3fd34413
 8011c98:	0801703e 	.word	0x0801703e
 8011c9c:	08017055 	.word	0x08017055
 8011ca0:	7ff00000 	.word	0x7ff00000
 8011ca4:	08017009 	.word	0x08017009
 8011ca8:	3ff80000 	.word	0x3ff80000
 8011cac:	08017150 	.word	0x08017150
 8011cb0:	080170ad 	.word	0x080170ad
 8011cb4:	0801703a 	.word	0x0801703a
 8011cb8:	08017008 	.word	0x08017008
 8011cbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011cc0:	6018      	str	r0, [r3, #0]
 8011cc2:	9b07      	ldr	r3, [sp, #28]
 8011cc4:	2b0e      	cmp	r3, #14
 8011cc6:	f200 80a4 	bhi.w	8011e12 <_dtoa_r+0x442>
 8011cca:	2c00      	cmp	r4, #0
 8011ccc:	f000 80a1 	beq.w	8011e12 <_dtoa_r+0x442>
 8011cd0:	2f00      	cmp	r7, #0
 8011cd2:	dd33      	ble.n	8011d3c <_dtoa_r+0x36c>
 8011cd4:	4bad      	ldr	r3, [pc, #692]	@ (8011f8c <_dtoa_r+0x5bc>)
 8011cd6:	f007 020f 	and.w	r2, r7, #15
 8011cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011cde:	ed93 7b00 	vldr	d7, [r3]
 8011ce2:	05f8      	lsls	r0, r7, #23
 8011ce4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011ce8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011cec:	d516      	bpl.n	8011d1c <_dtoa_r+0x34c>
 8011cee:	4ba8      	ldr	r3, [pc, #672]	@ (8011f90 <_dtoa_r+0x5c0>)
 8011cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011cf8:	f7ee fdb0 	bl	800085c <__aeabi_ddiv>
 8011cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d00:	f004 040f 	and.w	r4, r4, #15
 8011d04:	2603      	movs	r6, #3
 8011d06:	4da2      	ldr	r5, [pc, #648]	@ (8011f90 <_dtoa_r+0x5c0>)
 8011d08:	b954      	cbnz	r4, 8011d20 <_dtoa_r+0x350>
 8011d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d12:	f7ee fda3 	bl	800085c <__aeabi_ddiv>
 8011d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d1a:	e028      	b.n	8011d6e <_dtoa_r+0x39e>
 8011d1c:	2602      	movs	r6, #2
 8011d1e:	e7f2      	b.n	8011d06 <_dtoa_r+0x336>
 8011d20:	07e1      	lsls	r1, r4, #31
 8011d22:	d508      	bpl.n	8011d36 <_dtoa_r+0x366>
 8011d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011d28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d2c:	f7ee fc6c 	bl	8000608 <__aeabi_dmul>
 8011d30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d34:	3601      	adds	r6, #1
 8011d36:	1064      	asrs	r4, r4, #1
 8011d38:	3508      	adds	r5, #8
 8011d3a:	e7e5      	b.n	8011d08 <_dtoa_r+0x338>
 8011d3c:	f000 80d2 	beq.w	8011ee4 <_dtoa_r+0x514>
 8011d40:	427c      	negs	r4, r7
 8011d42:	4b92      	ldr	r3, [pc, #584]	@ (8011f8c <_dtoa_r+0x5bc>)
 8011d44:	4d92      	ldr	r5, [pc, #584]	@ (8011f90 <_dtoa_r+0x5c0>)
 8011d46:	f004 020f 	and.w	r2, r4, #15
 8011d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011d56:	f7ee fc57 	bl	8000608 <__aeabi_dmul>
 8011d5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d5e:	1124      	asrs	r4, r4, #4
 8011d60:	2300      	movs	r3, #0
 8011d62:	2602      	movs	r6, #2
 8011d64:	2c00      	cmp	r4, #0
 8011d66:	f040 80b2 	bne.w	8011ece <_dtoa_r+0x4fe>
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d1d3      	bne.n	8011d16 <_dtoa_r+0x346>
 8011d6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011d70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	f000 80b7 	beq.w	8011ee8 <_dtoa_r+0x518>
 8011d7a:	4b86      	ldr	r3, [pc, #536]	@ (8011f94 <_dtoa_r+0x5c4>)
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	4620      	mov	r0, r4
 8011d80:	4629      	mov	r1, r5
 8011d82:	f7ee feb3 	bl	8000aec <__aeabi_dcmplt>
 8011d86:	2800      	cmp	r0, #0
 8011d88:	f000 80ae 	beq.w	8011ee8 <_dtoa_r+0x518>
 8011d8c:	9b07      	ldr	r3, [sp, #28]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f000 80aa 	beq.w	8011ee8 <_dtoa_r+0x518>
 8011d94:	9b00      	ldr	r3, [sp, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	dd37      	ble.n	8011e0a <_dtoa_r+0x43a>
 8011d9a:	1e7b      	subs	r3, r7, #1
 8011d9c:	9304      	str	r3, [sp, #16]
 8011d9e:	4620      	mov	r0, r4
 8011da0:	4b7d      	ldr	r3, [pc, #500]	@ (8011f98 <_dtoa_r+0x5c8>)
 8011da2:	2200      	movs	r2, #0
 8011da4:	4629      	mov	r1, r5
 8011da6:	f7ee fc2f 	bl	8000608 <__aeabi_dmul>
 8011daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011dae:	9c00      	ldr	r4, [sp, #0]
 8011db0:	3601      	adds	r6, #1
 8011db2:	4630      	mov	r0, r6
 8011db4:	f7ee fbbe 	bl	8000534 <__aeabi_i2d>
 8011db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011dbc:	f7ee fc24 	bl	8000608 <__aeabi_dmul>
 8011dc0:	4b76      	ldr	r3, [pc, #472]	@ (8011f9c <_dtoa_r+0x5cc>)
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	f7ee fa6a 	bl	800029c <__adddf3>
 8011dc8:	4605      	mov	r5, r0
 8011dca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011dce:	2c00      	cmp	r4, #0
 8011dd0:	f040 808d 	bne.w	8011eee <_dtoa_r+0x51e>
 8011dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dd8:	4b71      	ldr	r3, [pc, #452]	@ (8011fa0 <_dtoa_r+0x5d0>)
 8011dda:	2200      	movs	r2, #0
 8011ddc:	f7ee fa5c 	bl	8000298 <__aeabi_dsub>
 8011de0:	4602      	mov	r2, r0
 8011de2:	460b      	mov	r3, r1
 8011de4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011de8:	462a      	mov	r2, r5
 8011dea:	4633      	mov	r3, r6
 8011dec:	f7ee fe9c 	bl	8000b28 <__aeabi_dcmpgt>
 8011df0:	2800      	cmp	r0, #0
 8011df2:	f040 828b 	bne.w	801230c <_dtoa_r+0x93c>
 8011df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dfa:	462a      	mov	r2, r5
 8011dfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011e00:	f7ee fe74 	bl	8000aec <__aeabi_dcmplt>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	f040 8128 	bne.w	801205a <_dtoa_r+0x68a>
 8011e0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011e0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011e12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	f2c0 815a 	blt.w	80120ce <_dtoa_r+0x6fe>
 8011e1a:	2f0e      	cmp	r7, #14
 8011e1c:	f300 8157 	bgt.w	80120ce <_dtoa_r+0x6fe>
 8011e20:	4b5a      	ldr	r3, [pc, #360]	@ (8011f8c <_dtoa_r+0x5bc>)
 8011e22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011e26:	ed93 7b00 	vldr	d7, [r3]
 8011e2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	ed8d 7b00 	vstr	d7, [sp]
 8011e32:	da03      	bge.n	8011e3c <_dtoa_r+0x46c>
 8011e34:	9b07      	ldr	r3, [sp, #28]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	f340 8101 	ble.w	801203e <_dtoa_r+0x66e>
 8011e3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011e40:	4656      	mov	r6, sl
 8011e42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e46:	4620      	mov	r0, r4
 8011e48:	4629      	mov	r1, r5
 8011e4a:	f7ee fd07 	bl	800085c <__aeabi_ddiv>
 8011e4e:	f7ee fe8b 	bl	8000b68 <__aeabi_d2iz>
 8011e52:	4680      	mov	r8, r0
 8011e54:	f7ee fb6e 	bl	8000534 <__aeabi_i2d>
 8011e58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e5c:	f7ee fbd4 	bl	8000608 <__aeabi_dmul>
 8011e60:	4602      	mov	r2, r0
 8011e62:	460b      	mov	r3, r1
 8011e64:	4620      	mov	r0, r4
 8011e66:	4629      	mov	r1, r5
 8011e68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011e6c:	f7ee fa14 	bl	8000298 <__aeabi_dsub>
 8011e70:	f806 4b01 	strb.w	r4, [r6], #1
 8011e74:	9d07      	ldr	r5, [sp, #28]
 8011e76:	eba6 040a 	sub.w	r4, r6, sl
 8011e7a:	42a5      	cmp	r5, r4
 8011e7c:	4602      	mov	r2, r0
 8011e7e:	460b      	mov	r3, r1
 8011e80:	f040 8117 	bne.w	80120b2 <_dtoa_r+0x6e2>
 8011e84:	f7ee fa0a 	bl	800029c <__adddf3>
 8011e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e8c:	4604      	mov	r4, r0
 8011e8e:	460d      	mov	r5, r1
 8011e90:	f7ee fe4a 	bl	8000b28 <__aeabi_dcmpgt>
 8011e94:	2800      	cmp	r0, #0
 8011e96:	f040 80f9 	bne.w	801208c <_dtoa_r+0x6bc>
 8011e9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	4629      	mov	r1, r5
 8011ea2:	f7ee fe19 	bl	8000ad8 <__aeabi_dcmpeq>
 8011ea6:	b118      	cbz	r0, 8011eb0 <_dtoa_r+0x4e0>
 8011ea8:	f018 0f01 	tst.w	r8, #1
 8011eac:	f040 80ee 	bne.w	801208c <_dtoa_r+0x6bc>
 8011eb0:	4649      	mov	r1, r9
 8011eb2:	4658      	mov	r0, fp
 8011eb4:	f000 fc90 	bl	80127d8 <_Bfree>
 8011eb8:	2300      	movs	r3, #0
 8011eba:	7033      	strb	r3, [r6, #0]
 8011ebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011ebe:	3701      	adds	r7, #1
 8011ec0:	601f      	str	r7, [r3, #0]
 8011ec2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f000 831d 	beq.w	8012504 <_dtoa_r+0xb34>
 8011eca:	601e      	str	r6, [r3, #0]
 8011ecc:	e31a      	b.n	8012504 <_dtoa_r+0xb34>
 8011ece:	07e2      	lsls	r2, r4, #31
 8011ed0:	d505      	bpl.n	8011ede <_dtoa_r+0x50e>
 8011ed2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011ed6:	f7ee fb97 	bl	8000608 <__aeabi_dmul>
 8011eda:	3601      	adds	r6, #1
 8011edc:	2301      	movs	r3, #1
 8011ede:	1064      	asrs	r4, r4, #1
 8011ee0:	3508      	adds	r5, #8
 8011ee2:	e73f      	b.n	8011d64 <_dtoa_r+0x394>
 8011ee4:	2602      	movs	r6, #2
 8011ee6:	e742      	b.n	8011d6e <_dtoa_r+0x39e>
 8011ee8:	9c07      	ldr	r4, [sp, #28]
 8011eea:	9704      	str	r7, [sp, #16]
 8011eec:	e761      	b.n	8011db2 <_dtoa_r+0x3e2>
 8011eee:	4b27      	ldr	r3, [pc, #156]	@ (8011f8c <_dtoa_r+0x5bc>)
 8011ef0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011ef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011ef6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011efa:	4454      	add	r4, sl
 8011efc:	2900      	cmp	r1, #0
 8011efe:	d053      	beq.n	8011fa8 <_dtoa_r+0x5d8>
 8011f00:	4928      	ldr	r1, [pc, #160]	@ (8011fa4 <_dtoa_r+0x5d4>)
 8011f02:	2000      	movs	r0, #0
 8011f04:	f7ee fcaa 	bl	800085c <__aeabi_ddiv>
 8011f08:	4633      	mov	r3, r6
 8011f0a:	462a      	mov	r2, r5
 8011f0c:	f7ee f9c4 	bl	8000298 <__aeabi_dsub>
 8011f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011f14:	4656      	mov	r6, sl
 8011f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f1a:	f7ee fe25 	bl	8000b68 <__aeabi_d2iz>
 8011f1e:	4605      	mov	r5, r0
 8011f20:	f7ee fb08 	bl	8000534 <__aeabi_i2d>
 8011f24:	4602      	mov	r2, r0
 8011f26:	460b      	mov	r3, r1
 8011f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f2c:	f7ee f9b4 	bl	8000298 <__aeabi_dsub>
 8011f30:	3530      	adds	r5, #48	@ 0x30
 8011f32:	4602      	mov	r2, r0
 8011f34:	460b      	mov	r3, r1
 8011f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011f3a:	f806 5b01 	strb.w	r5, [r6], #1
 8011f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011f42:	f7ee fdd3 	bl	8000aec <__aeabi_dcmplt>
 8011f46:	2800      	cmp	r0, #0
 8011f48:	d171      	bne.n	801202e <_dtoa_r+0x65e>
 8011f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f4e:	4911      	ldr	r1, [pc, #68]	@ (8011f94 <_dtoa_r+0x5c4>)
 8011f50:	2000      	movs	r0, #0
 8011f52:	f7ee f9a1 	bl	8000298 <__aeabi_dsub>
 8011f56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011f5a:	f7ee fdc7 	bl	8000aec <__aeabi_dcmplt>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	f040 8095 	bne.w	801208e <_dtoa_r+0x6be>
 8011f64:	42a6      	cmp	r6, r4
 8011f66:	f43f af50 	beq.w	8011e0a <_dtoa_r+0x43a>
 8011f6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8011f98 <_dtoa_r+0x5c8>)
 8011f70:	2200      	movs	r2, #0
 8011f72:	f7ee fb49 	bl	8000608 <__aeabi_dmul>
 8011f76:	4b08      	ldr	r3, [pc, #32]	@ (8011f98 <_dtoa_r+0x5c8>)
 8011f78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f82:	f7ee fb41 	bl	8000608 <__aeabi_dmul>
 8011f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f8a:	e7c4      	b.n	8011f16 <_dtoa_r+0x546>
 8011f8c:	08017150 	.word	0x08017150
 8011f90:	08017128 	.word	0x08017128
 8011f94:	3ff00000 	.word	0x3ff00000
 8011f98:	40240000 	.word	0x40240000
 8011f9c:	401c0000 	.word	0x401c0000
 8011fa0:	40140000 	.word	0x40140000
 8011fa4:	3fe00000 	.word	0x3fe00000
 8011fa8:	4631      	mov	r1, r6
 8011faa:	4628      	mov	r0, r5
 8011fac:	f7ee fb2c 	bl	8000608 <__aeabi_dmul>
 8011fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011fb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8011fb6:	4656      	mov	r6, sl
 8011fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fbc:	f7ee fdd4 	bl	8000b68 <__aeabi_d2iz>
 8011fc0:	4605      	mov	r5, r0
 8011fc2:	f7ee fab7 	bl	8000534 <__aeabi_i2d>
 8011fc6:	4602      	mov	r2, r0
 8011fc8:	460b      	mov	r3, r1
 8011fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fce:	f7ee f963 	bl	8000298 <__aeabi_dsub>
 8011fd2:	3530      	adds	r5, #48	@ 0x30
 8011fd4:	f806 5b01 	strb.w	r5, [r6], #1
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	42a6      	cmp	r6, r4
 8011fde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011fe2:	f04f 0200 	mov.w	r2, #0
 8011fe6:	d124      	bne.n	8012032 <_dtoa_r+0x662>
 8011fe8:	4bac      	ldr	r3, [pc, #688]	@ (801229c <_dtoa_r+0x8cc>)
 8011fea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011fee:	f7ee f955 	bl	800029c <__adddf3>
 8011ff2:	4602      	mov	r2, r0
 8011ff4:	460b      	mov	r3, r1
 8011ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ffa:	f7ee fd95 	bl	8000b28 <__aeabi_dcmpgt>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d145      	bne.n	801208e <_dtoa_r+0x6be>
 8012002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012006:	49a5      	ldr	r1, [pc, #660]	@ (801229c <_dtoa_r+0x8cc>)
 8012008:	2000      	movs	r0, #0
 801200a:	f7ee f945 	bl	8000298 <__aeabi_dsub>
 801200e:	4602      	mov	r2, r0
 8012010:	460b      	mov	r3, r1
 8012012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012016:	f7ee fd69 	bl	8000aec <__aeabi_dcmplt>
 801201a:	2800      	cmp	r0, #0
 801201c:	f43f aef5 	beq.w	8011e0a <_dtoa_r+0x43a>
 8012020:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012022:	1e73      	subs	r3, r6, #1
 8012024:	9315      	str	r3, [sp, #84]	@ 0x54
 8012026:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801202a:	2b30      	cmp	r3, #48	@ 0x30
 801202c:	d0f8      	beq.n	8012020 <_dtoa_r+0x650>
 801202e:	9f04      	ldr	r7, [sp, #16]
 8012030:	e73e      	b.n	8011eb0 <_dtoa_r+0x4e0>
 8012032:	4b9b      	ldr	r3, [pc, #620]	@ (80122a0 <_dtoa_r+0x8d0>)
 8012034:	f7ee fae8 	bl	8000608 <__aeabi_dmul>
 8012038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801203c:	e7bc      	b.n	8011fb8 <_dtoa_r+0x5e8>
 801203e:	d10c      	bne.n	801205a <_dtoa_r+0x68a>
 8012040:	4b98      	ldr	r3, [pc, #608]	@ (80122a4 <_dtoa_r+0x8d4>)
 8012042:	2200      	movs	r2, #0
 8012044:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012048:	f7ee fade 	bl	8000608 <__aeabi_dmul>
 801204c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012050:	f7ee fd60 	bl	8000b14 <__aeabi_dcmpge>
 8012054:	2800      	cmp	r0, #0
 8012056:	f000 8157 	beq.w	8012308 <_dtoa_r+0x938>
 801205a:	2400      	movs	r4, #0
 801205c:	4625      	mov	r5, r4
 801205e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012060:	43db      	mvns	r3, r3
 8012062:	9304      	str	r3, [sp, #16]
 8012064:	4656      	mov	r6, sl
 8012066:	2700      	movs	r7, #0
 8012068:	4621      	mov	r1, r4
 801206a:	4658      	mov	r0, fp
 801206c:	f000 fbb4 	bl	80127d8 <_Bfree>
 8012070:	2d00      	cmp	r5, #0
 8012072:	d0dc      	beq.n	801202e <_dtoa_r+0x65e>
 8012074:	b12f      	cbz	r7, 8012082 <_dtoa_r+0x6b2>
 8012076:	42af      	cmp	r7, r5
 8012078:	d003      	beq.n	8012082 <_dtoa_r+0x6b2>
 801207a:	4639      	mov	r1, r7
 801207c:	4658      	mov	r0, fp
 801207e:	f000 fbab 	bl	80127d8 <_Bfree>
 8012082:	4629      	mov	r1, r5
 8012084:	4658      	mov	r0, fp
 8012086:	f000 fba7 	bl	80127d8 <_Bfree>
 801208a:	e7d0      	b.n	801202e <_dtoa_r+0x65e>
 801208c:	9704      	str	r7, [sp, #16]
 801208e:	4633      	mov	r3, r6
 8012090:	461e      	mov	r6, r3
 8012092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012096:	2a39      	cmp	r2, #57	@ 0x39
 8012098:	d107      	bne.n	80120aa <_dtoa_r+0x6da>
 801209a:	459a      	cmp	sl, r3
 801209c:	d1f8      	bne.n	8012090 <_dtoa_r+0x6c0>
 801209e:	9a04      	ldr	r2, [sp, #16]
 80120a0:	3201      	adds	r2, #1
 80120a2:	9204      	str	r2, [sp, #16]
 80120a4:	2230      	movs	r2, #48	@ 0x30
 80120a6:	f88a 2000 	strb.w	r2, [sl]
 80120aa:	781a      	ldrb	r2, [r3, #0]
 80120ac:	3201      	adds	r2, #1
 80120ae:	701a      	strb	r2, [r3, #0]
 80120b0:	e7bd      	b.n	801202e <_dtoa_r+0x65e>
 80120b2:	4b7b      	ldr	r3, [pc, #492]	@ (80122a0 <_dtoa_r+0x8d0>)
 80120b4:	2200      	movs	r2, #0
 80120b6:	f7ee faa7 	bl	8000608 <__aeabi_dmul>
 80120ba:	2200      	movs	r2, #0
 80120bc:	2300      	movs	r3, #0
 80120be:	4604      	mov	r4, r0
 80120c0:	460d      	mov	r5, r1
 80120c2:	f7ee fd09 	bl	8000ad8 <__aeabi_dcmpeq>
 80120c6:	2800      	cmp	r0, #0
 80120c8:	f43f aebb 	beq.w	8011e42 <_dtoa_r+0x472>
 80120cc:	e6f0      	b.n	8011eb0 <_dtoa_r+0x4e0>
 80120ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80120d0:	2a00      	cmp	r2, #0
 80120d2:	f000 80db 	beq.w	801228c <_dtoa_r+0x8bc>
 80120d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120d8:	2a01      	cmp	r2, #1
 80120da:	f300 80bf 	bgt.w	801225c <_dtoa_r+0x88c>
 80120de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80120e0:	2a00      	cmp	r2, #0
 80120e2:	f000 80b7 	beq.w	8012254 <_dtoa_r+0x884>
 80120e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80120ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80120ec:	4646      	mov	r6, r8
 80120ee:	9a08      	ldr	r2, [sp, #32]
 80120f0:	2101      	movs	r1, #1
 80120f2:	441a      	add	r2, r3
 80120f4:	4658      	mov	r0, fp
 80120f6:	4498      	add	r8, r3
 80120f8:	9208      	str	r2, [sp, #32]
 80120fa:	f000 fc6b 	bl	80129d4 <__i2b>
 80120fe:	4605      	mov	r5, r0
 8012100:	b15e      	cbz	r6, 801211a <_dtoa_r+0x74a>
 8012102:	9b08      	ldr	r3, [sp, #32]
 8012104:	2b00      	cmp	r3, #0
 8012106:	dd08      	ble.n	801211a <_dtoa_r+0x74a>
 8012108:	42b3      	cmp	r3, r6
 801210a:	9a08      	ldr	r2, [sp, #32]
 801210c:	bfa8      	it	ge
 801210e:	4633      	movge	r3, r6
 8012110:	eba8 0803 	sub.w	r8, r8, r3
 8012114:	1af6      	subs	r6, r6, r3
 8012116:	1ad3      	subs	r3, r2, r3
 8012118:	9308      	str	r3, [sp, #32]
 801211a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801211c:	b1f3      	cbz	r3, 801215c <_dtoa_r+0x78c>
 801211e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 80b7 	beq.w	8012294 <_dtoa_r+0x8c4>
 8012126:	b18c      	cbz	r4, 801214c <_dtoa_r+0x77c>
 8012128:	4629      	mov	r1, r5
 801212a:	4622      	mov	r2, r4
 801212c:	4658      	mov	r0, fp
 801212e:	f000 fd11 	bl	8012b54 <__pow5mult>
 8012132:	464a      	mov	r2, r9
 8012134:	4601      	mov	r1, r0
 8012136:	4605      	mov	r5, r0
 8012138:	4658      	mov	r0, fp
 801213a:	f000 fc61 	bl	8012a00 <__multiply>
 801213e:	4649      	mov	r1, r9
 8012140:	9004      	str	r0, [sp, #16]
 8012142:	4658      	mov	r0, fp
 8012144:	f000 fb48 	bl	80127d8 <_Bfree>
 8012148:	9b04      	ldr	r3, [sp, #16]
 801214a:	4699      	mov	r9, r3
 801214c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801214e:	1b1a      	subs	r2, r3, r4
 8012150:	d004      	beq.n	801215c <_dtoa_r+0x78c>
 8012152:	4649      	mov	r1, r9
 8012154:	4658      	mov	r0, fp
 8012156:	f000 fcfd 	bl	8012b54 <__pow5mult>
 801215a:	4681      	mov	r9, r0
 801215c:	2101      	movs	r1, #1
 801215e:	4658      	mov	r0, fp
 8012160:	f000 fc38 	bl	80129d4 <__i2b>
 8012164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012166:	4604      	mov	r4, r0
 8012168:	2b00      	cmp	r3, #0
 801216a:	f000 81cf 	beq.w	801250c <_dtoa_r+0xb3c>
 801216e:	461a      	mov	r2, r3
 8012170:	4601      	mov	r1, r0
 8012172:	4658      	mov	r0, fp
 8012174:	f000 fcee 	bl	8012b54 <__pow5mult>
 8012178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801217a:	2b01      	cmp	r3, #1
 801217c:	4604      	mov	r4, r0
 801217e:	f300 8095 	bgt.w	80122ac <_dtoa_r+0x8dc>
 8012182:	9b02      	ldr	r3, [sp, #8]
 8012184:	2b00      	cmp	r3, #0
 8012186:	f040 8087 	bne.w	8012298 <_dtoa_r+0x8c8>
 801218a:	9b03      	ldr	r3, [sp, #12]
 801218c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012190:	2b00      	cmp	r3, #0
 8012192:	f040 8089 	bne.w	80122a8 <_dtoa_r+0x8d8>
 8012196:	9b03      	ldr	r3, [sp, #12]
 8012198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801219c:	0d1b      	lsrs	r3, r3, #20
 801219e:	051b      	lsls	r3, r3, #20
 80121a0:	b12b      	cbz	r3, 80121ae <_dtoa_r+0x7de>
 80121a2:	9b08      	ldr	r3, [sp, #32]
 80121a4:	3301      	adds	r3, #1
 80121a6:	9308      	str	r3, [sp, #32]
 80121a8:	f108 0801 	add.w	r8, r8, #1
 80121ac:	2301      	movs	r3, #1
 80121ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80121b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	f000 81b0 	beq.w	8012518 <_dtoa_r+0xb48>
 80121b8:	6923      	ldr	r3, [r4, #16]
 80121ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80121be:	6918      	ldr	r0, [r3, #16]
 80121c0:	f000 fbbc 	bl	801293c <__hi0bits>
 80121c4:	f1c0 0020 	rsb	r0, r0, #32
 80121c8:	9b08      	ldr	r3, [sp, #32]
 80121ca:	4418      	add	r0, r3
 80121cc:	f010 001f 	ands.w	r0, r0, #31
 80121d0:	d077      	beq.n	80122c2 <_dtoa_r+0x8f2>
 80121d2:	f1c0 0320 	rsb	r3, r0, #32
 80121d6:	2b04      	cmp	r3, #4
 80121d8:	dd6b      	ble.n	80122b2 <_dtoa_r+0x8e2>
 80121da:	9b08      	ldr	r3, [sp, #32]
 80121dc:	f1c0 001c 	rsb	r0, r0, #28
 80121e0:	4403      	add	r3, r0
 80121e2:	4480      	add	r8, r0
 80121e4:	4406      	add	r6, r0
 80121e6:	9308      	str	r3, [sp, #32]
 80121e8:	f1b8 0f00 	cmp.w	r8, #0
 80121ec:	dd05      	ble.n	80121fa <_dtoa_r+0x82a>
 80121ee:	4649      	mov	r1, r9
 80121f0:	4642      	mov	r2, r8
 80121f2:	4658      	mov	r0, fp
 80121f4:	f000 fd08 	bl	8012c08 <__lshift>
 80121f8:	4681      	mov	r9, r0
 80121fa:	9b08      	ldr	r3, [sp, #32]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	dd05      	ble.n	801220c <_dtoa_r+0x83c>
 8012200:	4621      	mov	r1, r4
 8012202:	461a      	mov	r2, r3
 8012204:	4658      	mov	r0, fp
 8012206:	f000 fcff 	bl	8012c08 <__lshift>
 801220a:	4604      	mov	r4, r0
 801220c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801220e:	2b00      	cmp	r3, #0
 8012210:	d059      	beq.n	80122c6 <_dtoa_r+0x8f6>
 8012212:	4621      	mov	r1, r4
 8012214:	4648      	mov	r0, r9
 8012216:	f000 fd63 	bl	8012ce0 <__mcmp>
 801221a:	2800      	cmp	r0, #0
 801221c:	da53      	bge.n	80122c6 <_dtoa_r+0x8f6>
 801221e:	1e7b      	subs	r3, r7, #1
 8012220:	9304      	str	r3, [sp, #16]
 8012222:	4649      	mov	r1, r9
 8012224:	2300      	movs	r3, #0
 8012226:	220a      	movs	r2, #10
 8012228:	4658      	mov	r0, fp
 801222a:	f000 faf7 	bl	801281c <__multadd>
 801222e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012230:	4681      	mov	r9, r0
 8012232:	2b00      	cmp	r3, #0
 8012234:	f000 8172 	beq.w	801251c <_dtoa_r+0xb4c>
 8012238:	2300      	movs	r3, #0
 801223a:	4629      	mov	r1, r5
 801223c:	220a      	movs	r2, #10
 801223e:	4658      	mov	r0, fp
 8012240:	f000 faec 	bl	801281c <__multadd>
 8012244:	9b00      	ldr	r3, [sp, #0]
 8012246:	2b00      	cmp	r3, #0
 8012248:	4605      	mov	r5, r0
 801224a:	dc67      	bgt.n	801231c <_dtoa_r+0x94c>
 801224c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801224e:	2b02      	cmp	r3, #2
 8012250:	dc41      	bgt.n	80122d6 <_dtoa_r+0x906>
 8012252:	e063      	b.n	801231c <_dtoa_r+0x94c>
 8012254:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012256:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801225a:	e746      	b.n	80120ea <_dtoa_r+0x71a>
 801225c:	9b07      	ldr	r3, [sp, #28]
 801225e:	1e5c      	subs	r4, r3, #1
 8012260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012262:	42a3      	cmp	r3, r4
 8012264:	bfbf      	itttt	lt
 8012266:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012268:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801226a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801226c:	1ae3      	sublt	r3, r4, r3
 801226e:	bfb4      	ite	lt
 8012270:	18d2      	addlt	r2, r2, r3
 8012272:	1b1c      	subge	r4, r3, r4
 8012274:	9b07      	ldr	r3, [sp, #28]
 8012276:	bfbc      	itt	lt
 8012278:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801227a:	2400      	movlt	r4, #0
 801227c:	2b00      	cmp	r3, #0
 801227e:	bfb5      	itete	lt
 8012280:	eba8 0603 	sublt.w	r6, r8, r3
 8012284:	9b07      	ldrge	r3, [sp, #28]
 8012286:	2300      	movlt	r3, #0
 8012288:	4646      	movge	r6, r8
 801228a:	e730      	b.n	80120ee <_dtoa_r+0x71e>
 801228c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801228e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012290:	4646      	mov	r6, r8
 8012292:	e735      	b.n	8012100 <_dtoa_r+0x730>
 8012294:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012296:	e75c      	b.n	8012152 <_dtoa_r+0x782>
 8012298:	2300      	movs	r3, #0
 801229a:	e788      	b.n	80121ae <_dtoa_r+0x7de>
 801229c:	3fe00000 	.word	0x3fe00000
 80122a0:	40240000 	.word	0x40240000
 80122a4:	40140000 	.word	0x40140000
 80122a8:	9b02      	ldr	r3, [sp, #8]
 80122aa:	e780      	b.n	80121ae <_dtoa_r+0x7de>
 80122ac:	2300      	movs	r3, #0
 80122ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80122b0:	e782      	b.n	80121b8 <_dtoa_r+0x7e8>
 80122b2:	d099      	beq.n	80121e8 <_dtoa_r+0x818>
 80122b4:	9a08      	ldr	r2, [sp, #32]
 80122b6:	331c      	adds	r3, #28
 80122b8:	441a      	add	r2, r3
 80122ba:	4498      	add	r8, r3
 80122bc:	441e      	add	r6, r3
 80122be:	9208      	str	r2, [sp, #32]
 80122c0:	e792      	b.n	80121e8 <_dtoa_r+0x818>
 80122c2:	4603      	mov	r3, r0
 80122c4:	e7f6      	b.n	80122b4 <_dtoa_r+0x8e4>
 80122c6:	9b07      	ldr	r3, [sp, #28]
 80122c8:	9704      	str	r7, [sp, #16]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	dc20      	bgt.n	8012310 <_dtoa_r+0x940>
 80122ce:	9300      	str	r3, [sp, #0]
 80122d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122d2:	2b02      	cmp	r3, #2
 80122d4:	dd1e      	ble.n	8012314 <_dtoa_r+0x944>
 80122d6:	9b00      	ldr	r3, [sp, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	f47f aec0 	bne.w	801205e <_dtoa_r+0x68e>
 80122de:	4621      	mov	r1, r4
 80122e0:	2205      	movs	r2, #5
 80122e2:	4658      	mov	r0, fp
 80122e4:	f000 fa9a 	bl	801281c <__multadd>
 80122e8:	4601      	mov	r1, r0
 80122ea:	4604      	mov	r4, r0
 80122ec:	4648      	mov	r0, r9
 80122ee:	f000 fcf7 	bl	8012ce0 <__mcmp>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	f77f aeb3 	ble.w	801205e <_dtoa_r+0x68e>
 80122f8:	4656      	mov	r6, sl
 80122fa:	2331      	movs	r3, #49	@ 0x31
 80122fc:	f806 3b01 	strb.w	r3, [r6], #1
 8012300:	9b04      	ldr	r3, [sp, #16]
 8012302:	3301      	adds	r3, #1
 8012304:	9304      	str	r3, [sp, #16]
 8012306:	e6ae      	b.n	8012066 <_dtoa_r+0x696>
 8012308:	9c07      	ldr	r4, [sp, #28]
 801230a:	9704      	str	r7, [sp, #16]
 801230c:	4625      	mov	r5, r4
 801230e:	e7f3      	b.n	80122f8 <_dtoa_r+0x928>
 8012310:	9b07      	ldr	r3, [sp, #28]
 8012312:	9300      	str	r3, [sp, #0]
 8012314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012316:	2b00      	cmp	r3, #0
 8012318:	f000 8104 	beq.w	8012524 <_dtoa_r+0xb54>
 801231c:	2e00      	cmp	r6, #0
 801231e:	dd05      	ble.n	801232c <_dtoa_r+0x95c>
 8012320:	4629      	mov	r1, r5
 8012322:	4632      	mov	r2, r6
 8012324:	4658      	mov	r0, fp
 8012326:	f000 fc6f 	bl	8012c08 <__lshift>
 801232a:	4605      	mov	r5, r0
 801232c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801232e:	2b00      	cmp	r3, #0
 8012330:	d05a      	beq.n	80123e8 <_dtoa_r+0xa18>
 8012332:	6869      	ldr	r1, [r5, #4]
 8012334:	4658      	mov	r0, fp
 8012336:	f000 fa0f 	bl	8012758 <_Balloc>
 801233a:	4606      	mov	r6, r0
 801233c:	b928      	cbnz	r0, 801234a <_dtoa_r+0x97a>
 801233e:	4b84      	ldr	r3, [pc, #528]	@ (8012550 <_dtoa_r+0xb80>)
 8012340:	4602      	mov	r2, r0
 8012342:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012346:	f7ff bb5a 	b.w	80119fe <_dtoa_r+0x2e>
 801234a:	692a      	ldr	r2, [r5, #16]
 801234c:	3202      	adds	r2, #2
 801234e:	0092      	lsls	r2, r2, #2
 8012350:	f105 010c 	add.w	r1, r5, #12
 8012354:	300c      	adds	r0, #12
 8012356:	f7ff fa9e 	bl	8011896 <memcpy>
 801235a:	2201      	movs	r2, #1
 801235c:	4631      	mov	r1, r6
 801235e:	4658      	mov	r0, fp
 8012360:	f000 fc52 	bl	8012c08 <__lshift>
 8012364:	f10a 0301 	add.w	r3, sl, #1
 8012368:	9307      	str	r3, [sp, #28]
 801236a:	9b00      	ldr	r3, [sp, #0]
 801236c:	4453      	add	r3, sl
 801236e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012370:	9b02      	ldr	r3, [sp, #8]
 8012372:	f003 0301 	and.w	r3, r3, #1
 8012376:	462f      	mov	r7, r5
 8012378:	930a      	str	r3, [sp, #40]	@ 0x28
 801237a:	4605      	mov	r5, r0
 801237c:	9b07      	ldr	r3, [sp, #28]
 801237e:	4621      	mov	r1, r4
 8012380:	3b01      	subs	r3, #1
 8012382:	4648      	mov	r0, r9
 8012384:	9300      	str	r3, [sp, #0]
 8012386:	f7ff fa9b 	bl	80118c0 <quorem>
 801238a:	4639      	mov	r1, r7
 801238c:	9002      	str	r0, [sp, #8]
 801238e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012392:	4648      	mov	r0, r9
 8012394:	f000 fca4 	bl	8012ce0 <__mcmp>
 8012398:	462a      	mov	r2, r5
 801239a:	9008      	str	r0, [sp, #32]
 801239c:	4621      	mov	r1, r4
 801239e:	4658      	mov	r0, fp
 80123a0:	f000 fcba 	bl	8012d18 <__mdiff>
 80123a4:	68c2      	ldr	r2, [r0, #12]
 80123a6:	4606      	mov	r6, r0
 80123a8:	bb02      	cbnz	r2, 80123ec <_dtoa_r+0xa1c>
 80123aa:	4601      	mov	r1, r0
 80123ac:	4648      	mov	r0, r9
 80123ae:	f000 fc97 	bl	8012ce0 <__mcmp>
 80123b2:	4602      	mov	r2, r0
 80123b4:	4631      	mov	r1, r6
 80123b6:	4658      	mov	r0, fp
 80123b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80123ba:	f000 fa0d 	bl	80127d8 <_Bfree>
 80123be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123c2:	9e07      	ldr	r6, [sp, #28]
 80123c4:	ea43 0102 	orr.w	r1, r3, r2
 80123c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80123ca:	4319      	orrs	r1, r3
 80123cc:	d110      	bne.n	80123f0 <_dtoa_r+0xa20>
 80123ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80123d2:	d029      	beq.n	8012428 <_dtoa_r+0xa58>
 80123d4:	9b08      	ldr	r3, [sp, #32]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	dd02      	ble.n	80123e0 <_dtoa_r+0xa10>
 80123da:	9b02      	ldr	r3, [sp, #8]
 80123dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80123e0:	9b00      	ldr	r3, [sp, #0]
 80123e2:	f883 8000 	strb.w	r8, [r3]
 80123e6:	e63f      	b.n	8012068 <_dtoa_r+0x698>
 80123e8:	4628      	mov	r0, r5
 80123ea:	e7bb      	b.n	8012364 <_dtoa_r+0x994>
 80123ec:	2201      	movs	r2, #1
 80123ee:	e7e1      	b.n	80123b4 <_dtoa_r+0x9e4>
 80123f0:	9b08      	ldr	r3, [sp, #32]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	db04      	blt.n	8012400 <_dtoa_r+0xa30>
 80123f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80123f8:	430b      	orrs	r3, r1
 80123fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123fc:	430b      	orrs	r3, r1
 80123fe:	d120      	bne.n	8012442 <_dtoa_r+0xa72>
 8012400:	2a00      	cmp	r2, #0
 8012402:	dded      	ble.n	80123e0 <_dtoa_r+0xa10>
 8012404:	4649      	mov	r1, r9
 8012406:	2201      	movs	r2, #1
 8012408:	4658      	mov	r0, fp
 801240a:	f000 fbfd 	bl	8012c08 <__lshift>
 801240e:	4621      	mov	r1, r4
 8012410:	4681      	mov	r9, r0
 8012412:	f000 fc65 	bl	8012ce0 <__mcmp>
 8012416:	2800      	cmp	r0, #0
 8012418:	dc03      	bgt.n	8012422 <_dtoa_r+0xa52>
 801241a:	d1e1      	bne.n	80123e0 <_dtoa_r+0xa10>
 801241c:	f018 0f01 	tst.w	r8, #1
 8012420:	d0de      	beq.n	80123e0 <_dtoa_r+0xa10>
 8012422:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012426:	d1d8      	bne.n	80123da <_dtoa_r+0xa0a>
 8012428:	9a00      	ldr	r2, [sp, #0]
 801242a:	2339      	movs	r3, #57	@ 0x39
 801242c:	7013      	strb	r3, [r2, #0]
 801242e:	4633      	mov	r3, r6
 8012430:	461e      	mov	r6, r3
 8012432:	3b01      	subs	r3, #1
 8012434:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012438:	2a39      	cmp	r2, #57	@ 0x39
 801243a:	d052      	beq.n	80124e2 <_dtoa_r+0xb12>
 801243c:	3201      	adds	r2, #1
 801243e:	701a      	strb	r2, [r3, #0]
 8012440:	e612      	b.n	8012068 <_dtoa_r+0x698>
 8012442:	2a00      	cmp	r2, #0
 8012444:	dd07      	ble.n	8012456 <_dtoa_r+0xa86>
 8012446:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801244a:	d0ed      	beq.n	8012428 <_dtoa_r+0xa58>
 801244c:	9a00      	ldr	r2, [sp, #0]
 801244e:	f108 0301 	add.w	r3, r8, #1
 8012452:	7013      	strb	r3, [r2, #0]
 8012454:	e608      	b.n	8012068 <_dtoa_r+0x698>
 8012456:	9b07      	ldr	r3, [sp, #28]
 8012458:	9a07      	ldr	r2, [sp, #28]
 801245a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801245e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012460:	4293      	cmp	r3, r2
 8012462:	d028      	beq.n	80124b6 <_dtoa_r+0xae6>
 8012464:	4649      	mov	r1, r9
 8012466:	2300      	movs	r3, #0
 8012468:	220a      	movs	r2, #10
 801246a:	4658      	mov	r0, fp
 801246c:	f000 f9d6 	bl	801281c <__multadd>
 8012470:	42af      	cmp	r7, r5
 8012472:	4681      	mov	r9, r0
 8012474:	f04f 0300 	mov.w	r3, #0
 8012478:	f04f 020a 	mov.w	r2, #10
 801247c:	4639      	mov	r1, r7
 801247e:	4658      	mov	r0, fp
 8012480:	d107      	bne.n	8012492 <_dtoa_r+0xac2>
 8012482:	f000 f9cb 	bl	801281c <__multadd>
 8012486:	4607      	mov	r7, r0
 8012488:	4605      	mov	r5, r0
 801248a:	9b07      	ldr	r3, [sp, #28]
 801248c:	3301      	adds	r3, #1
 801248e:	9307      	str	r3, [sp, #28]
 8012490:	e774      	b.n	801237c <_dtoa_r+0x9ac>
 8012492:	f000 f9c3 	bl	801281c <__multadd>
 8012496:	4629      	mov	r1, r5
 8012498:	4607      	mov	r7, r0
 801249a:	2300      	movs	r3, #0
 801249c:	220a      	movs	r2, #10
 801249e:	4658      	mov	r0, fp
 80124a0:	f000 f9bc 	bl	801281c <__multadd>
 80124a4:	4605      	mov	r5, r0
 80124a6:	e7f0      	b.n	801248a <_dtoa_r+0xaba>
 80124a8:	9b00      	ldr	r3, [sp, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	bfcc      	ite	gt
 80124ae:	461e      	movgt	r6, r3
 80124b0:	2601      	movle	r6, #1
 80124b2:	4456      	add	r6, sl
 80124b4:	2700      	movs	r7, #0
 80124b6:	4649      	mov	r1, r9
 80124b8:	2201      	movs	r2, #1
 80124ba:	4658      	mov	r0, fp
 80124bc:	f000 fba4 	bl	8012c08 <__lshift>
 80124c0:	4621      	mov	r1, r4
 80124c2:	4681      	mov	r9, r0
 80124c4:	f000 fc0c 	bl	8012ce0 <__mcmp>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	dcb0      	bgt.n	801242e <_dtoa_r+0xa5e>
 80124cc:	d102      	bne.n	80124d4 <_dtoa_r+0xb04>
 80124ce:	f018 0f01 	tst.w	r8, #1
 80124d2:	d1ac      	bne.n	801242e <_dtoa_r+0xa5e>
 80124d4:	4633      	mov	r3, r6
 80124d6:	461e      	mov	r6, r3
 80124d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80124dc:	2a30      	cmp	r2, #48	@ 0x30
 80124de:	d0fa      	beq.n	80124d6 <_dtoa_r+0xb06>
 80124e0:	e5c2      	b.n	8012068 <_dtoa_r+0x698>
 80124e2:	459a      	cmp	sl, r3
 80124e4:	d1a4      	bne.n	8012430 <_dtoa_r+0xa60>
 80124e6:	9b04      	ldr	r3, [sp, #16]
 80124e8:	3301      	adds	r3, #1
 80124ea:	9304      	str	r3, [sp, #16]
 80124ec:	2331      	movs	r3, #49	@ 0x31
 80124ee:	f88a 3000 	strb.w	r3, [sl]
 80124f2:	e5b9      	b.n	8012068 <_dtoa_r+0x698>
 80124f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80124f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012554 <_dtoa_r+0xb84>
 80124fa:	b11b      	cbz	r3, 8012504 <_dtoa_r+0xb34>
 80124fc:	f10a 0308 	add.w	r3, sl, #8
 8012500:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012502:	6013      	str	r3, [r2, #0]
 8012504:	4650      	mov	r0, sl
 8012506:	b019      	add	sp, #100	@ 0x64
 8012508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801250c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801250e:	2b01      	cmp	r3, #1
 8012510:	f77f ae37 	ble.w	8012182 <_dtoa_r+0x7b2>
 8012514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012516:	930a      	str	r3, [sp, #40]	@ 0x28
 8012518:	2001      	movs	r0, #1
 801251a:	e655      	b.n	80121c8 <_dtoa_r+0x7f8>
 801251c:	9b00      	ldr	r3, [sp, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	f77f aed6 	ble.w	80122d0 <_dtoa_r+0x900>
 8012524:	4656      	mov	r6, sl
 8012526:	4621      	mov	r1, r4
 8012528:	4648      	mov	r0, r9
 801252a:	f7ff f9c9 	bl	80118c0 <quorem>
 801252e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012532:	f806 8b01 	strb.w	r8, [r6], #1
 8012536:	9b00      	ldr	r3, [sp, #0]
 8012538:	eba6 020a 	sub.w	r2, r6, sl
 801253c:	4293      	cmp	r3, r2
 801253e:	ddb3      	ble.n	80124a8 <_dtoa_r+0xad8>
 8012540:	4649      	mov	r1, r9
 8012542:	2300      	movs	r3, #0
 8012544:	220a      	movs	r2, #10
 8012546:	4658      	mov	r0, fp
 8012548:	f000 f968 	bl	801281c <__multadd>
 801254c:	4681      	mov	r9, r0
 801254e:	e7ea      	b.n	8012526 <_dtoa_r+0xb56>
 8012550:	080170ad 	.word	0x080170ad
 8012554:	08017031 	.word	0x08017031

08012558 <_free_r>:
 8012558:	b538      	push	{r3, r4, r5, lr}
 801255a:	4605      	mov	r5, r0
 801255c:	2900      	cmp	r1, #0
 801255e:	d041      	beq.n	80125e4 <_free_r+0x8c>
 8012560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012564:	1f0c      	subs	r4, r1, #4
 8012566:	2b00      	cmp	r3, #0
 8012568:	bfb8      	it	lt
 801256a:	18e4      	addlt	r4, r4, r3
 801256c:	f000 f8e8 	bl	8012740 <__malloc_lock>
 8012570:	4a1d      	ldr	r2, [pc, #116]	@ (80125e8 <_free_r+0x90>)
 8012572:	6813      	ldr	r3, [r2, #0]
 8012574:	b933      	cbnz	r3, 8012584 <_free_r+0x2c>
 8012576:	6063      	str	r3, [r4, #4]
 8012578:	6014      	str	r4, [r2, #0]
 801257a:	4628      	mov	r0, r5
 801257c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012580:	f000 b8e4 	b.w	801274c <__malloc_unlock>
 8012584:	42a3      	cmp	r3, r4
 8012586:	d908      	bls.n	801259a <_free_r+0x42>
 8012588:	6820      	ldr	r0, [r4, #0]
 801258a:	1821      	adds	r1, r4, r0
 801258c:	428b      	cmp	r3, r1
 801258e:	bf01      	itttt	eq
 8012590:	6819      	ldreq	r1, [r3, #0]
 8012592:	685b      	ldreq	r3, [r3, #4]
 8012594:	1809      	addeq	r1, r1, r0
 8012596:	6021      	streq	r1, [r4, #0]
 8012598:	e7ed      	b.n	8012576 <_free_r+0x1e>
 801259a:	461a      	mov	r2, r3
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	b10b      	cbz	r3, 80125a4 <_free_r+0x4c>
 80125a0:	42a3      	cmp	r3, r4
 80125a2:	d9fa      	bls.n	801259a <_free_r+0x42>
 80125a4:	6811      	ldr	r1, [r2, #0]
 80125a6:	1850      	adds	r0, r2, r1
 80125a8:	42a0      	cmp	r0, r4
 80125aa:	d10b      	bne.n	80125c4 <_free_r+0x6c>
 80125ac:	6820      	ldr	r0, [r4, #0]
 80125ae:	4401      	add	r1, r0
 80125b0:	1850      	adds	r0, r2, r1
 80125b2:	4283      	cmp	r3, r0
 80125b4:	6011      	str	r1, [r2, #0]
 80125b6:	d1e0      	bne.n	801257a <_free_r+0x22>
 80125b8:	6818      	ldr	r0, [r3, #0]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	6053      	str	r3, [r2, #4]
 80125be:	4408      	add	r0, r1
 80125c0:	6010      	str	r0, [r2, #0]
 80125c2:	e7da      	b.n	801257a <_free_r+0x22>
 80125c4:	d902      	bls.n	80125cc <_free_r+0x74>
 80125c6:	230c      	movs	r3, #12
 80125c8:	602b      	str	r3, [r5, #0]
 80125ca:	e7d6      	b.n	801257a <_free_r+0x22>
 80125cc:	6820      	ldr	r0, [r4, #0]
 80125ce:	1821      	adds	r1, r4, r0
 80125d0:	428b      	cmp	r3, r1
 80125d2:	bf04      	itt	eq
 80125d4:	6819      	ldreq	r1, [r3, #0]
 80125d6:	685b      	ldreq	r3, [r3, #4]
 80125d8:	6063      	str	r3, [r4, #4]
 80125da:	bf04      	itt	eq
 80125dc:	1809      	addeq	r1, r1, r0
 80125de:	6021      	streq	r1, [r4, #0]
 80125e0:	6054      	str	r4, [r2, #4]
 80125e2:	e7ca      	b.n	801257a <_free_r+0x22>
 80125e4:	bd38      	pop	{r3, r4, r5, pc}
 80125e6:	bf00      	nop
 80125e8:	200055b0 	.word	0x200055b0

080125ec <malloc>:
 80125ec:	4b02      	ldr	r3, [pc, #8]	@ (80125f8 <malloc+0xc>)
 80125ee:	4601      	mov	r1, r0
 80125f0:	6818      	ldr	r0, [r3, #0]
 80125f2:	f000 b825 	b.w	8012640 <_malloc_r>
 80125f6:	bf00      	nop
 80125f8:	200000a4 	.word	0x200000a4

080125fc <sbrk_aligned>:
 80125fc:	b570      	push	{r4, r5, r6, lr}
 80125fe:	4e0f      	ldr	r6, [pc, #60]	@ (801263c <sbrk_aligned+0x40>)
 8012600:	460c      	mov	r4, r1
 8012602:	6831      	ldr	r1, [r6, #0]
 8012604:	4605      	mov	r5, r0
 8012606:	b911      	cbnz	r1, 801260e <sbrk_aligned+0x12>
 8012608:	f001 fe0c 	bl	8014224 <_sbrk_r>
 801260c:	6030      	str	r0, [r6, #0]
 801260e:	4621      	mov	r1, r4
 8012610:	4628      	mov	r0, r5
 8012612:	f001 fe07 	bl	8014224 <_sbrk_r>
 8012616:	1c43      	adds	r3, r0, #1
 8012618:	d103      	bne.n	8012622 <sbrk_aligned+0x26>
 801261a:	f04f 34ff 	mov.w	r4, #4294967295
 801261e:	4620      	mov	r0, r4
 8012620:	bd70      	pop	{r4, r5, r6, pc}
 8012622:	1cc4      	adds	r4, r0, #3
 8012624:	f024 0403 	bic.w	r4, r4, #3
 8012628:	42a0      	cmp	r0, r4
 801262a:	d0f8      	beq.n	801261e <sbrk_aligned+0x22>
 801262c:	1a21      	subs	r1, r4, r0
 801262e:	4628      	mov	r0, r5
 8012630:	f001 fdf8 	bl	8014224 <_sbrk_r>
 8012634:	3001      	adds	r0, #1
 8012636:	d1f2      	bne.n	801261e <sbrk_aligned+0x22>
 8012638:	e7ef      	b.n	801261a <sbrk_aligned+0x1e>
 801263a:	bf00      	nop
 801263c:	200055ac 	.word	0x200055ac

08012640 <_malloc_r>:
 8012640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012644:	1ccd      	adds	r5, r1, #3
 8012646:	f025 0503 	bic.w	r5, r5, #3
 801264a:	3508      	adds	r5, #8
 801264c:	2d0c      	cmp	r5, #12
 801264e:	bf38      	it	cc
 8012650:	250c      	movcc	r5, #12
 8012652:	2d00      	cmp	r5, #0
 8012654:	4606      	mov	r6, r0
 8012656:	db01      	blt.n	801265c <_malloc_r+0x1c>
 8012658:	42a9      	cmp	r1, r5
 801265a:	d904      	bls.n	8012666 <_malloc_r+0x26>
 801265c:	230c      	movs	r3, #12
 801265e:	6033      	str	r3, [r6, #0]
 8012660:	2000      	movs	r0, #0
 8012662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801273c <_malloc_r+0xfc>
 801266a:	f000 f869 	bl	8012740 <__malloc_lock>
 801266e:	f8d8 3000 	ldr.w	r3, [r8]
 8012672:	461c      	mov	r4, r3
 8012674:	bb44      	cbnz	r4, 80126c8 <_malloc_r+0x88>
 8012676:	4629      	mov	r1, r5
 8012678:	4630      	mov	r0, r6
 801267a:	f7ff ffbf 	bl	80125fc <sbrk_aligned>
 801267e:	1c43      	adds	r3, r0, #1
 8012680:	4604      	mov	r4, r0
 8012682:	d158      	bne.n	8012736 <_malloc_r+0xf6>
 8012684:	f8d8 4000 	ldr.w	r4, [r8]
 8012688:	4627      	mov	r7, r4
 801268a:	2f00      	cmp	r7, #0
 801268c:	d143      	bne.n	8012716 <_malloc_r+0xd6>
 801268e:	2c00      	cmp	r4, #0
 8012690:	d04b      	beq.n	801272a <_malloc_r+0xea>
 8012692:	6823      	ldr	r3, [r4, #0]
 8012694:	4639      	mov	r1, r7
 8012696:	4630      	mov	r0, r6
 8012698:	eb04 0903 	add.w	r9, r4, r3
 801269c:	f001 fdc2 	bl	8014224 <_sbrk_r>
 80126a0:	4581      	cmp	r9, r0
 80126a2:	d142      	bne.n	801272a <_malloc_r+0xea>
 80126a4:	6821      	ldr	r1, [r4, #0]
 80126a6:	1a6d      	subs	r5, r5, r1
 80126a8:	4629      	mov	r1, r5
 80126aa:	4630      	mov	r0, r6
 80126ac:	f7ff ffa6 	bl	80125fc <sbrk_aligned>
 80126b0:	3001      	adds	r0, #1
 80126b2:	d03a      	beq.n	801272a <_malloc_r+0xea>
 80126b4:	6823      	ldr	r3, [r4, #0]
 80126b6:	442b      	add	r3, r5
 80126b8:	6023      	str	r3, [r4, #0]
 80126ba:	f8d8 3000 	ldr.w	r3, [r8]
 80126be:	685a      	ldr	r2, [r3, #4]
 80126c0:	bb62      	cbnz	r2, 801271c <_malloc_r+0xdc>
 80126c2:	f8c8 7000 	str.w	r7, [r8]
 80126c6:	e00f      	b.n	80126e8 <_malloc_r+0xa8>
 80126c8:	6822      	ldr	r2, [r4, #0]
 80126ca:	1b52      	subs	r2, r2, r5
 80126cc:	d420      	bmi.n	8012710 <_malloc_r+0xd0>
 80126ce:	2a0b      	cmp	r2, #11
 80126d0:	d917      	bls.n	8012702 <_malloc_r+0xc2>
 80126d2:	1961      	adds	r1, r4, r5
 80126d4:	42a3      	cmp	r3, r4
 80126d6:	6025      	str	r5, [r4, #0]
 80126d8:	bf18      	it	ne
 80126da:	6059      	strne	r1, [r3, #4]
 80126dc:	6863      	ldr	r3, [r4, #4]
 80126de:	bf08      	it	eq
 80126e0:	f8c8 1000 	streq.w	r1, [r8]
 80126e4:	5162      	str	r2, [r4, r5]
 80126e6:	604b      	str	r3, [r1, #4]
 80126e8:	4630      	mov	r0, r6
 80126ea:	f000 f82f 	bl	801274c <__malloc_unlock>
 80126ee:	f104 000b 	add.w	r0, r4, #11
 80126f2:	1d23      	adds	r3, r4, #4
 80126f4:	f020 0007 	bic.w	r0, r0, #7
 80126f8:	1ac2      	subs	r2, r0, r3
 80126fa:	bf1c      	itt	ne
 80126fc:	1a1b      	subne	r3, r3, r0
 80126fe:	50a3      	strne	r3, [r4, r2]
 8012700:	e7af      	b.n	8012662 <_malloc_r+0x22>
 8012702:	6862      	ldr	r2, [r4, #4]
 8012704:	42a3      	cmp	r3, r4
 8012706:	bf0c      	ite	eq
 8012708:	f8c8 2000 	streq.w	r2, [r8]
 801270c:	605a      	strne	r2, [r3, #4]
 801270e:	e7eb      	b.n	80126e8 <_malloc_r+0xa8>
 8012710:	4623      	mov	r3, r4
 8012712:	6864      	ldr	r4, [r4, #4]
 8012714:	e7ae      	b.n	8012674 <_malloc_r+0x34>
 8012716:	463c      	mov	r4, r7
 8012718:	687f      	ldr	r7, [r7, #4]
 801271a:	e7b6      	b.n	801268a <_malloc_r+0x4a>
 801271c:	461a      	mov	r2, r3
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	42a3      	cmp	r3, r4
 8012722:	d1fb      	bne.n	801271c <_malloc_r+0xdc>
 8012724:	2300      	movs	r3, #0
 8012726:	6053      	str	r3, [r2, #4]
 8012728:	e7de      	b.n	80126e8 <_malloc_r+0xa8>
 801272a:	230c      	movs	r3, #12
 801272c:	6033      	str	r3, [r6, #0]
 801272e:	4630      	mov	r0, r6
 8012730:	f000 f80c 	bl	801274c <__malloc_unlock>
 8012734:	e794      	b.n	8012660 <_malloc_r+0x20>
 8012736:	6005      	str	r5, [r0, #0]
 8012738:	e7d6      	b.n	80126e8 <_malloc_r+0xa8>
 801273a:	bf00      	nop
 801273c:	200055b0 	.word	0x200055b0

08012740 <__malloc_lock>:
 8012740:	4801      	ldr	r0, [pc, #4]	@ (8012748 <__malloc_lock+0x8>)
 8012742:	f7ff b8a6 	b.w	8011892 <__retarget_lock_acquire_recursive>
 8012746:	bf00      	nop
 8012748:	200055a8 	.word	0x200055a8

0801274c <__malloc_unlock>:
 801274c:	4801      	ldr	r0, [pc, #4]	@ (8012754 <__malloc_unlock+0x8>)
 801274e:	f7ff b8a1 	b.w	8011894 <__retarget_lock_release_recursive>
 8012752:	bf00      	nop
 8012754:	200055a8 	.word	0x200055a8

08012758 <_Balloc>:
 8012758:	b570      	push	{r4, r5, r6, lr}
 801275a:	69c6      	ldr	r6, [r0, #28]
 801275c:	4604      	mov	r4, r0
 801275e:	460d      	mov	r5, r1
 8012760:	b976      	cbnz	r6, 8012780 <_Balloc+0x28>
 8012762:	2010      	movs	r0, #16
 8012764:	f7ff ff42 	bl	80125ec <malloc>
 8012768:	4602      	mov	r2, r0
 801276a:	61e0      	str	r0, [r4, #28]
 801276c:	b920      	cbnz	r0, 8012778 <_Balloc+0x20>
 801276e:	4b18      	ldr	r3, [pc, #96]	@ (80127d0 <_Balloc+0x78>)
 8012770:	4818      	ldr	r0, [pc, #96]	@ (80127d4 <_Balloc+0x7c>)
 8012772:	216b      	movs	r1, #107	@ 0x6b
 8012774:	f001 fd70 	bl	8014258 <__assert_func>
 8012778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801277c:	6006      	str	r6, [r0, #0]
 801277e:	60c6      	str	r6, [r0, #12]
 8012780:	69e6      	ldr	r6, [r4, #28]
 8012782:	68f3      	ldr	r3, [r6, #12]
 8012784:	b183      	cbz	r3, 80127a8 <_Balloc+0x50>
 8012786:	69e3      	ldr	r3, [r4, #28]
 8012788:	68db      	ldr	r3, [r3, #12]
 801278a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801278e:	b9b8      	cbnz	r0, 80127c0 <_Balloc+0x68>
 8012790:	2101      	movs	r1, #1
 8012792:	fa01 f605 	lsl.w	r6, r1, r5
 8012796:	1d72      	adds	r2, r6, #5
 8012798:	0092      	lsls	r2, r2, #2
 801279a:	4620      	mov	r0, r4
 801279c:	f001 fd7a 	bl	8014294 <_calloc_r>
 80127a0:	b160      	cbz	r0, 80127bc <_Balloc+0x64>
 80127a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80127a6:	e00e      	b.n	80127c6 <_Balloc+0x6e>
 80127a8:	2221      	movs	r2, #33	@ 0x21
 80127aa:	2104      	movs	r1, #4
 80127ac:	4620      	mov	r0, r4
 80127ae:	f001 fd71 	bl	8014294 <_calloc_r>
 80127b2:	69e3      	ldr	r3, [r4, #28]
 80127b4:	60f0      	str	r0, [r6, #12]
 80127b6:	68db      	ldr	r3, [r3, #12]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d1e4      	bne.n	8012786 <_Balloc+0x2e>
 80127bc:	2000      	movs	r0, #0
 80127be:	bd70      	pop	{r4, r5, r6, pc}
 80127c0:	6802      	ldr	r2, [r0, #0]
 80127c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80127c6:	2300      	movs	r3, #0
 80127c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80127cc:	e7f7      	b.n	80127be <_Balloc+0x66>
 80127ce:	bf00      	nop
 80127d0:	0801703e 	.word	0x0801703e
 80127d4:	080170be 	.word	0x080170be

080127d8 <_Bfree>:
 80127d8:	b570      	push	{r4, r5, r6, lr}
 80127da:	69c6      	ldr	r6, [r0, #28]
 80127dc:	4605      	mov	r5, r0
 80127de:	460c      	mov	r4, r1
 80127e0:	b976      	cbnz	r6, 8012800 <_Bfree+0x28>
 80127e2:	2010      	movs	r0, #16
 80127e4:	f7ff ff02 	bl	80125ec <malloc>
 80127e8:	4602      	mov	r2, r0
 80127ea:	61e8      	str	r0, [r5, #28]
 80127ec:	b920      	cbnz	r0, 80127f8 <_Bfree+0x20>
 80127ee:	4b09      	ldr	r3, [pc, #36]	@ (8012814 <_Bfree+0x3c>)
 80127f0:	4809      	ldr	r0, [pc, #36]	@ (8012818 <_Bfree+0x40>)
 80127f2:	218f      	movs	r1, #143	@ 0x8f
 80127f4:	f001 fd30 	bl	8014258 <__assert_func>
 80127f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127fc:	6006      	str	r6, [r0, #0]
 80127fe:	60c6      	str	r6, [r0, #12]
 8012800:	b13c      	cbz	r4, 8012812 <_Bfree+0x3a>
 8012802:	69eb      	ldr	r3, [r5, #28]
 8012804:	6862      	ldr	r2, [r4, #4]
 8012806:	68db      	ldr	r3, [r3, #12]
 8012808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801280c:	6021      	str	r1, [r4, #0]
 801280e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012812:	bd70      	pop	{r4, r5, r6, pc}
 8012814:	0801703e 	.word	0x0801703e
 8012818:	080170be 	.word	0x080170be

0801281c <__multadd>:
 801281c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012820:	690d      	ldr	r5, [r1, #16]
 8012822:	4607      	mov	r7, r0
 8012824:	460c      	mov	r4, r1
 8012826:	461e      	mov	r6, r3
 8012828:	f101 0c14 	add.w	ip, r1, #20
 801282c:	2000      	movs	r0, #0
 801282e:	f8dc 3000 	ldr.w	r3, [ip]
 8012832:	b299      	uxth	r1, r3
 8012834:	fb02 6101 	mla	r1, r2, r1, r6
 8012838:	0c1e      	lsrs	r6, r3, #16
 801283a:	0c0b      	lsrs	r3, r1, #16
 801283c:	fb02 3306 	mla	r3, r2, r6, r3
 8012840:	b289      	uxth	r1, r1
 8012842:	3001      	adds	r0, #1
 8012844:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012848:	4285      	cmp	r5, r0
 801284a:	f84c 1b04 	str.w	r1, [ip], #4
 801284e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012852:	dcec      	bgt.n	801282e <__multadd+0x12>
 8012854:	b30e      	cbz	r6, 801289a <__multadd+0x7e>
 8012856:	68a3      	ldr	r3, [r4, #8]
 8012858:	42ab      	cmp	r3, r5
 801285a:	dc19      	bgt.n	8012890 <__multadd+0x74>
 801285c:	6861      	ldr	r1, [r4, #4]
 801285e:	4638      	mov	r0, r7
 8012860:	3101      	adds	r1, #1
 8012862:	f7ff ff79 	bl	8012758 <_Balloc>
 8012866:	4680      	mov	r8, r0
 8012868:	b928      	cbnz	r0, 8012876 <__multadd+0x5a>
 801286a:	4602      	mov	r2, r0
 801286c:	4b0c      	ldr	r3, [pc, #48]	@ (80128a0 <__multadd+0x84>)
 801286e:	480d      	ldr	r0, [pc, #52]	@ (80128a4 <__multadd+0x88>)
 8012870:	21ba      	movs	r1, #186	@ 0xba
 8012872:	f001 fcf1 	bl	8014258 <__assert_func>
 8012876:	6922      	ldr	r2, [r4, #16]
 8012878:	3202      	adds	r2, #2
 801287a:	f104 010c 	add.w	r1, r4, #12
 801287e:	0092      	lsls	r2, r2, #2
 8012880:	300c      	adds	r0, #12
 8012882:	f7ff f808 	bl	8011896 <memcpy>
 8012886:	4621      	mov	r1, r4
 8012888:	4638      	mov	r0, r7
 801288a:	f7ff ffa5 	bl	80127d8 <_Bfree>
 801288e:	4644      	mov	r4, r8
 8012890:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012894:	3501      	adds	r5, #1
 8012896:	615e      	str	r6, [r3, #20]
 8012898:	6125      	str	r5, [r4, #16]
 801289a:	4620      	mov	r0, r4
 801289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128a0:	080170ad 	.word	0x080170ad
 80128a4:	080170be 	.word	0x080170be

080128a8 <__s2b>:
 80128a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128ac:	460c      	mov	r4, r1
 80128ae:	4615      	mov	r5, r2
 80128b0:	461f      	mov	r7, r3
 80128b2:	2209      	movs	r2, #9
 80128b4:	3308      	adds	r3, #8
 80128b6:	4606      	mov	r6, r0
 80128b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80128bc:	2100      	movs	r1, #0
 80128be:	2201      	movs	r2, #1
 80128c0:	429a      	cmp	r2, r3
 80128c2:	db09      	blt.n	80128d8 <__s2b+0x30>
 80128c4:	4630      	mov	r0, r6
 80128c6:	f7ff ff47 	bl	8012758 <_Balloc>
 80128ca:	b940      	cbnz	r0, 80128de <__s2b+0x36>
 80128cc:	4602      	mov	r2, r0
 80128ce:	4b19      	ldr	r3, [pc, #100]	@ (8012934 <__s2b+0x8c>)
 80128d0:	4819      	ldr	r0, [pc, #100]	@ (8012938 <__s2b+0x90>)
 80128d2:	21d3      	movs	r1, #211	@ 0xd3
 80128d4:	f001 fcc0 	bl	8014258 <__assert_func>
 80128d8:	0052      	lsls	r2, r2, #1
 80128da:	3101      	adds	r1, #1
 80128dc:	e7f0      	b.n	80128c0 <__s2b+0x18>
 80128de:	9b08      	ldr	r3, [sp, #32]
 80128e0:	6143      	str	r3, [r0, #20]
 80128e2:	2d09      	cmp	r5, #9
 80128e4:	f04f 0301 	mov.w	r3, #1
 80128e8:	6103      	str	r3, [r0, #16]
 80128ea:	dd16      	ble.n	801291a <__s2b+0x72>
 80128ec:	f104 0909 	add.w	r9, r4, #9
 80128f0:	46c8      	mov	r8, r9
 80128f2:	442c      	add	r4, r5
 80128f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80128f8:	4601      	mov	r1, r0
 80128fa:	3b30      	subs	r3, #48	@ 0x30
 80128fc:	220a      	movs	r2, #10
 80128fe:	4630      	mov	r0, r6
 8012900:	f7ff ff8c 	bl	801281c <__multadd>
 8012904:	45a0      	cmp	r8, r4
 8012906:	d1f5      	bne.n	80128f4 <__s2b+0x4c>
 8012908:	f1a5 0408 	sub.w	r4, r5, #8
 801290c:	444c      	add	r4, r9
 801290e:	1b2d      	subs	r5, r5, r4
 8012910:	1963      	adds	r3, r4, r5
 8012912:	42bb      	cmp	r3, r7
 8012914:	db04      	blt.n	8012920 <__s2b+0x78>
 8012916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801291a:	340a      	adds	r4, #10
 801291c:	2509      	movs	r5, #9
 801291e:	e7f6      	b.n	801290e <__s2b+0x66>
 8012920:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012924:	4601      	mov	r1, r0
 8012926:	3b30      	subs	r3, #48	@ 0x30
 8012928:	220a      	movs	r2, #10
 801292a:	4630      	mov	r0, r6
 801292c:	f7ff ff76 	bl	801281c <__multadd>
 8012930:	e7ee      	b.n	8012910 <__s2b+0x68>
 8012932:	bf00      	nop
 8012934:	080170ad 	.word	0x080170ad
 8012938:	080170be 	.word	0x080170be

0801293c <__hi0bits>:
 801293c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012940:	4603      	mov	r3, r0
 8012942:	bf36      	itet	cc
 8012944:	0403      	lslcc	r3, r0, #16
 8012946:	2000      	movcs	r0, #0
 8012948:	2010      	movcc	r0, #16
 801294a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801294e:	bf3c      	itt	cc
 8012950:	021b      	lslcc	r3, r3, #8
 8012952:	3008      	addcc	r0, #8
 8012954:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012958:	bf3c      	itt	cc
 801295a:	011b      	lslcc	r3, r3, #4
 801295c:	3004      	addcc	r0, #4
 801295e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012962:	bf3c      	itt	cc
 8012964:	009b      	lslcc	r3, r3, #2
 8012966:	3002      	addcc	r0, #2
 8012968:	2b00      	cmp	r3, #0
 801296a:	db05      	blt.n	8012978 <__hi0bits+0x3c>
 801296c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012970:	f100 0001 	add.w	r0, r0, #1
 8012974:	bf08      	it	eq
 8012976:	2020      	moveq	r0, #32
 8012978:	4770      	bx	lr

0801297a <__lo0bits>:
 801297a:	6803      	ldr	r3, [r0, #0]
 801297c:	4602      	mov	r2, r0
 801297e:	f013 0007 	ands.w	r0, r3, #7
 8012982:	d00b      	beq.n	801299c <__lo0bits+0x22>
 8012984:	07d9      	lsls	r1, r3, #31
 8012986:	d421      	bmi.n	80129cc <__lo0bits+0x52>
 8012988:	0798      	lsls	r0, r3, #30
 801298a:	bf49      	itett	mi
 801298c:	085b      	lsrmi	r3, r3, #1
 801298e:	089b      	lsrpl	r3, r3, #2
 8012990:	2001      	movmi	r0, #1
 8012992:	6013      	strmi	r3, [r2, #0]
 8012994:	bf5c      	itt	pl
 8012996:	6013      	strpl	r3, [r2, #0]
 8012998:	2002      	movpl	r0, #2
 801299a:	4770      	bx	lr
 801299c:	b299      	uxth	r1, r3
 801299e:	b909      	cbnz	r1, 80129a4 <__lo0bits+0x2a>
 80129a0:	0c1b      	lsrs	r3, r3, #16
 80129a2:	2010      	movs	r0, #16
 80129a4:	b2d9      	uxtb	r1, r3
 80129a6:	b909      	cbnz	r1, 80129ac <__lo0bits+0x32>
 80129a8:	3008      	adds	r0, #8
 80129aa:	0a1b      	lsrs	r3, r3, #8
 80129ac:	0719      	lsls	r1, r3, #28
 80129ae:	bf04      	itt	eq
 80129b0:	091b      	lsreq	r3, r3, #4
 80129b2:	3004      	addeq	r0, #4
 80129b4:	0799      	lsls	r1, r3, #30
 80129b6:	bf04      	itt	eq
 80129b8:	089b      	lsreq	r3, r3, #2
 80129ba:	3002      	addeq	r0, #2
 80129bc:	07d9      	lsls	r1, r3, #31
 80129be:	d403      	bmi.n	80129c8 <__lo0bits+0x4e>
 80129c0:	085b      	lsrs	r3, r3, #1
 80129c2:	f100 0001 	add.w	r0, r0, #1
 80129c6:	d003      	beq.n	80129d0 <__lo0bits+0x56>
 80129c8:	6013      	str	r3, [r2, #0]
 80129ca:	4770      	bx	lr
 80129cc:	2000      	movs	r0, #0
 80129ce:	4770      	bx	lr
 80129d0:	2020      	movs	r0, #32
 80129d2:	4770      	bx	lr

080129d4 <__i2b>:
 80129d4:	b510      	push	{r4, lr}
 80129d6:	460c      	mov	r4, r1
 80129d8:	2101      	movs	r1, #1
 80129da:	f7ff febd 	bl	8012758 <_Balloc>
 80129de:	4602      	mov	r2, r0
 80129e0:	b928      	cbnz	r0, 80129ee <__i2b+0x1a>
 80129e2:	4b05      	ldr	r3, [pc, #20]	@ (80129f8 <__i2b+0x24>)
 80129e4:	4805      	ldr	r0, [pc, #20]	@ (80129fc <__i2b+0x28>)
 80129e6:	f240 1145 	movw	r1, #325	@ 0x145
 80129ea:	f001 fc35 	bl	8014258 <__assert_func>
 80129ee:	2301      	movs	r3, #1
 80129f0:	6144      	str	r4, [r0, #20]
 80129f2:	6103      	str	r3, [r0, #16]
 80129f4:	bd10      	pop	{r4, pc}
 80129f6:	bf00      	nop
 80129f8:	080170ad 	.word	0x080170ad
 80129fc:	080170be 	.word	0x080170be

08012a00 <__multiply>:
 8012a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a04:	4614      	mov	r4, r2
 8012a06:	690a      	ldr	r2, [r1, #16]
 8012a08:	6923      	ldr	r3, [r4, #16]
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	bfa8      	it	ge
 8012a0e:	4623      	movge	r3, r4
 8012a10:	460f      	mov	r7, r1
 8012a12:	bfa4      	itt	ge
 8012a14:	460c      	movge	r4, r1
 8012a16:	461f      	movge	r7, r3
 8012a18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012a1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012a20:	68a3      	ldr	r3, [r4, #8]
 8012a22:	6861      	ldr	r1, [r4, #4]
 8012a24:	eb0a 0609 	add.w	r6, sl, r9
 8012a28:	42b3      	cmp	r3, r6
 8012a2a:	b085      	sub	sp, #20
 8012a2c:	bfb8      	it	lt
 8012a2e:	3101      	addlt	r1, #1
 8012a30:	f7ff fe92 	bl	8012758 <_Balloc>
 8012a34:	b930      	cbnz	r0, 8012a44 <__multiply+0x44>
 8012a36:	4602      	mov	r2, r0
 8012a38:	4b44      	ldr	r3, [pc, #272]	@ (8012b4c <__multiply+0x14c>)
 8012a3a:	4845      	ldr	r0, [pc, #276]	@ (8012b50 <__multiply+0x150>)
 8012a3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012a40:	f001 fc0a 	bl	8014258 <__assert_func>
 8012a44:	f100 0514 	add.w	r5, r0, #20
 8012a48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a4c:	462b      	mov	r3, r5
 8012a4e:	2200      	movs	r2, #0
 8012a50:	4543      	cmp	r3, r8
 8012a52:	d321      	bcc.n	8012a98 <__multiply+0x98>
 8012a54:	f107 0114 	add.w	r1, r7, #20
 8012a58:	f104 0214 	add.w	r2, r4, #20
 8012a5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012a60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012a64:	9302      	str	r3, [sp, #8]
 8012a66:	1b13      	subs	r3, r2, r4
 8012a68:	3b15      	subs	r3, #21
 8012a6a:	f023 0303 	bic.w	r3, r3, #3
 8012a6e:	3304      	adds	r3, #4
 8012a70:	f104 0715 	add.w	r7, r4, #21
 8012a74:	42ba      	cmp	r2, r7
 8012a76:	bf38      	it	cc
 8012a78:	2304      	movcc	r3, #4
 8012a7a:	9301      	str	r3, [sp, #4]
 8012a7c:	9b02      	ldr	r3, [sp, #8]
 8012a7e:	9103      	str	r1, [sp, #12]
 8012a80:	428b      	cmp	r3, r1
 8012a82:	d80c      	bhi.n	8012a9e <__multiply+0x9e>
 8012a84:	2e00      	cmp	r6, #0
 8012a86:	dd03      	ble.n	8012a90 <__multiply+0x90>
 8012a88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d05b      	beq.n	8012b48 <__multiply+0x148>
 8012a90:	6106      	str	r6, [r0, #16]
 8012a92:	b005      	add	sp, #20
 8012a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a98:	f843 2b04 	str.w	r2, [r3], #4
 8012a9c:	e7d8      	b.n	8012a50 <__multiply+0x50>
 8012a9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8012aa2:	f1ba 0f00 	cmp.w	sl, #0
 8012aa6:	d024      	beq.n	8012af2 <__multiply+0xf2>
 8012aa8:	f104 0e14 	add.w	lr, r4, #20
 8012aac:	46a9      	mov	r9, r5
 8012aae:	f04f 0c00 	mov.w	ip, #0
 8012ab2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012ab6:	f8d9 3000 	ldr.w	r3, [r9]
 8012aba:	fa1f fb87 	uxth.w	fp, r7
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	fb0a 330b 	mla	r3, sl, fp, r3
 8012ac4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012ac8:	f8d9 7000 	ldr.w	r7, [r9]
 8012acc:	4463      	add	r3, ip
 8012ace:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012ad2:	fb0a c70b 	mla	r7, sl, fp, ip
 8012ad6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012ada:	b29b      	uxth	r3, r3
 8012adc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012ae0:	4572      	cmp	r2, lr
 8012ae2:	f849 3b04 	str.w	r3, [r9], #4
 8012ae6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012aea:	d8e2      	bhi.n	8012ab2 <__multiply+0xb2>
 8012aec:	9b01      	ldr	r3, [sp, #4]
 8012aee:	f845 c003 	str.w	ip, [r5, r3]
 8012af2:	9b03      	ldr	r3, [sp, #12]
 8012af4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012af8:	3104      	adds	r1, #4
 8012afa:	f1b9 0f00 	cmp.w	r9, #0
 8012afe:	d021      	beq.n	8012b44 <__multiply+0x144>
 8012b00:	682b      	ldr	r3, [r5, #0]
 8012b02:	f104 0c14 	add.w	ip, r4, #20
 8012b06:	46ae      	mov	lr, r5
 8012b08:	f04f 0a00 	mov.w	sl, #0
 8012b0c:	f8bc b000 	ldrh.w	fp, [ip]
 8012b10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012b14:	fb09 770b 	mla	r7, r9, fp, r7
 8012b18:	4457      	add	r7, sl
 8012b1a:	b29b      	uxth	r3, r3
 8012b1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012b20:	f84e 3b04 	str.w	r3, [lr], #4
 8012b24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012b28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b2c:	f8be 3000 	ldrh.w	r3, [lr]
 8012b30:	fb09 330a 	mla	r3, r9, sl, r3
 8012b34:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012b38:	4562      	cmp	r2, ip
 8012b3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b3e:	d8e5      	bhi.n	8012b0c <__multiply+0x10c>
 8012b40:	9f01      	ldr	r7, [sp, #4]
 8012b42:	51eb      	str	r3, [r5, r7]
 8012b44:	3504      	adds	r5, #4
 8012b46:	e799      	b.n	8012a7c <__multiply+0x7c>
 8012b48:	3e01      	subs	r6, #1
 8012b4a:	e79b      	b.n	8012a84 <__multiply+0x84>
 8012b4c:	080170ad 	.word	0x080170ad
 8012b50:	080170be 	.word	0x080170be

08012b54 <__pow5mult>:
 8012b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b58:	4615      	mov	r5, r2
 8012b5a:	f012 0203 	ands.w	r2, r2, #3
 8012b5e:	4607      	mov	r7, r0
 8012b60:	460e      	mov	r6, r1
 8012b62:	d007      	beq.n	8012b74 <__pow5mult+0x20>
 8012b64:	4c25      	ldr	r4, [pc, #148]	@ (8012bfc <__pow5mult+0xa8>)
 8012b66:	3a01      	subs	r2, #1
 8012b68:	2300      	movs	r3, #0
 8012b6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b6e:	f7ff fe55 	bl	801281c <__multadd>
 8012b72:	4606      	mov	r6, r0
 8012b74:	10ad      	asrs	r5, r5, #2
 8012b76:	d03d      	beq.n	8012bf4 <__pow5mult+0xa0>
 8012b78:	69fc      	ldr	r4, [r7, #28]
 8012b7a:	b97c      	cbnz	r4, 8012b9c <__pow5mult+0x48>
 8012b7c:	2010      	movs	r0, #16
 8012b7e:	f7ff fd35 	bl	80125ec <malloc>
 8012b82:	4602      	mov	r2, r0
 8012b84:	61f8      	str	r0, [r7, #28]
 8012b86:	b928      	cbnz	r0, 8012b94 <__pow5mult+0x40>
 8012b88:	4b1d      	ldr	r3, [pc, #116]	@ (8012c00 <__pow5mult+0xac>)
 8012b8a:	481e      	ldr	r0, [pc, #120]	@ (8012c04 <__pow5mult+0xb0>)
 8012b8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012b90:	f001 fb62 	bl	8014258 <__assert_func>
 8012b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b98:	6004      	str	r4, [r0, #0]
 8012b9a:	60c4      	str	r4, [r0, #12]
 8012b9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012ba4:	b94c      	cbnz	r4, 8012bba <__pow5mult+0x66>
 8012ba6:	f240 2171 	movw	r1, #625	@ 0x271
 8012baa:	4638      	mov	r0, r7
 8012bac:	f7ff ff12 	bl	80129d4 <__i2b>
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8012bb6:	4604      	mov	r4, r0
 8012bb8:	6003      	str	r3, [r0, #0]
 8012bba:	f04f 0900 	mov.w	r9, #0
 8012bbe:	07eb      	lsls	r3, r5, #31
 8012bc0:	d50a      	bpl.n	8012bd8 <__pow5mult+0x84>
 8012bc2:	4631      	mov	r1, r6
 8012bc4:	4622      	mov	r2, r4
 8012bc6:	4638      	mov	r0, r7
 8012bc8:	f7ff ff1a 	bl	8012a00 <__multiply>
 8012bcc:	4631      	mov	r1, r6
 8012bce:	4680      	mov	r8, r0
 8012bd0:	4638      	mov	r0, r7
 8012bd2:	f7ff fe01 	bl	80127d8 <_Bfree>
 8012bd6:	4646      	mov	r6, r8
 8012bd8:	106d      	asrs	r5, r5, #1
 8012bda:	d00b      	beq.n	8012bf4 <__pow5mult+0xa0>
 8012bdc:	6820      	ldr	r0, [r4, #0]
 8012bde:	b938      	cbnz	r0, 8012bf0 <__pow5mult+0x9c>
 8012be0:	4622      	mov	r2, r4
 8012be2:	4621      	mov	r1, r4
 8012be4:	4638      	mov	r0, r7
 8012be6:	f7ff ff0b 	bl	8012a00 <__multiply>
 8012bea:	6020      	str	r0, [r4, #0]
 8012bec:	f8c0 9000 	str.w	r9, [r0]
 8012bf0:	4604      	mov	r4, r0
 8012bf2:	e7e4      	b.n	8012bbe <__pow5mult+0x6a>
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bfa:	bf00      	nop
 8012bfc:	08017118 	.word	0x08017118
 8012c00:	0801703e 	.word	0x0801703e
 8012c04:	080170be 	.word	0x080170be

08012c08 <__lshift>:
 8012c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c0c:	460c      	mov	r4, r1
 8012c0e:	6849      	ldr	r1, [r1, #4]
 8012c10:	6923      	ldr	r3, [r4, #16]
 8012c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012c16:	68a3      	ldr	r3, [r4, #8]
 8012c18:	4607      	mov	r7, r0
 8012c1a:	4691      	mov	r9, r2
 8012c1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c20:	f108 0601 	add.w	r6, r8, #1
 8012c24:	42b3      	cmp	r3, r6
 8012c26:	db0b      	blt.n	8012c40 <__lshift+0x38>
 8012c28:	4638      	mov	r0, r7
 8012c2a:	f7ff fd95 	bl	8012758 <_Balloc>
 8012c2e:	4605      	mov	r5, r0
 8012c30:	b948      	cbnz	r0, 8012c46 <__lshift+0x3e>
 8012c32:	4602      	mov	r2, r0
 8012c34:	4b28      	ldr	r3, [pc, #160]	@ (8012cd8 <__lshift+0xd0>)
 8012c36:	4829      	ldr	r0, [pc, #164]	@ (8012cdc <__lshift+0xd4>)
 8012c38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012c3c:	f001 fb0c 	bl	8014258 <__assert_func>
 8012c40:	3101      	adds	r1, #1
 8012c42:	005b      	lsls	r3, r3, #1
 8012c44:	e7ee      	b.n	8012c24 <__lshift+0x1c>
 8012c46:	2300      	movs	r3, #0
 8012c48:	f100 0114 	add.w	r1, r0, #20
 8012c4c:	f100 0210 	add.w	r2, r0, #16
 8012c50:	4618      	mov	r0, r3
 8012c52:	4553      	cmp	r3, sl
 8012c54:	db33      	blt.n	8012cbe <__lshift+0xb6>
 8012c56:	6920      	ldr	r0, [r4, #16]
 8012c58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c5c:	f104 0314 	add.w	r3, r4, #20
 8012c60:	f019 091f 	ands.w	r9, r9, #31
 8012c64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012c6c:	d02b      	beq.n	8012cc6 <__lshift+0xbe>
 8012c6e:	f1c9 0e20 	rsb	lr, r9, #32
 8012c72:	468a      	mov	sl, r1
 8012c74:	2200      	movs	r2, #0
 8012c76:	6818      	ldr	r0, [r3, #0]
 8012c78:	fa00 f009 	lsl.w	r0, r0, r9
 8012c7c:	4310      	orrs	r0, r2
 8012c7e:	f84a 0b04 	str.w	r0, [sl], #4
 8012c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c86:	459c      	cmp	ip, r3
 8012c88:	fa22 f20e 	lsr.w	r2, r2, lr
 8012c8c:	d8f3      	bhi.n	8012c76 <__lshift+0x6e>
 8012c8e:	ebac 0304 	sub.w	r3, ip, r4
 8012c92:	3b15      	subs	r3, #21
 8012c94:	f023 0303 	bic.w	r3, r3, #3
 8012c98:	3304      	adds	r3, #4
 8012c9a:	f104 0015 	add.w	r0, r4, #21
 8012c9e:	4584      	cmp	ip, r0
 8012ca0:	bf38      	it	cc
 8012ca2:	2304      	movcc	r3, #4
 8012ca4:	50ca      	str	r2, [r1, r3]
 8012ca6:	b10a      	cbz	r2, 8012cac <__lshift+0xa4>
 8012ca8:	f108 0602 	add.w	r6, r8, #2
 8012cac:	3e01      	subs	r6, #1
 8012cae:	4638      	mov	r0, r7
 8012cb0:	612e      	str	r6, [r5, #16]
 8012cb2:	4621      	mov	r1, r4
 8012cb4:	f7ff fd90 	bl	80127d8 <_Bfree>
 8012cb8:	4628      	mov	r0, r5
 8012cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	e7c5      	b.n	8012c52 <__lshift+0x4a>
 8012cc6:	3904      	subs	r1, #4
 8012cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ccc:	f841 2f04 	str.w	r2, [r1, #4]!
 8012cd0:	459c      	cmp	ip, r3
 8012cd2:	d8f9      	bhi.n	8012cc8 <__lshift+0xc0>
 8012cd4:	e7ea      	b.n	8012cac <__lshift+0xa4>
 8012cd6:	bf00      	nop
 8012cd8:	080170ad 	.word	0x080170ad
 8012cdc:	080170be 	.word	0x080170be

08012ce0 <__mcmp>:
 8012ce0:	690a      	ldr	r2, [r1, #16]
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	6900      	ldr	r0, [r0, #16]
 8012ce6:	1a80      	subs	r0, r0, r2
 8012ce8:	b530      	push	{r4, r5, lr}
 8012cea:	d10e      	bne.n	8012d0a <__mcmp+0x2a>
 8012cec:	3314      	adds	r3, #20
 8012cee:	3114      	adds	r1, #20
 8012cf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012cf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012cf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012cfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012d00:	4295      	cmp	r5, r2
 8012d02:	d003      	beq.n	8012d0c <__mcmp+0x2c>
 8012d04:	d205      	bcs.n	8012d12 <__mcmp+0x32>
 8012d06:	f04f 30ff 	mov.w	r0, #4294967295
 8012d0a:	bd30      	pop	{r4, r5, pc}
 8012d0c:	42a3      	cmp	r3, r4
 8012d0e:	d3f3      	bcc.n	8012cf8 <__mcmp+0x18>
 8012d10:	e7fb      	b.n	8012d0a <__mcmp+0x2a>
 8012d12:	2001      	movs	r0, #1
 8012d14:	e7f9      	b.n	8012d0a <__mcmp+0x2a>
	...

08012d18 <__mdiff>:
 8012d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d1c:	4689      	mov	r9, r1
 8012d1e:	4606      	mov	r6, r0
 8012d20:	4611      	mov	r1, r2
 8012d22:	4648      	mov	r0, r9
 8012d24:	4614      	mov	r4, r2
 8012d26:	f7ff ffdb 	bl	8012ce0 <__mcmp>
 8012d2a:	1e05      	subs	r5, r0, #0
 8012d2c:	d112      	bne.n	8012d54 <__mdiff+0x3c>
 8012d2e:	4629      	mov	r1, r5
 8012d30:	4630      	mov	r0, r6
 8012d32:	f7ff fd11 	bl	8012758 <_Balloc>
 8012d36:	4602      	mov	r2, r0
 8012d38:	b928      	cbnz	r0, 8012d46 <__mdiff+0x2e>
 8012d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8012e38 <__mdiff+0x120>)
 8012d3c:	f240 2137 	movw	r1, #567	@ 0x237
 8012d40:	483e      	ldr	r0, [pc, #248]	@ (8012e3c <__mdiff+0x124>)
 8012d42:	f001 fa89 	bl	8014258 <__assert_func>
 8012d46:	2301      	movs	r3, #1
 8012d48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012d4c:	4610      	mov	r0, r2
 8012d4e:	b003      	add	sp, #12
 8012d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d54:	bfbc      	itt	lt
 8012d56:	464b      	movlt	r3, r9
 8012d58:	46a1      	movlt	r9, r4
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012d60:	bfba      	itte	lt
 8012d62:	461c      	movlt	r4, r3
 8012d64:	2501      	movlt	r5, #1
 8012d66:	2500      	movge	r5, #0
 8012d68:	f7ff fcf6 	bl	8012758 <_Balloc>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	b918      	cbnz	r0, 8012d78 <__mdiff+0x60>
 8012d70:	4b31      	ldr	r3, [pc, #196]	@ (8012e38 <__mdiff+0x120>)
 8012d72:	f240 2145 	movw	r1, #581	@ 0x245
 8012d76:	e7e3      	b.n	8012d40 <__mdiff+0x28>
 8012d78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012d7c:	6926      	ldr	r6, [r4, #16]
 8012d7e:	60c5      	str	r5, [r0, #12]
 8012d80:	f109 0310 	add.w	r3, r9, #16
 8012d84:	f109 0514 	add.w	r5, r9, #20
 8012d88:	f104 0e14 	add.w	lr, r4, #20
 8012d8c:	f100 0b14 	add.w	fp, r0, #20
 8012d90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012d94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012d98:	9301      	str	r3, [sp, #4]
 8012d9a:	46d9      	mov	r9, fp
 8012d9c:	f04f 0c00 	mov.w	ip, #0
 8012da0:	9b01      	ldr	r3, [sp, #4]
 8012da2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012da6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012daa:	9301      	str	r3, [sp, #4]
 8012dac:	fa1f f38a 	uxth.w	r3, sl
 8012db0:	4619      	mov	r1, r3
 8012db2:	b283      	uxth	r3, r0
 8012db4:	1acb      	subs	r3, r1, r3
 8012db6:	0c00      	lsrs	r0, r0, #16
 8012db8:	4463      	add	r3, ip
 8012dba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012dbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012dc8:	4576      	cmp	r6, lr
 8012dca:	f849 3b04 	str.w	r3, [r9], #4
 8012dce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012dd2:	d8e5      	bhi.n	8012da0 <__mdiff+0x88>
 8012dd4:	1b33      	subs	r3, r6, r4
 8012dd6:	3b15      	subs	r3, #21
 8012dd8:	f023 0303 	bic.w	r3, r3, #3
 8012ddc:	3415      	adds	r4, #21
 8012dde:	3304      	adds	r3, #4
 8012de0:	42a6      	cmp	r6, r4
 8012de2:	bf38      	it	cc
 8012de4:	2304      	movcc	r3, #4
 8012de6:	441d      	add	r5, r3
 8012de8:	445b      	add	r3, fp
 8012dea:	461e      	mov	r6, r3
 8012dec:	462c      	mov	r4, r5
 8012dee:	4544      	cmp	r4, r8
 8012df0:	d30e      	bcc.n	8012e10 <__mdiff+0xf8>
 8012df2:	f108 0103 	add.w	r1, r8, #3
 8012df6:	1b49      	subs	r1, r1, r5
 8012df8:	f021 0103 	bic.w	r1, r1, #3
 8012dfc:	3d03      	subs	r5, #3
 8012dfe:	45a8      	cmp	r8, r5
 8012e00:	bf38      	it	cc
 8012e02:	2100      	movcc	r1, #0
 8012e04:	440b      	add	r3, r1
 8012e06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012e0a:	b191      	cbz	r1, 8012e32 <__mdiff+0x11a>
 8012e0c:	6117      	str	r7, [r2, #16]
 8012e0e:	e79d      	b.n	8012d4c <__mdiff+0x34>
 8012e10:	f854 1b04 	ldr.w	r1, [r4], #4
 8012e14:	46e6      	mov	lr, ip
 8012e16:	0c08      	lsrs	r0, r1, #16
 8012e18:	fa1c fc81 	uxtah	ip, ip, r1
 8012e1c:	4471      	add	r1, lr
 8012e1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012e22:	b289      	uxth	r1, r1
 8012e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012e28:	f846 1b04 	str.w	r1, [r6], #4
 8012e2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e30:	e7dd      	b.n	8012dee <__mdiff+0xd6>
 8012e32:	3f01      	subs	r7, #1
 8012e34:	e7e7      	b.n	8012e06 <__mdiff+0xee>
 8012e36:	bf00      	nop
 8012e38:	080170ad 	.word	0x080170ad
 8012e3c:	080170be 	.word	0x080170be

08012e40 <__ulp>:
 8012e40:	b082      	sub	sp, #8
 8012e42:	ed8d 0b00 	vstr	d0, [sp]
 8012e46:	9a01      	ldr	r2, [sp, #4]
 8012e48:	4b0f      	ldr	r3, [pc, #60]	@ (8012e88 <__ulp+0x48>)
 8012e4a:	4013      	ands	r3, r2
 8012e4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	dc08      	bgt.n	8012e66 <__ulp+0x26>
 8012e54:	425b      	negs	r3, r3
 8012e56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012e5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012e5e:	da04      	bge.n	8012e6a <__ulp+0x2a>
 8012e60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012e64:	4113      	asrs	r3, r2
 8012e66:	2200      	movs	r2, #0
 8012e68:	e008      	b.n	8012e7c <__ulp+0x3c>
 8012e6a:	f1a2 0314 	sub.w	r3, r2, #20
 8012e6e:	2b1e      	cmp	r3, #30
 8012e70:	bfda      	itte	le
 8012e72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012e76:	40da      	lsrle	r2, r3
 8012e78:	2201      	movgt	r2, #1
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	4619      	mov	r1, r3
 8012e7e:	4610      	mov	r0, r2
 8012e80:	ec41 0b10 	vmov	d0, r0, r1
 8012e84:	b002      	add	sp, #8
 8012e86:	4770      	bx	lr
 8012e88:	7ff00000 	.word	0x7ff00000

08012e8c <__b2d>:
 8012e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e90:	6906      	ldr	r6, [r0, #16]
 8012e92:	f100 0814 	add.w	r8, r0, #20
 8012e96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012e9a:	1f37      	subs	r7, r6, #4
 8012e9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012ea0:	4610      	mov	r0, r2
 8012ea2:	f7ff fd4b 	bl	801293c <__hi0bits>
 8012ea6:	f1c0 0320 	rsb	r3, r0, #32
 8012eaa:	280a      	cmp	r0, #10
 8012eac:	600b      	str	r3, [r1, #0]
 8012eae:	491b      	ldr	r1, [pc, #108]	@ (8012f1c <__b2d+0x90>)
 8012eb0:	dc15      	bgt.n	8012ede <__b2d+0x52>
 8012eb2:	f1c0 0c0b 	rsb	ip, r0, #11
 8012eb6:	fa22 f30c 	lsr.w	r3, r2, ip
 8012eba:	45b8      	cmp	r8, r7
 8012ebc:	ea43 0501 	orr.w	r5, r3, r1
 8012ec0:	bf34      	ite	cc
 8012ec2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012ec6:	2300      	movcs	r3, #0
 8012ec8:	3015      	adds	r0, #21
 8012eca:	fa02 f000 	lsl.w	r0, r2, r0
 8012ece:	fa23 f30c 	lsr.w	r3, r3, ip
 8012ed2:	4303      	orrs	r3, r0
 8012ed4:	461c      	mov	r4, r3
 8012ed6:	ec45 4b10 	vmov	d0, r4, r5
 8012eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ede:	45b8      	cmp	r8, r7
 8012ee0:	bf3a      	itte	cc
 8012ee2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012ee6:	f1a6 0708 	subcc.w	r7, r6, #8
 8012eea:	2300      	movcs	r3, #0
 8012eec:	380b      	subs	r0, #11
 8012eee:	d012      	beq.n	8012f16 <__b2d+0x8a>
 8012ef0:	f1c0 0120 	rsb	r1, r0, #32
 8012ef4:	fa23 f401 	lsr.w	r4, r3, r1
 8012ef8:	4082      	lsls	r2, r0
 8012efa:	4322      	orrs	r2, r4
 8012efc:	4547      	cmp	r7, r8
 8012efe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012f02:	bf8c      	ite	hi
 8012f04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012f08:	2200      	movls	r2, #0
 8012f0a:	4083      	lsls	r3, r0
 8012f0c:	40ca      	lsrs	r2, r1
 8012f0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012f12:	4313      	orrs	r3, r2
 8012f14:	e7de      	b.n	8012ed4 <__b2d+0x48>
 8012f16:	ea42 0501 	orr.w	r5, r2, r1
 8012f1a:	e7db      	b.n	8012ed4 <__b2d+0x48>
 8012f1c:	3ff00000 	.word	0x3ff00000

08012f20 <__d2b>:
 8012f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f24:	460f      	mov	r7, r1
 8012f26:	2101      	movs	r1, #1
 8012f28:	ec59 8b10 	vmov	r8, r9, d0
 8012f2c:	4616      	mov	r6, r2
 8012f2e:	f7ff fc13 	bl	8012758 <_Balloc>
 8012f32:	4604      	mov	r4, r0
 8012f34:	b930      	cbnz	r0, 8012f44 <__d2b+0x24>
 8012f36:	4602      	mov	r2, r0
 8012f38:	4b23      	ldr	r3, [pc, #140]	@ (8012fc8 <__d2b+0xa8>)
 8012f3a:	4824      	ldr	r0, [pc, #144]	@ (8012fcc <__d2b+0xac>)
 8012f3c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012f40:	f001 f98a 	bl	8014258 <__assert_func>
 8012f44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012f4c:	b10d      	cbz	r5, 8012f52 <__d2b+0x32>
 8012f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012f52:	9301      	str	r3, [sp, #4]
 8012f54:	f1b8 0300 	subs.w	r3, r8, #0
 8012f58:	d023      	beq.n	8012fa2 <__d2b+0x82>
 8012f5a:	4668      	mov	r0, sp
 8012f5c:	9300      	str	r3, [sp, #0]
 8012f5e:	f7ff fd0c 	bl	801297a <__lo0bits>
 8012f62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012f66:	b1d0      	cbz	r0, 8012f9e <__d2b+0x7e>
 8012f68:	f1c0 0320 	rsb	r3, r0, #32
 8012f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8012f70:	430b      	orrs	r3, r1
 8012f72:	40c2      	lsrs	r2, r0
 8012f74:	6163      	str	r3, [r4, #20]
 8012f76:	9201      	str	r2, [sp, #4]
 8012f78:	9b01      	ldr	r3, [sp, #4]
 8012f7a:	61a3      	str	r3, [r4, #24]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	bf0c      	ite	eq
 8012f80:	2201      	moveq	r2, #1
 8012f82:	2202      	movne	r2, #2
 8012f84:	6122      	str	r2, [r4, #16]
 8012f86:	b1a5      	cbz	r5, 8012fb2 <__d2b+0x92>
 8012f88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012f8c:	4405      	add	r5, r0
 8012f8e:	603d      	str	r5, [r7, #0]
 8012f90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012f94:	6030      	str	r0, [r6, #0]
 8012f96:	4620      	mov	r0, r4
 8012f98:	b003      	add	sp, #12
 8012f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f9e:	6161      	str	r1, [r4, #20]
 8012fa0:	e7ea      	b.n	8012f78 <__d2b+0x58>
 8012fa2:	a801      	add	r0, sp, #4
 8012fa4:	f7ff fce9 	bl	801297a <__lo0bits>
 8012fa8:	9b01      	ldr	r3, [sp, #4]
 8012faa:	6163      	str	r3, [r4, #20]
 8012fac:	3020      	adds	r0, #32
 8012fae:	2201      	movs	r2, #1
 8012fb0:	e7e8      	b.n	8012f84 <__d2b+0x64>
 8012fb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012fb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012fba:	6038      	str	r0, [r7, #0]
 8012fbc:	6918      	ldr	r0, [r3, #16]
 8012fbe:	f7ff fcbd 	bl	801293c <__hi0bits>
 8012fc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012fc6:	e7e5      	b.n	8012f94 <__d2b+0x74>
 8012fc8:	080170ad 	.word	0x080170ad
 8012fcc:	080170be 	.word	0x080170be

08012fd0 <__ratio>:
 8012fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fd4:	b085      	sub	sp, #20
 8012fd6:	e9cd 1000 	strd	r1, r0, [sp]
 8012fda:	a902      	add	r1, sp, #8
 8012fdc:	f7ff ff56 	bl	8012e8c <__b2d>
 8012fe0:	9800      	ldr	r0, [sp, #0]
 8012fe2:	a903      	add	r1, sp, #12
 8012fe4:	ec55 4b10 	vmov	r4, r5, d0
 8012fe8:	f7ff ff50 	bl	8012e8c <__b2d>
 8012fec:	9b01      	ldr	r3, [sp, #4]
 8012fee:	6919      	ldr	r1, [r3, #16]
 8012ff0:	9b00      	ldr	r3, [sp, #0]
 8012ff2:	691b      	ldr	r3, [r3, #16]
 8012ff4:	1ac9      	subs	r1, r1, r3
 8012ff6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012ffa:	1a9b      	subs	r3, r3, r2
 8012ffc:	ec5b ab10 	vmov	sl, fp, d0
 8013000:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013004:	2b00      	cmp	r3, #0
 8013006:	bfce      	itee	gt
 8013008:	462a      	movgt	r2, r5
 801300a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801300e:	465a      	movle	r2, fp
 8013010:	462f      	mov	r7, r5
 8013012:	46d9      	mov	r9, fp
 8013014:	bfcc      	ite	gt
 8013016:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801301a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801301e:	464b      	mov	r3, r9
 8013020:	4652      	mov	r2, sl
 8013022:	4620      	mov	r0, r4
 8013024:	4639      	mov	r1, r7
 8013026:	f7ed fc19 	bl	800085c <__aeabi_ddiv>
 801302a:	ec41 0b10 	vmov	d0, r0, r1
 801302e:	b005      	add	sp, #20
 8013030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013034 <__copybits>:
 8013034:	3901      	subs	r1, #1
 8013036:	b570      	push	{r4, r5, r6, lr}
 8013038:	1149      	asrs	r1, r1, #5
 801303a:	6914      	ldr	r4, [r2, #16]
 801303c:	3101      	adds	r1, #1
 801303e:	f102 0314 	add.w	r3, r2, #20
 8013042:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013046:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801304a:	1f05      	subs	r5, r0, #4
 801304c:	42a3      	cmp	r3, r4
 801304e:	d30c      	bcc.n	801306a <__copybits+0x36>
 8013050:	1aa3      	subs	r3, r4, r2
 8013052:	3b11      	subs	r3, #17
 8013054:	f023 0303 	bic.w	r3, r3, #3
 8013058:	3211      	adds	r2, #17
 801305a:	42a2      	cmp	r2, r4
 801305c:	bf88      	it	hi
 801305e:	2300      	movhi	r3, #0
 8013060:	4418      	add	r0, r3
 8013062:	2300      	movs	r3, #0
 8013064:	4288      	cmp	r0, r1
 8013066:	d305      	bcc.n	8013074 <__copybits+0x40>
 8013068:	bd70      	pop	{r4, r5, r6, pc}
 801306a:	f853 6b04 	ldr.w	r6, [r3], #4
 801306e:	f845 6f04 	str.w	r6, [r5, #4]!
 8013072:	e7eb      	b.n	801304c <__copybits+0x18>
 8013074:	f840 3b04 	str.w	r3, [r0], #4
 8013078:	e7f4      	b.n	8013064 <__copybits+0x30>

0801307a <__any_on>:
 801307a:	f100 0214 	add.w	r2, r0, #20
 801307e:	6900      	ldr	r0, [r0, #16]
 8013080:	114b      	asrs	r3, r1, #5
 8013082:	4298      	cmp	r0, r3
 8013084:	b510      	push	{r4, lr}
 8013086:	db11      	blt.n	80130ac <__any_on+0x32>
 8013088:	dd0a      	ble.n	80130a0 <__any_on+0x26>
 801308a:	f011 011f 	ands.w	r1, r1, #31
 801308e:	d007      	beq.n	80130a0 <__any_on+0x26>
 8013090:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013094:	fa24 f001 	lsr.w	r0, r4, r1
 8013098:	fa00 f101 	lsl.w	r1, r0, r1
 801309c:	428c      	cmp	r4, r1
 801309e:	d10b      	bne.n	80130b8 <__any_on+0x3e>
 80130a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80130a4:	4293      	cmp	r3, r2
 80130a6:	d803      	bhi.n	80130b0 <__any_on+0x36>
 80130a8:	2000      	movs	r0, #0
 80130aa:	bd10      	pop	{r4, pc}
 80130ac:	4603      	mov	r3, r0
 80130ae:	e7f7      	b.n	80130a0 <__any_on+0x26>
 80130b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80130b4:	2900      	cmp	r1, #0
 80130b6:	d0f5      	beq.n	80130a4 <__any_on+0x2a>
 80130b8:	2001      	movs	r0, #1
 80130ba:	e7f6      	b.n	80130aa <__any_on+0x30>

080130bc <sulp>:
 80130bc:	b570      	push	{r4, r5, r6, lr}
 80130be:	4604      	mov	r4, r0
 80130c0:	460d      	mov	r5, r1
 80130c2:	ec45 4b10 	vmov	d0, r4, r5
 80130c6:	4616      	mov	r6, r2
 80130c8:	f7ff feba 	bl	8012e40 <__ulp>
 80130cc:	ec51 0b10 	vmov	r0, r1, d0
 80130d0:	b17e      	cbz	r6, 80130f2 <sulp+0x36>
 80130d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80130d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80130da:	2b00      	cmp	r3, #0
 80130dc:	dd09      	ble.n	80130f2 <sulp+0x36>
 80130de:	051b      	lsls	r3, r3, #20
 80130e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80130e4:	2400      	movs	r4, #0
 80130e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80130ea:	4622      	mov	r2, r4
 80130ec:	462b      	mov	r3, r5
 80130ee:	f7ed fa8b 	bl	8000608 <__aeabi_dmul>
 80130f2:	ec41 0b10 	vmov	d0, r0, r1
 80130f6:	bd70      	pop	{r4, r5, r6, pc}

080130f8 <_strtod_l>:
 80130f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130fc:	b09f      	sub	sp, #124	@ 0x7c
 80130fe:	460c      	mov	r4, r1
 8013100:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013102:	2200      	movs	r2, #0
 8013104:	921a      	str	r2, [sp, #104]	@ 0x68
 8013106:	9005      	str	r0, [sp, #20]
 8013108:	f04f 0a00 	mov.w	sl, #0
 801310c:	f04f 0b00 	mov.w	fp, #0
 8013110:	460a      	mov	r2, r1
 8013112:	9219      	str	r2, [sp, #100]	@ 0x64
 8013114:	7811      	ldrb	r1, [r2, #0]
 8013116:	292b      	cmp	r1, #43	@ 0x2b
 8013118:	d04a      	beq.n	80131b0 <_strtod_l+0xb8>
 801311a:	d838      	bhi.n	801318e <_strtod_l+0x96>
 801311c:	290d      	cmp	r1, #13
 801311e:	d832      	bhi.n	8013186 <_strtod_l+0x8e>
 8013120:	2908      	cmp	r1, #8
 8013122:	d832      	bhi.n	801318a <_strtod_l+0x92>
 8013124:	2900      	cmp	r1, #0
 8013126:	d03b      	beq.n	80131a0 <_strtod_l+0xa8>
 8013128:	2200      	movs	r2, #0
 801312a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801312c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801312e:	782a      	ldrb	r2, [r5, #0]
 8013130:	2a30      	cmp	r2, #48	@ 0x30
 8013132:	f040 80b3 	bne.w	801329c <_strtod_l+0x1a4>
 8013136:	786a      	ldrb	r2, [r5, #1]
 8013138:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801313c:	2a58      	cmp	r2, #88	@ 0x58
 801313e:	d16e      	bne.n	801321e <_strtod_l+0x126>
 8013140:	9302      	str	r3, [sp, #8]
 8013142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013144:	9301      	str	r3, [sp, #4]
 8013146:	ab1a      	add	r3, sp, #104	@ 0x68
 8013148:	9300      	str	r3, [sp, #0]
 801314a:	4a8e      	ldr	r2, [pc, #568]	@ (8013384 <_strtod_l+0x28c>)
 801314c:	9805      	ldr	r0, [sp, #20]
 801314e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013150:	a919      	add	r1, sp, #100	@ 0x64
 8013152:	f001 f91b 	bl	801438c <__gethex>
 8013156:	f010 060f 	ands.w	r6, r0, #15
 801315a:	4604      	mov	r4, r0
 801315c:	d005      	beq.n	801316a <_strtod_l+0x72>
 801315e:	2e06      	cmp	r6, #6
 8013160:	d128      	bne.n	80131b4 <_strtod_l+0xbc>
 8013162:	3501      	adds	r5, #1
 8013164:	2300      	movs	r3, #0
 8013166:	9519      	str	r5, [sp, #100]	@ 0x64
 8013168:	930b      	str	r3, [sp, #44]	@ 0x2c
 801316a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801316c:	2b00      	cmp	r3, #0
 801316e:	f040 858e 	bne.w	8013c8e <_strtod_l+0xb96>
 8013172:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013174:	b1cb      	cbz	r3, 80131aa <_strtod_l+0xb2>
 8013176:	4652      	mov	r2, sl
 8013178:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801317c:	ec43 2b10 	vmov	d0, r2, r3
 8013180:	b01f      	add	sp, #124	@ 0x7c
 8013182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013186:	2920      	cmp	r1, #32
 8013188:	d1ce      	bne.n	8013128 <_strtod_l+0x30>
 801318a:	3201      	adds	r2, #1
 801318c:	e7c1      	b.n	8013112 <_strtod_l+0x1a>
 801318e:	292d      	cmp	r1, #45	@ 0x2d
 8013190:	d1ca      	bne.n	8013128 <_strtod_l+0x30>
 8013192:	2101      	movs	r1, #1
 8013194:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013196:	1c51      	adds	r1, r2, #1
 8013198:	9119      	str	r1, [sp, #100]	@ 0x64
 801319a:	7852      	ldrb	r2, [r2, #1]
 801319c:	2a00      	cmp	r2, #0
 801319e:	d1c5      	bne.n	801312c <_strtod_l+0x34>
 80131a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80131a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	f040 8570 	bne.w	8013c8a <_strtod_l+0xb92>
 80131aa:	4652      	mov	r2, sl
 80131ac:	465b      	mov	r3, fp
 80131ae:	e7e5      	b.n	801317c <_strtod_l+0x84>
 80131b0:	2100      	movs	r1, #0
 80131b2:	e7ef      	b.n	8013194 <_strtod_l+0x9c>
 80131b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80131b6:	b13a      	cbz	r2, 80131c8 <_strtod_l+0xd0>
 80131b8:	2135      	movs	r1, #53	@ 0x35
 80131ba:	a81c      	add	r0, sp, #112	@ 0x70
 80131bc:	f7ff ff3a 	bl	8013034 <__copybits>
 80131c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80131c2:	9805      	ldr	r0, [sp, #20]
 80131c4:	f7ff fb08 	bl	80127d8 <_Bfree>
 80131c8:	3e01      	subs	r6, #1
 80131ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80131cc:	2e04      	cmp	r6, #4
 80131ce:	d806      	bhi.n	80131de <_strtod_l+0xe6>
 80131d0:	e8df f006 	tbb	[pc, r6]
 80131d4:	201d0314 	.word	0x201d0314
 80131d8:	14          	.byte	0x14
 80131d9:	00          	.byte	0x00
 80131da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80131de:	05e1      	lsls	r1, r4, #23
 80131e0:	bf48      	it	mi
 80131e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80131e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80131ea:	0d1b      	lsrs	r3, r3, #20
 80131ec:	051b      	lsls	r3, r3, #20
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d1bb      	bne.n	801316a <_strtod_l+0x72>
 80131f2:	f7fe fb23 	bl	801183c <__errno>
 80131f6:	2322      	movs	r3, #34	@ 0x22
 80131f8:	6003      	str	r3, [r0, #0]
 80131fa:	e7b6      	b.n	801316a <_strtod_l+0x72>
 80131fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013200:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013204:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013208:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801320c:	e7e7      	b.n	80131de <_strtod_l+0xe6>
 801320e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801338c <_strtod_l+0x294>
 8013212:	e7e4      	b.n	80131de <_strtod_l+0xe6>
 8013214:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013218:	f04f 3aff 	mov.w	sl, #4294967295
 801321c:	e7df      	b.n	80131de <_strtod_l+0xe6>
 801321e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013220:	1c5a      	adds	r2, r3, #1
 8013222:	9219      	str	r2, [sp, #100]	@ 0x64
 8013224:	785b      	ldrb	r3, [r3, #1]
 8013226:	2b30      	cmp	r3, #48	@ 0x30
 8013228:	d0f9      	beq.n	801321e <_strtod_l+0x126>
 801322a:	2b00      	cmp	r3, #0
 801322c:	d09d      	beq.n	801316a <_strtod_l+0x72>
 801322e:	2301      	movs	r3, #1
 8013230:	9309      	str	r3, [sp, #36]	@ 0x24
 8013232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013234:	930c      	str	r3, [sp, #48]	@ 0x30
 8013236:	2300      	movs	r3, #0
 8013238:	9308      	str	r3, [sp, #32]
 801323a:	930a      	str	r3, [sp, #40]	@ 0x28
 801323c:	461f      	mov	r7, r3
 801323e:	220a      	movs	r2, #10
 8013240:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013242:	7805      	ldrb	r5, [r0, #0]
 8013244:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013248:	b2d9      	uxtb	r1, r3
 801324a:	2909      	cmp	r1, #9
 801324c:	d928      	bls.n	80132a0 <_strtod_l+0x1a8>
 801324e:	494e      	ldr	r1, [pc, #312]	@ (8013388 <_strtod_l+0x290>)
 8013250:	2201      	movs	r2, #1
 8013252:	f000 ffd5 	bl	8014200 <strncmp>
 8013256:	2800      	cmp	r0, #0
 8013258:	d032      	beq.n	80132c0 <_strtod_l+0x1c8>
 801325a:	2000      	movs	r0, #0
 801325c:	462a      	mov	r2, r5
 801325e:	4681      	mov	r9, r0
 8013260:	463d      	mov	r5, r7
 8013262:	4603      	mov	r3, r0
 8013264:	2a65      	cmp	r2, #101	@ 0x65
 8013266:	d001      	beq.n	801326c <_strtod_l+0x174>
 8013268:	2a45      	cmp	r2, #69	@ 0x45
 801326a:	d114      	bne.n	8013296 <_strtod_l+0x19e>
 801326c:	b91d      	cbnz	r5, 8013276 <_strtod_l+0x17e>
 801326e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013270:	4302      	orrs	r2, r0
 8013272:	d095      	beq.n	80131a0 <_strtod_l+0xa8>
 8013274:	2500      	movs	r5, #0
 8013276:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013278:	1c62      	adds	r2, r4, #1
 801327a:	9219      	str	r2, [sp, #100]	@ 0x64
 801327c:	7862      	ldrb	r2, [r4, #1]
 801327e:	2a2b      	cmp	r2, #43	@ 0x2b
 8013280:	d077      	beq.n	8013372 <_strtod_l+0x27a>
 8013282:	2a2d      	cmp	r2, #45	@ 0x2d
 8013284:	d07b      	beq.n	801337e <_strtod_l+0x286>
 8013286:	f04f 0c00 	mov.w	ip, #0
 801328a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801328e:	2909      	cmp	r1, #9
 8013290:	f240 8082 	bls.w	8013398 <_strtod_l+0x2a0>
 8013294:	9419      	str	r4, [sp, #100]	@ 0x64
 8013296:	f04f 0800 	mov.w	r8, #0
 801329a:	e0a2      	b.n	80133e2 <_strtod_l+0x2ea>
 801329c:	2300      	movs	r3, #0
 801329e:	e7c7      	b.n	8013230 <_strtod_l+0x138>
 80132a0:	2f08      	cmp	r7, #8
 80132a2:	bfd5      	itete	le
 80132a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80132a6:	9908      	ldrgt	r1, [sp, #32]
 80132a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80132ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 80132b0:	f100 0001 	add.w	r0, r0, #1
 80132b4:	bfd4      	ite	le
 80132b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80132b8:	9308      	strgt	r3, [sp, #32]
 80132ba:	3701      	adds	r7, #1
 80132bc:	9019      	str	r0, [sp, #100]	@ 0x64
 80132be:	e7bf      	b.n	8013240 <_strtod_l+0x148>
 80132c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132c2:	1c5a      	adds	r2, r3, #1
 80132c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80132c6:	785a      	ldrb	r2, [r3, #1]
 80132c8:	b37f      	cbz	r7, 801332a <_strtod_l+0x232>
 80132ca:	4681      	mov	r9, r0
 80132cc:	463d      	mov	r5, r7
 80132ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80132d2:	2b09      	cmp	r3, #9
 80132d4:	d912      	bls.n	80132fc <_strtod_l+0x204>
 80132d6:	2301      	movs	r3, #1
 80132d8:	e7c4      	b.n	8013264 <_strtod_l+0x16c>
 80132da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132dc:	1c5a      	adds	r2, r3, #1
 80132de:	9219      	str	r2, [sp, #100]	@ 0x64
 80132e0:	785a      	ldrb	r2, [r3, #1]
 80132e2:	3001      	adds	r0, #1
 80132e4:	2a30      	cmp	r2, #48	@ 0x30
 80132e6:	d0f8      	beq.n	80132da <_strtod_l+0x1e2>
 80132e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80132ec:	2b08      	cmp	r3, #8
 80132ee:	f200 84d3 	bhi.w	8013c98 <_strtod_l+0xba0>
 80132f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80132f6:	4681      	mov	r9, r0
 80132f8:	2000      	movs	r0, #0
 80132fa:	4605      	mov	r5, r0
 80132fc:	3a30      	subs	r2, #48	@ 0x30
 80132fe:	f100 0301 	add.w	r3, r0, #1
 8013302:	d02a      	beq.n	801335a <_strtod_l+0x262>
 8013304:	4499      	add	r9, r3
 8013306:	eb00 0c05 	add.w	ip, r0, r5
 801330a:	462b      	mov	r3, r5
 801330c:	210a      	movs	r1, #10
 801330e:	4563      	cmp	r3, ip
 8013310:	d10d      	bne.n	801332e <_strtod_l+0x236>
 8013312:	1c69      	adds	r1, r5, #1
 8013314:	4401      	add	r1, r0
 8013316:	4428      	add	r0, r5
 8013318:	2808      	cmp	r0, #8
 801331a:	dc16      	bgt.n	801334a <_strtod_l+0x252>
 801331c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801331e:	230a      	movs	r3, #10
 8013320:	fb03 2300 	mla	r3, r3, r0, r2
 8013324:	930a      	str	r3, [sp, #40]	@ 0x28
 8013326:	2300      	movs	r3, #0
 8013328:	e018      	b.n	801335c <_strtod_l+0x264>
 801332a:	4638      	mov	r0, r7
 801332c:	e7da      	b.n	80132e4 <_strtod_l+0x1ec>
 801332e:	2b08      	cmp	r3, #8
 8013330:	f103 0301 	add.w	r3, r3, #1
 8013334:	dc03      	bgt.n	801333e <_strtod_l+0x246>
 8013336:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013338:	434e      	muls	r6, r1
 801333a:	960a      	str	r6, [sp, #40]	@ 0x28
 801333c:	e7e7      	b.n	801330e <_strtod_l+0x216>
 801333e:	2b10      	cmp	r3, #16
 8013340:	bfde      	ittt	le
 8013342:	9e08      	ldrle	r6, [sp, #32]
 8013344:	434e      	mulle	r6, r1
 8013346:	9608      	strle	r6, [sp, #32]
 8013348:	e7e1      	b.n	801330e <_strtod_l+0x216>
 801334a:	280f      	cmp	r0, #15
 801334c:	dceb      	bgt.n	8013326 <_strtod_l+0x22e>
 801334e:	9808      	ldr	r0, [sp, #32]
 8013350:	230a      	movs	r3, #10
 8013352:	fb03 2300 	mla	r3, r3, r0, r2
 8013356:	9308      	str	r3, [sp, #32]
 8013358:	e7e5      	b.n	8013326 <_strtod_l+0x22e>
 801335a:	4629      	mov	r1, r5
 801335c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801335e:	1c50      	adds	r0, r2, #1
 8013360:	9019      	str	r0, [sp, #100]	@ 0x64
 8013362:	7852      	ldrb	r2, [r2, #1]
 8013364:	4618      	mov	r0, r3
 8013366:	460d      	mov	r5, r1
 8013368:	e7b1      	b.n	80132ce <_strtod_l+0x1d6>
 801336a:	f04f 0900 	mov.w	r9, #0
 801336e:	2301      	movs	r3, #1
 8013370:	e77d      	b.n	801326e <_strtod_l+0x176>
 8013372:	f04f 0c00 	mov.w	ip, #0
 8013376:	1ca2      	adds	r2, r4, #2
 8013378:	9219      	str	r2, [sp, #100]	@ 0x64
 801337a:	78a2      	ldrb	r2, [r4, #2]
 801337c:	e785      	b.n	801328a <_strtod_l+0x192>
 801337e:	f04f 0c01 	mov.w	ip, #1
 8013382:	e7f8      	b.n	8013376 <_strtod_l+0x27e>
 8013384:	08017230 	.word	0x08017230
 8013388:	08017218 	.word	0x08017218
 801338c:	7ff00000 	.word	0x7ff00000
 8013390:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013392:	1c51      	adds	r1, r2, #1
 8013394:	9119      	str	r1, [sp, #100]	@ 0x64
 8013396:	7852      	ldrb	r2, [r2, #1]
 8013398:	2a30      	cmp	r2, #48	@ 0x30
 801339a:	d0f9      	beq.n	8013390 <_strtod_l+0x298>
 801339c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80133a0:	2908      	cmp	r1, #8
 80133a2:	f63f af78 	bhi.w	8013296 <_strtod_l+0x19e>
 80133a6:	3a30      	subs	r2, #48	@ 0x30
 80133a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80133aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80133ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80133ae:	f04f 080a 	mov.w	r8, #10
 80133b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80133b4:	1c56      	adds	r6, r2, #1
 80133b6:	9619      	str	r6, [sp, #100]	@ 0x64
 80133b8:	7852      	ldrb	r2, [r2, #1]
 80133ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80133be:	f1be 0f09 	cmp.w	lr, #9
 80133c2:	d939      	bls.n	8013438 <_strtod_l+0x340>
 80133c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80133c6:	1a76      	subs	r6, r6, r1
 80133c8:	2e08      	cmp	r6, #8
 80133ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80133ce:	dc03      	bgt.n	80133d8 <_strtod_l+0x2e0>
 80133d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80133d2:	4588      	cmp	r8, r1
 80133d4:	bfa8      	it	ge
 80133d6:	4688      	movge	r8, r1
 80133d8:	f1bc 0f00 	cmp.w	ip, #0
 80133dc:	d001      	beq.n	80133e2 <_strtod_l+0x2ea>
 80133de:	f1c8 0800 	rsb	r8, r8, #0
 80133e2:	2d00      	cmp	r5, #0
 80133e4:	d14e      	bne.n	8013484 <_strtod_l+0x38c>
 80133e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80133e8:	4308      	orrs	r0, r1
 80133ea:	f47f aebe 	bne.w	801316a <_strtod_l+0x72>
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	f47f aed6 	bne.w	80131a0 <_strtod_l+0xa8>
 80133f4:	2a69      	cmp	r2, #105	@ 0x69
 80133f6:	d028      	beq.n	801344a <_strtod_l+0x352>
 80133f8:	dc25      	bgt.n	8013446 <_strtod_l+0x34e>
 80133fa:	2a49      	cmp	r2, #73	@ 0x49
 80133fc:	d025      	beq.n	801344a <_strtod_l+0x352>
 80133fe:	2a4e      	cmp	r2, #78	@ 0x4e
 8013400:	f47f aece 	bne.w	80131a0 <_strtod_l+0xa8>
 8013404:	499b      	ldr	r1, [pc, #620]	@ (8013674 <_strtod_l+0x57c>)
 8013406:	a819      	add	r0, sp, #100	@ 0x64
 8013408:	f001 f9e2 	bl	80147d0 <__match>
 801340c:	2800      	cmp	r0, #0
 801340e:	f43f aec7 	beq.w	80131a0 <_strtod_l+0xa8>
 8013412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013414:	781b      	ldrb	r3, [r3, #0]
 8013416:	2b28      	cmp	r3, #40	@ 0x28
 8013418:	d12e      	bne.n	8013478 <_strtod_l+0x380>
 801341a:	4997      	ldr	r1, [pc, #604]	@ (8013678 <_strtod_l+0x580>)
 801341c:	aa1c      	add	r2, sp, #112	@ 0x70
 801341e:	a819      	add	r0, sp, #100	@ 0x64
 8013420:	f001 f9ea 	bl	80147f8 <__hexnan>
 8013424:	2805      	cmp	r0, #5
 8013426:	d127      	bne.n	8013478 <_strtod_l+0x380>
 8013428:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801342a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801342e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013432:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013436:	e698      	b.n	801316a <_strtod_l+0x72>
 8013438:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801343a:	fb08 2101 	mla	r1, r8, r1, r2
 801343e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013442:	920e      	str	r2, [sp, #56]	@ 0x38
 8013444:	e7b5      	b.n	80133b2 <_strtod_l+0x2ba>
 8013446:	2a6e      	cmp	r2, #110	@ 0x6e
 8013448:	e7da      	b.n	8013400 <_strtod_l+0x308>
 801344a:	498c      	ldr	r1, [pc, #560]	@ (801367c <_strtod_l+0x584>)
 801344c:	a819      	add	r0, sp, #100	@ 0x64
 801344e:	f001 f9bf 	bl	80147d0 <__match>
 8013452:	2800      	cmp	r0, #0
 8013454:	f43f aea4 	beq.w	80131a0 <_strtod_l+0xa8>
 8013458:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801345a:	4989      	ldr	r1, [pc, #548]	@ (8013680 <_strtod_l+0x588>)
 801345c:	3b01      	subs	r3, #1
 801345e:	a819      	add	r0, sp, #100	@ 0x64
 8013460:	9319      	str	r3, [sp, #100]	@ 0x64
 8013462:	f001 f9b5 	bl	80147d0 <__match>
 8013466:	b910      	cbnz	r0, 801346e <_strtod_l+0x376>
 8013468:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801346a:	3301      	adds	r3, #1
 801346c:	9319      	str	r3, [sp, #100]	@ 0x64
 801346e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013690 <_strtod_l+0x598>
 8013472:	f04f 0a00 	mov.w	sl, #0
 8013476:	e678      	b.n	801316a <_strtod_l+0x72>
 8013478:	4882      	ldr	r0, [pc, #520]	@ (8013684 <_strtod_l+0x58c>)
 801347a:	f000 fee5 	bl	8014248 <nan>
 801347e:	ec5b ab10 	vmov	sl, fp, d0
 8013482:	e672      	b.n	801316a <_strtod_l+0x72>
 8013484:	eba8 0309 	sub.w	r3, r8, r9
 8013488:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801348a:	9309      	str	r3, [sp, #36]	@ 0x24
 801348c:	2f00      	cmp	r7, #0
 801348e:	bf08      	it	eq
 8013490:	462f      	moveq	r7, r5
 8013492:	2d10      	cmp	r5, #16
 8013494:	462c      	mov	r4, r5
 8013496:	bfa8      	it	ge
 8013498:	2410      	movge	r4, #16
 801349a:	f7ed f83b 	bl	8000514 <__aeabi_ui2d>
 801349e:	2d09      	cmp	r5, #9
 80134a0:	4682      	mov	sl, r0
 80134a2:	468b      	mov	fp, r1
 80134a4:	dc13      	bgt.n	80134ce <_strtod_l+0x3d6>
 80134a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	f43f ae5e 	beq.w	801316a <_strtod_l+0x72>
 80134ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134b0:	dd78      	ble.n	80135a4 <_strtod_l+0x4ac>
 80134b2:	2b16      	cmp	r3, #22
 80134b4:	dc5f      	bgt.n	8013576 <_strtod_l+0x47e>
 80134b6:	4974      	ldr	r1, [pc, #464]	@ (8013688 <_strtod_l+0x590>)
 80134b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80134bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134c0:	4652      	mov	r2, sl
 80134c2:	465b      	mov	r3, fp
 80134c4:	f7ed f8a0 	bl	8000608 <__aeabi_dmul>
 80134c8:	4682      	mov	sl, r0
 80134ca:	468b      	mov	fp, r1
 80134cc:	e64d      	b.n	801316a <_strtod_l+0x72>
 80134ce:	4b6e      	ldr	r3, [pc, #440]	@ (8013688 <_strtod_l+0x590>)
 80134d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80134d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80134d8:	f7ed f896 	bl	8000608 <__aeabi_dmul>
 80134dc:	4682      	mov	sl, r0
 80134de:	9808      	ldr	r0, [sp, #32]
 80134e0:	468b      	mov	fp, r1
 80134e2:	f7ed f817 	bl	8000514 <__aeabi_ui2d>
 80134e6:	4602      	mov	r2, r0
 80134e8:	460b      	mov	r3, r1
 80134ea:	4650      	mov	r0, sl
 80134ec:	4659      	mov	r1, fp
 80134ee:	f7ec fed5 	bl	800029c <__adddf3>
 80134f2:	2d0f      	cmp	r5, #15
 80134f4:	4682      	mov	sl, r0
 80134f6:	468b      	mov	fp, r1
 80134f8:	ddd5      	ble.n	80134a6 <_strtod_l+0x3ae>
 80134fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134fc:	1b2c      	subs	r4, r5, r4
 80134fe:	441c      	add	r4, r3
 8013500:	2c00      	cmp	r4, #0
 8013502:	f340 8096 	ble.w	8013632 <_strtod_l+0x53a>
 8013506:	f014 030f 	ands.w	r3, r4, #15
 801350a:	d00a      	beq.n	8013522 <_strtod_l+0x42a>
 801350c:	495e      	ldr	r1, [pc, #376]	@ (8013688 <_strtod_l+0x590>)
 801350e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013512:	4652      	mov	r2, sl
 8013514:	465b      	mov	r3, fp
 8013516:	e9d1 0100 	ldrd	r0, r1, [r1]
 801351a:	f7ed f875 	bl	8000608 <__aeabi_dmul>
 801351e:	4682      	mov	sl, r0
 8013520:	468b      	mov	fp, r1
 8013522:	f034 040f 	bics.w	r4, r4, #15
 8013526:	d073      	beq.n	8013610 <_strtod_l+0x518>
 8013528:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801352c:	dd48      	ble.n	80135c0 <_strtod_l+0x4c8>
 801352e:	2400      	movs	r4, #0
 8013530:	46a0      	mov	r8, r4
 8013532:	940a      	str	r4, [sp, #40]	@ 0x28
 8013534:	46a1      	mov	r9, r4
 8013536:	9a05      	ldr	r2, [sp, #20]
 8013538:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013690 <_strtod_l+0x598>
 801353c:	2322      	movs	r3, #34	@ 0x22
 801353e:	6013      	str	r3, [r2, #0]
 8013540:	f04f 0a00 	mov.w	sl, #0
 8013544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013546:	2b00      	cmp	r3, #0
 8013548:	f43f ae0f 	beq.w	801316a <_strtod_l+0x72>
 801354c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801354e:	9805      	ldr	r0, [sp, #20]
 8013550:	f7ff f942 	bl	80127d8 <_Bfree>
 8013554:	9805      	ldr	r0, [sp, #20]
 8013556:	4649      	mov	r1, r9
 8013558:	f7ff f93e 	bl	80127d8 <_Bfree>
 801355c:	9805      	ldr	r0, [sp, #20]
 801355e:	4641      	mov	r1, r8
 8013560:	f7ff f93a 	bl	80127d8 <_Bfree>
 8013564:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013566:	9805      	ldr	r0, [sp, #20]
 8013568:	f7ff f936 	bl	80127d8 <_Bfree>
 801356c:	9805      	ldr	r0, [sp, #20]
 801356e:	4621      	mov	r1, r4
 8013570:	f7ff f932 	bl	80127d8 <_Bfree>
 8013574:	e5f9      	b.n	801316a <_strtod_l+0x72>
 8013576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013578:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801357c:	4293      	cmp	r3, r2
 801357e:	dbbc      	blt.n	80134fa <_strtod_l+0x402>
 8013580:	4c41      	ldr	r4, [pc, #260]	@ (8013688 <_strtod_l+0x590>)
 8013582:	f1c5 050f 	rsb	r5, r5, #15
 8013586:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801358a:	4652      	mov	r2, sl
 801358c:	465b      	mov	r3, fp
 801358e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013592:	f7ed f839 	bl	8000608 <__aeabi_dmul>
 8013596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013598:	1b5d      	subs	r5, r3, r5
 801359a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801359e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80135a2:	e78f      	b.n	80134c4 <_strtod_l+0x3cc>
 80135a4:	3316      	adds	r3, #22
 80135a6:	dba8      	blt.n	80134fa <_strtod_l+0x402>
 80135a8:	4b37      	ldr	r3, [pc, #220]	@ (8013688 <_strtod_l+0x590>)
 80135aa:	eba9 0808 	sub.w	r8, r9, r8
 80135ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80135b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80135b6:	4650      	mov	r0, sl
 80135b8:	4659      	mov	r1, fp
 80135ba:	f7ed f94f 	bl	800085c <__aeabi_ddiv>
 80135be:	e783      	b.n	80134c8 <_strtod_l+0x3d0>
 80135c0:	4b32      	ldr	r3, [pc, #200]	@ (801368c <_strtod_l+0x594>)
 80135c2:	9308      	str	r3, [sp, #32]
 80135c4:	2300      	movs	r3, #0
 80135c6:	1124      	asrs	r4, r4, #4
 80135c8:	4650      	mov	r0, sl
 80135ca:	4659      	mov	r1, fp
 80135cc:	461e      	mov	r6, r3
 80135ce:	2c01      	cmp	r4, #1
 80135d0:	dc21      	bgt.n	8013616 <_strtod_l+0x51e>
 80135d2:	b10b      	cbz	r3, 80135d8 <_strtod_l+0x4e0>
 80135d4:	4682      	mov	sl, r0
 80135d6:	468b      	mov	fp, r1
 80135d8:	492c      	ldr	r1, [pc, #176]	@ (801368c <_strtod_l+0x594>)
 80135da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80135de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80135e2:	4652      	mov	r2, sl
 80135e4:	465b      	mov	r3, fp
 80135e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135ea:	f7ed f80d 	bl	8000608 <__aeabi_dmul>
 80135ee:	4b28      	ldr	r3, [pc, #160]	@ (8013690 <_strtod_l+0x598>)
 80135f0:	460a      	mov	r2, r1
 80135f2:	400b      	ands	r3, r1
 80135f4:	4927      	ldr	r1, [pc, #156]	@ (8013694 <_strtod_l+0x59c>)
 80135f6:	428b      	cmp	r3, r1
 80135f8:	4682      	mov	sl, r0
 80135fa:	d898      	bhi.n	801352e <_strtod_l+0x436>
 80135fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013600:	428b      	cmp	r3, r1
 8013602:	bf86      	itte	hi
 8013604:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013698 <_strtod_l+0x5a0>
 8013608:	f04f 3aff 	movhi.w	sl, #4294967295
 801360c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013610:	2300      	movs	r3, #0
 8013612:	9308      	str	r3, [sp, #32]
 8013614:	e07a      	b.n	801370c <_strtod_l+0x614>
 8013616:	07e2      	lsls	r2, r4, #31
 8013618:	d505      	bpl.n	8013626 <_strtod_l+0x52e>
 801361a:	9b08      	ldr	r3, [sp, #32]
 801361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013620:	f7ec fff2 	bl	8000608 <__aeabi_dmul>
 8013624:	2301      	movs	r3, #1
 8013626:	9a08      	ldr	r2, [sp, #32]
 8013628:	3208      	adds	r2, #8
 801362a:	3601      	adds	r6, #1
 801362c:	1064      	asrs	r4, r4, #1
 801362e:	9208      	str	r2, [sp, #32]
 8013630:	e7cd      	b.n	80135ce <_strtod_l+0x4d6>
 8013632:	d0ed      	beq.n	8013610 <_strtod_l+0x518>
 8013634:	4264      	negs	r4, r4
 8013636:	f014 020f 	ands.w	r2, r4, #15
 801363a:	d00a      	beq.n	8013652 <_strtod_l+0x55a>
 801363c:	4b12      	ldr	r3, [pc, #72]	@ (8013688 <_strtod_l+0x590>)
 801363e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013642:	4650      	mov	r0, sl
 8013644:	4659      	mov	r1, fp
 8013646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364a:	f7ed f907 	bl	800085c <__aeabi_ddiv>
 801364e:	4682      	mov	sl, r0
 8013650:	468b      	mov	fp, r1
 8013652:	1124      	asrs	r4, r4, #4
 8013654:	d0dc      	beq.n	8013610 <_strtod_l+0x518>
 8013656:	2c1f      	cmp	r4, #31
 8013658:	dd20      	ble.n	801369c <_strtod_l+0x5a4>
 801365a:	2400      	movs	r4, #0
 801365c:	46a0      	mov	r8, r4
 801365e:	940a      	str	r4, [sp, #40]	@ 0x28
 8013660:	46a1      	mov	r9, r4
 8013662:	9a05      	ldr	r2, [sp, #20]
 8013664:	2322      	movs	r3, #34	@ 0x22
 8013666:	f04f 0a00 	mov.w	sl, #0
 801366a:	f04f 0b00 	mov.w	fp, #0
 801366e:	6013      	str	r3, [r2, #0]
 8013670:	e768      	b.n	8013544 <_strtod_l+0x44c>
 8013672:	bf00      	nop
 8013674:	08017005 	.word	0x08017005
 8013678:	0801721c 	.word	0x0801721c
 801367c:	08016ffd 	.word	0x08016ffd
 8013680:	08017034 	.word	0x08017034
 8013684:	080173c5 	.word	0x080173c5
 8013688:	08017150 	.word	0x08017150
 801368c:	08017128 	.word	0x08017128
 8013690:	7ff00000 	.word	0x7ff00000
 8013694:	7ca00000 	.word	0x7ca00000
 8013698:	7fefffff 	.word	0x7fefffff
 801369c:	f014 0310 	ands.w	r3, r4, #16
 80136a0:	bf18      	it	ne
 80136a2:	236a      	movne	r3, #106	@ 0x6a
 80136a4:	4ea9      	ldr	r6, [pc, #676]	@ (801394c <_strtod_l+0x854>)
 80136a6:	9308      	str	r3, [sp, #32]
 80136a8:	4650      	mov	r0, sl
 80136aa:	4659      	mov	r1, fp
 80136ac:	2300      	movs	r3, #0
 80136ae:	07e2      	lsls	r2, r4, #31
 80136b0:	d504      	bpl.n	80136bc <_strtod_l+0x5c4>
 80136b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80136b6:	f7ec ffa7 	bl	8000608 <__aeabi_dmul>
 80136ba:	2301      	movs	r3, #1
 80136bc:	1064      	asrs	r4, r4, #1
 80136be:	f106 0608 	add.w	r6, r6, #8
 80136c2:	d1f4      	bne.n	80136ae <_strtod_l+0x5b6>
 80136c4:	b10b      	cbz	r3, 80136ca <_strtod_l+0x5d2>
 80136c6:	4682      	mov	sl, r0
 80136c8:	468b      	mov	fp, r1
 80136ca:	9b08      	ldr	r3, [sp, #32]
 80136cc:	b1b3      	cbz	r3, 80136fc <_strtod_l+0x604>
 80136ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80136d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	4659      	mov	r1, fp
 80136da:	dd0f      	ble.n	80136fc <_strtod_l+0x604>
 80136dc:	2b1f      	cmp	r3, #31
 80136de:	dd55      	ble.n	801378c <_strtod_l+0x694>
 80136e0:	2b34      	cmp	r3, #52	@ 0x34
 80136e2:	bfde      	ittt	le
 80136e4:	f04f 33ff 	movle.w	r3, #4294967295
 80136e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80136ec:	4093      	lslle	r3, r2
 80136ee:	f04f 0a00 	mov.w	sl, #0
 80136f2:	bfcc      	ite	gt
 80136f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80136f8:	ea03 0b01 	andle.w	fp, r3, r1
 80136fc:	2200      	movs	r2, #0
 80136fe:	2300      	movs	r3, #0
 8013700:	4650      	mov	r0, sl
 8013702:	4659      	mov	r1, fp
 8013704:	f7ed f9e8 	bl	8000ad8 <__aeabi_dcmpeq>
 8013708:	2800      	cmp	r0, #0
 801370a:	d1a6      	bne.n	801365a <_strtod_l+0x562>
 801370c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801370e:	9300      	str	r3, [sp, #0]
 8013710:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013712:	9805      	ldr	r0, [sp, #20]
 8013714:	462b      	mov	r3, r5
 8013716:	463a      	mov	r2, r7
 8013718:	f7ff f8c6 	bl	80128a8 <__s2b>
 801371c:	900a      	str	r0, [sp, #40]	@ 0x28
 801371e:	2800      	cmp	r0, #0
 8013720:	f43f af05 	beq.w	801352e <_strtod_l+0x436>
 8013724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013726:	2a00      	cmp	r2, #0
 8013728:	eba9 0308 	sub.w	r3, r9, r8
 801372c:	bfa8      	it	ge
 801372e:	2300      	movge	r3, #0
 8013730:	9312      	str	r3, [sp, #72]	@ 0x48
 8013732:	2400      	movs	r4, #0
 8013734:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013738:	9316      	str	r3, [sp, #88]	@ 0x58
 801373a:	46a0      	mov	r8, r4
 801373c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801373e:	9805      	ldr	r0, [sp, #20]
 8013740:	6859      	ldr	r1, [r3, #4]
 8013742:	f7ff f809 	bl	8012758 <_Balloc>
 8013746:	4681      	mov	r9, r0
 8013748:	2800      	cmp	r0, #0
 801374a:	f43f aef4 	beq.w	8013536 <_strtod_l+0x43e>
 801374e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013750:	691a      	ldr	r2, [r3, #16]
 8013752:	3202      	adds	r2, #2
 8013754:	f103 010c 	add.w	r1, r3, #12
 8013758:	0092      	lsls	r2, r2, #2
 801375a:	300c      	adds	r0, #12
 801375c:	f7fe f89b 	bl	8011896 <memcpy>
 8013760:	ec4b ab10 	vmov	d0, sl, fp
 8013764:	9805      	ldr	r0, [sp, #20]
 8013766:	aa1c      	add	r2, sp, #112	@ 0x70
 8013768:	a91b      	add	r1, sp, #108	@ 0x6c
 801376a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801376e:	f7ff fbd7 	bl	8012f20 <__d2b>
 8013772:	901a      	str	r0, [sp, #104]	@ 0x68
 8013774:	2800      	cmp	r0, #0
 8013776:	f43f aede 	beq.w	8013536 <_strtod_l+0x43e>
 801377a:	9805      	ldr	r0, [sp, #20]
 801377c:	2101      	movs	r1, #1
 801377e:	f7ff f929 	bl	80129d4 <__i2b>
 8013782:	4680      	mov	r8, r0
 8013784:	b948      	cbnz	r0, 801379a <_strtod_l+0x6a2>
 8013786:	f04f 0800 	mov.w	r8, #0
 801378a:	e6d4      	b.n	8013536 <_strtod_l+0x43e>
 801378c:	f04f 32ff 	mov.w	r2, #4294967295
 8013790:	fa02 f303 	lsl.w	r3, r2, r3
 8013794:	ea03 0a0a 	and.w	sl, r3, sl
 8013798:	e7b0      	b.n	80136fc <_strtod_l+0x604>
 801379a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801379c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801379e:	2d00      	cmp	r5, #0
 80137a0:	bfab      	itete	ge
 80137a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80137a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80137a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80137a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80137aa:	bfac      	ite	ge
 80137ac:	18ef      	addge	r7, r5, r3
 80137ae:	1b5e      	sublt	r6, r3, r5
 80137b0:	9b08      	ldr	r3, [sp, #32]
 80137b2:	1aed      	subs	r5, r5, r3
 80137b4:	4415      	add	r5, r2
 80137b6:	4b66      	ldr	r3, [pc, #408]	@ (8013950 <_strtod_l+0x858>)
 80137b8:	3d01      	subs	r5, #1
 80137ba:	429d      	cmp	r5, r3
 80137bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80137c0:	da50      	bge.n	8013864 <_strtod_l+0x76c>
 80137c2:	1b5b      	subs	r3, r3, r5
 80137c4:	2b1f      	cmp	r3, #31
 80137c6:	eba2 0203 	sub.w	r2, r2, r3
 80137ca:	f04f 0101 	mov.w	r1, #1
 80137ce:	dc3d      	bgt.n	801384c <_strtod_l+0x754>
 80137d0:	fa01 f303 	lsl.w	r3, r1, r3
 80137d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80137d6:	2300      	movs	r3, #0
 80137d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80137da:	18bd      	adds	r5, r7, r2
 80137dc:	9b08      	ldr	r3, [sp, #32]
 80137de:	42af      	cmp	r7, r5
 80137e0:	4416      	add	r6, r2
 80137e2:	441e      	add	r6, r3
 80137e4:	463b      	mov	r3, r7
 80137e6:	bfa8      	it	ge
 80137e8:	462b      	movge	r3, r5
 80137ea:	42b3      	cmp	r3, r6
 80137ec:	bfa8      	it	ge
 80137ee:	4633      	movge	r3, r6
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	bfc2      	ittt	gt
 80137f4:	1aed      	subgt	r5, r5, r3
 80137f6:	1af6      	subgt	r6, r6, r3
 80137f8:	1aff      	subgt	r7, r7, r3
 80137fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	dd16      	ble.n	801382e <_strtod_l+0x736>
 8013800:	4641      	mov	r1, r8
 8013802:	9805      	ldr	r0, [sp, #20]
 8013804:	461a      	mov	r2, r3
 8013806:	f7ff f9a5 	bl	8012b54 <__pow5mult>
 801380a:	4680      	mov	r8, r0
 801380c:	2800      	cmp	r0, #0
 801380e:	d0ba      	beq.n	8013786 <_strtod_l+0x68e>
 8013810:	4601      	mov	r1, r0
 8013812:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013814:	9805      	ldr	r0, [sp, #20]
 8013816:	f7ff f8f3 	bl	8012a00 <__multiply>
 801381a:	900e      	str	r0, [sp, #56]	@ 0x38
 801381c:	2800      	cmp	r0, #0
 801381e:	f43f ae8a 	beq.w	8013536 <_strtod_l+0x43e>
 8013822:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013824:	9805      	ldr	r0, [sp, #20]
 8013826:	f7fe ffd7 	bl	80127d8 <_Bfree>
 801382a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801382c:	931a      	str	r3, [sp, #104]	@ 0x68
 801382e:	2d00      	cmp	r5, #0
 8013830:	dc1d      	bgt.n	801386e <_strtod_l+0x776>
 8013832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013834:	2b00      	cmp	r3, #0
 8013836:	dd23      	ble.n	8013880 <_strtod_l+0x788>
 8013838:	4649      	mov	r1, r9
 801383a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801383c:	9805      	ldr	r0, [sp, #20]
 801383e:	f7ff f989 	bl	8012b54 <__pow5mult>
 8013842:	4681      	mov	r9, r0
 8013844:	b9e0      	cbnz	r0, 8013880 <_strtod_l+0x788>
 8013846:	f04f 0900 	mov.w	r9, #0
 801384a:	e674      	b.n	8013536 <_strtod_l+0x43e>
 801384c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013850:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013854:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013858:	35e2      	adds	r5, #226	@ 0xe2
 801385a:	fa01 f305 	lsl.w	r3, r1, r5
 801385e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013860:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013862:	e7ba      	b.n	80137da <_strtod_l+0x6e2>
 8013864:	2300      	movs	r3, #0
 8013866:	9310      	str	r3, [sp, #64]	@ 0x40
 8013868:	2301      	movs	r3, #1
 801386a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801386c:	e7b5      	b.n	80137da <_strtod_l+0x6e2>
 801386e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013870:	9805      	ldr	r0, [sp, #20]
 8013872:	462a      	mov	r2, r5
 8013874:	f7ff f9c8 	bl	8012c08 <__lshift>
 8013878:	901a      	str	r0, [sp, #104]	@ 0x68
 801387a:	2800      	cmp	r0, #0
 801387c:	d1d9      	bne.n	8013832 <_strtod_l+0x73a>
 801387e:	e65a      	b.n	8013536 <_strtod_l+0x43e>
 8013880:	2e00      	cmp	r6, #0
 8013882:	dd07      	ble.n	8013894 <_strtod_l+0x79c>
 8013884:	4649      	mov	r1, r9
 8013886:	9805      	ldr	r0, [sp, #20]
 8013888:	4632      	mov	r2, r6
 801388a:	f7ff f9bd 	bl	8012c08 <__lshift>
 801388e:	4681      	mov	r9, r0
 8013890:	2800      	cmp	r0, #0
 8013892:	d0d8      	beq.n	8013846 <_strtod_l+0x74e>
 8013894:	2f00      	cmp	r7, #0
 8013896:	dd08      	ble.n	80138aa <_strtod_l+0x7b2>
 8013898:	4641      	mov	r1, r8
 801389a:	9805      	ldr	r0, [sp, #20]
 801389c:	463a      	mov	r2, r7
 801389e:	f7ff f9b3 	bl	8012c08 <__lshift>
 80138a2:	4680      	mov	r8, r0
 80138a4:	2800      	cmp	r0, #0
 80138a6:	f43f ae46 	beq.w	8013536 <_strtod_l+0x43e>
 80138aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80138ac:	9805      	ldr	r0, [sp, #20]
 80138ae:	464a      	mov	r2, r9
 80138b0:	f7ff fa32 	bl	8012d18 <__mdiff>
 80138b4:	4604      	mov	r4, r0
 80138b6:	2800      	cmp	r0, #0
 80138b8:	f43f ae3d 	beq.w	8013536 <_strtod_l+0x43e>
 80138bc:	68c3      	ldr	r3, [r0, #12]
 80138be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80138c0:	2300      	movs	r3, #0
 80138c2:	60c3      	str	r3, [r0, #12]
 80138c4:	4641      	mov	r1, r8
 80138c6:	f7ff fa0b 	bl	8012ce0 <__mcmp>
 80138ca:	2800      	cmp	r0, #0
 80138cc:	da46      	bge.n	801395c <_strtod_l+0x864>
 80138ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138d0:	ea53 030a 	orrs.w	r3, r3, sl
 80138d4:	d16c      	bne.n	80139b0 <_strtod_l+0x8b8>
 80138d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d168      	bne.n	80139b0 <_strtod_l+0x8b8>
 80138de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80138e2:	0d1b      	lsrs	r3, r3, #20
 80138e4:	051b      	lsls	r3, r3, #20
 80138e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80138ea:	d961      	bls.n	80139b0 <_strtod_l+0x8b8>
 80138ec:	6963      	ldr	r3, [r4, #20]
 80138ee:	b913      	cbnz	r3, 80138f6 <_strtod_l+0x7fe>
 80138f0:	6923      	ldr	r3, [r4, #16]
 80138f2:	2b01      	cmp	r3, #1
 80138f4:	dd5c      	ble.n	80139b0 <_strtod_l+0x8b8>
 80138f6:	4621      	mov	r1, r4
 80138f8:	2201      	movs	r2, #1
 80138fa:	9805      	ldr	r0, [sp, #20]
 80138fc:	f7ff f984 	bl	8012c08 <__lshift>
 8013900:	4641      	mov	r1, r8
 8013902:	4604      	mov	r4, r0
 8013904:	f7ff f9ec 	bl	8012ce0 <__mcmp>
 8013908:	2800      	cmp	r0, #0
 801390a:	dd51      	ble.n	80139b0 <_strtod_l+0x8b8>
 801390c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013910:	9a08      	ldr	r2, [sp, #32]
 8013912:	0d1b      	lsrs	r3, r3, #20
 8013914:	051b      	lsls	r3, r3, #20
 8013916:	2a00      	cmp	r2, #0
 8013918:	d06b      	beq.n	80139f2 <_strtod_l+0x8fa>
 801391a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801391e:	d868      	bhi.n	80139f2 <_strtod_l+0x8fa>
 8013920:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013924:	f67f ae9d 	bls.w	8013662 <_strtod_l+0x56a>
 8013928:	4b0a      	ldr	r3, [pc, #40]	@ (8013954 <_strtod_l+0x85c>)
 801392a:	4650      	mov	r0, sl
 801392c:	4659      	mov	r1, fp
 801392e:	2200      	movs	r2, #0
 8013930:	f7ec fe6a 	bl	8000608 <__aeabi_dmul>
 8013934:	4b08      	ldr	r3, [pc, #32]	@ (8013958 <_strtod_l+0x860>)
 8013936:	400b      	ands	r3, r1
 8013938:	4682      	mov	sl, r0
 801393a:	468b      	mov	fp, r1
 801393c:	2b00      	cmp	r3, #0
 801393e:	f47f ae05 	bne.w	801354c <_strtod_l+0x454>
 8013942:	9a05      	ldr	r2, [sp, #20]
 8013944:	2322      	movs	r3, #34	@ 0x22
 8013946:	6013      	str	r3, [r2, #0]
 8013948:	e600      	b.n	801354c <_strtod_l+0x454>
 801394a:	bf00      	nop
 801394c:	08017248 	.word	0x08017248
 8013950:	fffffc02 	.word	0xfffffc02
 8013954:	39500000 	.word	0x39500000
 8013958:	7ff00000 	.word	0x7ff00000
 801395c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013960:	d165      	bne.n	8013a2e <_strtod_l+0x936>
 8013962:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013968:	b35a      	cbz	r2, 80139c2 <_strtod_l+0x8ca>
 801396a:	4a9f      	ldr	r2, [pc, #636]	@ (8013be8 <_strtod_l+0xaf0>)
 801396c:	4293      	cmp	r3, r2
 801396e:	d12b      	bne.n	80139c8 <_strtod_l+0x8d0>
 8013970:	9b08      	ldr	r3, [sp, #32]
 8013972:	4651      	mov	r1, sl
 8013974:	b303      	cbz	r3, 80139b8 <_strtod_l+0x8c0>
 8013976:	4b9d      	ldr	r3, [pc, #628]	@ (8013bec <_strtod_l+0xaf4>)
 8013978:	465a      	mov	r2, fp
 801397a:	4013      	ands	r3, r2
 801397c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013980:	f04f 32ff 	mov.w	r2, #4294967295
 8013984:	d81b      	bhi.n	80139be <_strtod_l+0x8c6>
 8013986:	0d1b      	lsrs	r3, r3, #20
 8013988:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801398c:	fa02 f303 	lsl.w	r3, r2, r3
 8013990:	4299      	cmp	r1, r3
 8013992:	d119      	bne.n	80139c8 <_strtod_l+0x8d0>
 8013994:	4b96      	ldr	r3, [pc, #600]	@ (8013bf0 <_strtod_l+0xaf8>)
 8013996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013998:	429a      	cmp	r2, r3
 801399a:	d102      	bne.n	80139a2 <_strtod_l+0x8aa>
 801399c:	3101      	adds	r1, #1
 801399e:	f43f adca 	beq.w	8013536 <_strtod_l+0x43e>
 80139a2:	4b92      	ldr	r3, [pc, #584]	@ (8013bec <_strtod_l+0xaf4>)
 80139a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80139a6:	401a      	ands	r2, r3
 80139a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80139ac:	f04f 0a00 	mov.w	sl, #0
 80139b0:	9b08      	ldr	r3, [sp, #32]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d1b8      	bne.n	8013928 <_strtod_l+0x830>
 80139b6:	e5c9      	b.n	801354c <_strtod_l+0x454>
 80139b8:	f04f 33ff 	mov.w	r3, #4294967295
 80139bc:	e7e8      	b.n	8013990 <_strtod_l+0x898>
 80139be:	4613      	mov	r3, r2
 80139c0:	e7e6      	b.n	8013990 <_strtod_l+0x898>
 80139c2:	ea53 030a 	orrs.w	r3, r3, sl
 80139c6:	d0a1      	beq.n	801390c <_strtod_l+0x814>
 80139c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80139ca:	b1db      	cbz	r3, 8013a04 <_strtod_l+0x90c>
 80139cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80139ce:	4213      	tst	r3, r2
 80139d0:	d0ee      	beq.n	80139b0 <_strtod_l+0x8b8>
 80139d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139d4:	9a08      	ldr	r2, [sp, #32]
 80139d6:	4650      	mov	r0, sl
 80139d8:	4659      	mov	r1, fp
 80139da:	b1bb      	cbz	r3, 8013a0c <_strtod_l+0x914>
 80139dc:	f7ff fb6e 	bl	80130bc <sulp>
 80139e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80139e4:	ec53 2b10 	vmov	r2, r3, d0
 80139e8:	f7ec fc58 	bl	800029c <__adddf3>
 80139ec:	4682      	mov	sl, r0
 80139ee:	468b      	mov	fp, r1
 80139f0:	e7de      	b.n	80139b0 <_strtod_l+0x8b8>
 80139f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80139f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80139fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80139fe:	f04f 3aff 	mov.w	sl, #4294967295
 8013a02:	e7d5      	b.n	80139b0 <_strtod_l+0x8b8>
 8013a04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013a06:	ea13 0f0a 	tst.w	r3, sl
 8013a0a:	e7e1      	b.n	80139d0 <_strtod_l+0x8d8>
 8013a0c:	f7ff fb56 	bl	80130bc <sulp>
 8013a10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a14:	ec53 2b10 	vmov	r2, r3, d0
 8013a18:	f7ec fc3e 	bl	8000298 <__aeabi_dsub>
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	2300      	movs	r3, #0
 8013a20:	4682      	mov	sl, r0
 8013a22:	468b      	mov	fp, r1
 8013a24:	f7ed f858 	bl	8000ad8 <__aeabi_dcmpeq>
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	d0c1      	beq.n	80139b0 <_strtod_l+0x8b8>
 8013a2c:	e619      	b.n	8013662 <_strtod_l+0x56a>
 8013a2e:	4641      	mov	r1, r8
 8013a30:	4620      	mov	r0, r4
 8013a32:	f7ff facd 	bl	8012fd0 <__ratio>
 8013a36:	ec57 6b10 	vmov	r6, r7, d0
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013a40:	4630      	mov	r0, r6
 8013a42:	4639      	mov	r1, r7
 8013a44:	f7ed f85c 	bl	8000b00 <__aeabi_dcmple>
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	d06f      	beq.n	8013b2c <_strtod_l+0xa34>
 8013a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d17a      	bne.n	8013b48 <_strtod_l+0xa50>
 8013a52:	f1ba 0f00 	cmp.w	sl, #0
 8013a56:	d158      	bne.n	8013b0a <_strtod_l+0xa12>
 8013a58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d15a      	bne.n	8013b18 <_strtod_l+0xa20>
 8013a62:	4b64      	ldr	r3, [pc, #400]	@ (8013bf4 <_strtod_l+0xafc>)
 8013a64:	2200      	movs	r2, #0
 8013a66:	4630      	mov	r0, r6
 8013a68:	4639      	mov	r1, r7
 8013a6a:	f7ed f83f 	bl	8000aec <__aeabi_dcmplt>
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d159      	bne.n	8013b26 <_strtod_l+0xa2e>
 8013a72:	4630      	mov	r0, r6
 8013a74:	4639      	mov	r1, r7
 8013a76:	4b60      	ldr	r3, [pc, #384]	@ (8013bf8 <_strtod_l+0xb00>)
 8013a78:	2200      	movs	r2, #0
 8013a7a:	f7ec fdc5 	bl	8000608 <__aeabi_dmul>
 8013a7e:	4606      	mov	r6, r0
 8013a80:	460f      	mov	r7, r1
 8013a82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013a86:	9606      	str	r6, [sp, #24]
 8013a88:	9307      	str	r3, [sp, #28]
 8013a8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a8e:	4d57      	ldr	r5, [pc, #348]	@ (8013bec <_strtod_l+0xaf4>)
 8013a90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013a94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a96:	401d      	ands	r5, r3
 8013a98:	4b58      	ldr	r3, [pc, #352]	@ (8013bfc <_strtod_l+0xb04>)
 8013a9a:	429d      	cmp	r5, r3
 8013a9c:	f040 80b2 	bne.w	8013c04 <_strtod_l+0xb0c>
 8013aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013aa2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013aa6:	ec4b ab10 	vmov	d0, sl, fp
 8013aaa:	f7ff f9c9 	bl	8012e40 <__ulp>
 8013aae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ab2:	ec51 0b10 	vmov	r0, r1, d0
 8013ab6:	f7ec fda7 	bl	8000608 <__aeabi_dmul>
 8013aba:	4652      	mov	r2, sl
 8013abc:	465b      	mov	r3, fp
 8013abe:	f7ec fbed 	bl	800029c <__adddf3>
 8013ac2:	460b      	mov	r3, r1
 8013ac4:	4949      	ldr	r1, [pc, #292]	@ (8013bec <_strtod_l+0xaf4>)
 8013ac6:	4a4e      	ldr	r2, [pc, #312]	@ (8013c00 <_strtod_l+0xb08>)
 8013ac8:	4019      	ands	r1, r3
 8013aca:	4291      	cmp	r1, r2
 8013acc:	4682      	mov	sl, r0
 8013ace:	d942      	bls.n	8013b56 <_strtod_l+0xa5e>
 8013ad0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013ad2:	4b47      	ldr	r3, [pc, #284]	@ (8013bf0 <_strtod_l+0xaf8>)
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d103      	bne.n	8013ae0 <_strtod_l+0x9e8>
 8013ad8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ada:	3301      	adds	r3, #1
 8013adc:	f43f ad2b 	beq.w	8013536 <_strtod_l+0x43e>
 8013ae0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013bf0 <_strtod_l+0xaf8>
 8013ae4:	f04f 3aff 	mov.w	sl, #4294967295
 8013ae8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013aea:	9805      	ldr	r0, [sp, #20]
 8013aec:	f7fe fe74 	bl	80127d8 <_Bfree>
 8013af0:	9805      	ldr	r0, [sp, #20]
 8013af2:	4649      	mov	r1, r9
 8013af4:	f7fe fe70 	bl	80127d8 <_Bfree>
 8013af8:	9805      	ldr	r0, [sp, #20]
 8013afa:	4641      	mov	r1, r8
 8013afc:	f7fe fe6c 	bl	80127d8 <_Bfree>
 8013b00:	9805      	ldr	r0, [sp, #20]
 8013b02:	4621      	mov	r1, r4
 8013b04:	f7fe fe68 	bl	80127d8 <_Bfree>
 8013b08:	e618      	b.n	801373c <_strtod_l+0x644>
 8013b0a:	f1ba 0f01 	cmp.w	sl, #1
 8013b0e:	d103      	bne.n	8013b18 <_strtod_l+0xa20>
 8013b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f43f ada5 	beq.w	8013662 <_strtod_l+0x56a>
 8013b18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013bc8 <_strtod_l+0xad0>
 8013b1c:	4f35      	ldr	r7, [pc, #212]	@ (8013bf4 <_strtod_l+0xafc>)
 8013b1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013b22:	2600      	movs	r6, #0
 8013b24:	e7b1      	b.n	8013a8a <_strtod_l+0x992>
 8013b26:	4f34      	ldr	r7, [pc, #208]	@ (8013bf8 <_strtod_l+0xb00>)
 8013b28:	2600      	movs	r6, #0
 8013b2a:	e7aa      	b.n	8013a82 <_strtod_l+0x98a>
 8013b2c:	4b32      	ldr	r3, [pc, #200]	@ (8013bf8 <_strtod_l+0xb00>)
 8013b2e:	4630      	mov	r0, r6
 8013b30:	4639      	mov	r1, r7
 8013b32:	2200      	movs	r2, #0
 8013b34:	f7ec fd68 	bl	8000608 <__aeabi_dmul>
 8013b38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b3a:	4606      	mov	r6, r0
 8013b3c:	460f      	mov	r7, r1
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d09f      	beq.n	8013a82 <_strtod_l+0x98a>
 8013b42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013b46:	e7a0      	b.n	8013a8a <_strtod_l+0x992>
 8013b48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013bd0 <_strtod_l+0xad8>
 8013b4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013b50:	ec57 6b17 	vmov	r6, r7, d7
 8013b54:	e799      	b.n	8013a8a <_strtod_l+0x992>
 8013b56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013b5a:	9b08      	ldr	r3, [sp, #32]
 8013b5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d1c1      	bne.n	8013ae8 <_strtod_l+0x9f0>
 8013b64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013b68:	0d1b      	lsrs	r3, r3, #20
 8013b6a:	051b      	lsls	r3, r3, #20
 8013b6c:	429d      	cmp	r5, r3
 8013b6e:	d1bb      	bne.n	8013ae8 <_strtod_l+0x9f0>
 8013b70:	4630      	mov	r0, r6
 8013b72:	4639      	mov	r1, r7
 8013b74:	f7ed f8f8 	bl	8000d68 <__aeabi_d2lz>
 8013b78:	f7ec fd18 	bl	80005ac <__aeabi_l2d>
 8013b7c:	4602      	mov	r2, r0
 8013b7e:	460b      	mov	r3, r1
 8013b80:	4630      	mov	r0, r6
 8013b82:	4639      	mov	r1, r7
 8013b84:	f7ec fb88 	bl	8000298 <__aeabi_dsub>
 8013b88:	460b      	mov	r3, r1
 8013b8a:	4602      	mov	r2, r0
 8013b8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013b90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b96:	ea46 060a 	orr.w	r6, r6, sl
 8013b9a:	431e      	orrs	r6, r3
 8013b9c:	d06f      	beq.n	8013c7e <_strtod_l+0xb86>
 8013b9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8013bd8 <_strtod_l+0xae0>)
 8013ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba4:	f7ec ffa2 	bl	8000aec <__aeabi_dcmplt>
 8013ba8:	2800      	cmp	r0, #0
 8013baa:	f47f accf 	bne.w	801354c <_strtod_l+0x454>
 8013bae:	a30c      	add	r3, pc, #48	@ (adr r3, 8013be0 <_strtod_l+0xae8>)
 8013bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013bb8:	f7ec ffb6 	bl	8000b28 <__aeabi_dcmpgt>
 8013bbc:	2800      	cmp	r0, #0
 8013bbe:	d093      	beq.n	8013ae8 <_strtod_l+0x9f0>
 8013bc0:	e4c4      	b.n	801354c <_strtod_l+0x454>
 8013bc2:	bf00      	nop
 8013bc4:	f3af 8000 	nop.w
 8013bc8:	00000000 	.word	0x00000000
 8013bcc:	bff00000 	.word	0xbff00000
 8013bd0:	00000000 	.word	0x00000000
 8013bd4:	3ff00000 	.word	0x3ff00000
 8013bd8:	94a03595 	.word	0x94a03595
 8013bdc:	3fdfffff 	.word	0x3fdfffff
 8013be0:	35afe535 	.word	0x35afe535
 8013be4:	3fe00000 	.word	0x3fe00000
 8013be8:	000fffff 	.word	0x000fffff
 8013bec:	7ff00000 	.word	0x7ff00000
 8013bf0:	7fefffff 	.word	0x7fefffff
 8013bf4:	3ff00000 	.word	0x3ff00000
 8013bf8:	3fe00000 	.word	0x3fe00000
 8013bfc:	7fe00000 	.word	0x7fe00000
 8013c00:	7c9fffff 	.word	0x7c9fffff
 8013c04:	9b08      	ldr	r3, [sp, #32]
 8013c06:	b323      	cbz	r3, 8013c52 <_strtod_l+0xb5a>
 8013c08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013c0c:	d821      	bhi.n	8013c52 <_strtod_l+0xb5a>
 8013c0e:	a328      	add	r3, pc, #160	@ (adr r3, 8013cb0 <_strtod_l+0xbb8>)
 8013c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c14:	4630      	mov	r0, r6
 8013c16:	4639      	mov	r1, r7
 8013c18:	f7ec ff72 	bl	8000b00 <__aeabi_dcmple>
 8013c1c:	b1a0      	cbz	r0, 8013c48 <_strtod_l+0xb50>
 8013c1e:	4639      	mov	r1, r7
 8013c20:	4630      	mov	r0, r6
 8013c22:	f7ec ffc9 	bl	8000bb8 <__aeabi_d2uiz>
 8013c26:	2801      	cmp	r0, #1
 8013c28:	bf38      	it	cc
 8013c2a:	2001      	movcc	r0, #1
 8013c2c:	f7ec fc72 	bl	8000514 <__aeabi_ui2d>
 8013c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c32:	4606      	mov	r6, r0
 8013c34:	460f      	mov	r7, r1
 8013c36:	b9fb      	cbnz	r3, 8013c78 <_strtod_l+0xb80>
 8013c38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8013c3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8013c40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013c44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013c48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013c4e:	1b5b      	subs	r3, r3, r5
 8013c50:	9311      	str	r3, [sp, #68]	@ 0x44
 8013c52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013c56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013c5a:	f7ff f8f1 	bl	8012e40 <__ulp>
 8013c5e:	4650      	mov	r0, sl
 8013c60:	ec53 2b10 	vmov	r2, r3, d0
 8013c64:	4659      	mov	r1, fp
 8013c66:	f7ec fccf 	bl	8000608 <__aeabi_dmul>
 8013c6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013c6e:	f7ec fb15 	bl	800029c <__adddf3>
 8013c72:	4682      	mov	sl, r0
 8013c74:	468b      	mov	fp, r1
 8013c76:	e770      	b.n	8013b5a <_strtod_l+0xa62>
 8013c78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013c7c:	e7e0      	b.n	8013c40 <_strtod_l+0xb48>
 8013c7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8013cb8 <_strtod_l+0xbc0>)
 8013c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c84:	f7ec ff32 	bl	8000aec <__aeabi_dcmplt>
 8013c88:	e798      	b.n	8013bbc <_strtod_l+0xac4>
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013c8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013c90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013c92:	6013      	str	r3, [r2, #0]
 8013c94:	f7ff ba6d 	b.w	8013172 <_strtod_l+0x7a>
 8013c98:	2a65      	cmp	r2, #101	@ 0x65
 8013c9a:	f43f ab66 	beq.w	801336a <_strtod_l+0x272>
 8013c9e:	2a45      	cmp	r2, #69	@ 0x45
 8013ca0:	f43f ab63 	beq.w	801336a <_strtod_l+0x272>
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	f7ff bb9e 	b.w	80133e6 <_strtod_l+0x2ee>
 8013caa:	bf00      	nop
 8013cac:	f3af 8000 	nop.w
 8013cb0:	ffc00000 	.word	0xffc00000
 8013cb4:	41dfffff 	.word	0x41dfffff
 8013cb8:	94a03595 	.word	0x94a03595
 8013cbc:	3fcfffff 	.word	0x3fcfffff

08013cc0 <_strtod_r>:
 8013cc0:	4b01      	ldr	r3, [pc, #4]	@ (8013cc8 <_strtod_r+0x8>)
 8013cc2:	f7ff ba19 	b.w	80130f8 <_strtod_l>
 8013cc6:	bf00      	nop
 8013cc8:	200000f4 	.word	0x200000f4

08013ccc <_strtol_l.constprop.0>:
 8013ccc:	2b24      	cmp	r3, #36	@ 0x24
 8013cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cd2:	4686      	mov	lr, r0
 8013cd4:	4690      	mov	r8, r2
 8013cd6:	d801      	bhi.n	8013cdc <_strtol_l.constprop.0+0x10>
 8013cd8:	2b01      	cmp	r3, #1
 8013cda:	d106      	bne.n	8013cea <_strtol_l.constprop.0+0x1e>
 8013cdc:	f7fd fdae 	bl	801183c <__errno>
 8013ce0:	2316      	movs	r3, #22
 8013ce2:	6003      	str	r3, [r0, #0]
 8013ce4:	2000      	movs	r0, #0
 8013ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cea:	4834      	ldr	r0, [pc, #208]	@ (8013dbc <_strtol_l.constprop.0+0xf0>)
 8013cec:	460d      	mov	r5, r1
 8013cee:	462a      	mov	r2, r5
 8013cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013cf4:	5d06      	ldrb	r6, [r0, r4]
 8013cf6:	f016 0608 	ands.w	r6, r6, #8
 8013cfa:	d1f8      	bne.n	8013cee <_strtol_l.constprop.0+0x22>
 8013cfc:	2c2d      	cmp	r4, #45	@ 0x2d
 8013cfe:	d12d      	bne.n	8013d5c <_strtol_l.constprop.0+0x90>
 8013d00:	782c      	ldrb	r4, [r5, #0]
 8013d02:	2601      	movs	r6, #1
 8013d04:	1c95      	adds	r5, r2, #2
 8013d06:	f033 0210 	bics.w	r2, r3, #16
 8013d0a:	d109      	bne.n	8013d20 <_strtol_l.constprop.0+0x54>
 8013d0c:	2c30      	cmp	r4, #48	@ 0x30
 8013d0e:	d12a      	bne.n	8013d66 <_strtol_l.constprop.0+0x9a>
 8013d10:	782a      	ldrb	r2, [r5, #0]
 8013d12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013d16:	2a58      	cmp	r2, #88	@ 0x58
 8013d18:	d125      	bne.n	8013d66 <_strtol_l.constprop.0+0x9a>
 8013d1a:	786c      	ldrb	r4, [r5, #1]
 8013d1c:	2310      	movs	r3, #16
 8013d1e:	3502      	adds	r5, #2
 8013d20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013d24:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013d28:	2200      	movs	r2, #0
 8013d2a:	fbbc f9f3 	udiv	r9, ip, r3
 8013d2e:	4610      	mov	r0, r2
 8013d30:	fb03 ca19 	mls	sl, r3, r9, ip
 8013d34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013d38:	2f09      	cmp	r7, #9
 8013d3a:	d81b      	bhi.n	8013d74 <_strtol_l.constprop.0+0xa8>
 8013d3c:	463c      	mov	r4, r7
 8013d3e:	42a3      	cmp	r3, r4
 8013d40:	dd27      	ble.n	8013d92 <_strtol_l.constprop.0+0xc6>
 8013d42:	1c57      	adds	r7, r2, #1
 8013d44:	d007      	beq.n	8013d56 <_strtol_l.constprop.0+0x8a>
 8013d46:	4581      	cmp	r9, r0
 8013d48:	d320      	bcc.n	8013d8c <_strtol_l.constprop.0+0xc0>
 8013d4a:	d101      	bne.n	8013d50 <_strtol_l.constprop.0+0x84>
 8013d4c:	45a2      	cmp	sl, r4
 8013d4e:	db1d      	blt.n	8013d8c <_strtol_l.constprop.0+0xc0>
 8013d50:	fb00 4003 	mla	r0, r0, r3, r4
 8013d54:	2201      	movs	r2, #1
 8013d56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d5a:	e7eb      	b.n	8013d34 <_strtol_l.constprop.0+0x68>
 8013d5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8013d5e:	bf04      	itt	eq
 8013d60:	782c      	ldrbeq	r4, [r5, #0]
 8013d62:	1c95      	addeq	r5, r2, #2
 8013d64:	e7cf      	b.n	8013d06 <_strtol_l.constprop.0+0x3a>
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d1da      	bne.n	8013d20 <_strtol_l.constprop.0+0x54>
 8013d6a:	2c30      	cmp	r4, #48	@ 0x30
 8013d6c:	bf0c      	ite	eq
 8013d6e:	2308      	moveq	r3, #8
 8013d70:	230a      	movne	r3, #10
 8013d72:	e7d5      	b.n	8013d20 <_strtol_l.constprop.0+0x54>
 8013d74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013d78:	2f19      	cmp	r7, #25
 8013d7a:	d801      	bhi.n	8013d80 <_strtol_l.constprop.0+0xb4>
 8013d7c:	3c37      	subs	r4, #55	@ 0x37
 8013d7e:	e7de      	b.n	8013d3e <_strtol_l.constprop.0+0x72>
 8013d80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013d84:	2f19      	cmp	r7, #25
 8013d86:	d804      	bhi.n	8013d92 <_strtol_l.constprop.0+0xc6>
 8013d88:	3c57      	subs	r4, #87	@ 0x57
 8013d8a:	e7d8      	b.n	8013d3e <_strtol_l.constprop.0+0x72>
 8013d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8013d90:	e7e1      	b.n	8013d56 <_strtol_l.constprop.0+0x8a>
 8013d92:	1c53      	adds	r3, r2, #1
 8013d94:	d108      	bne.n	8013da8 <_strtol_l.constprop.0+0xdc>
 8013d96:	2322      	movs	r3, #34	@ 0x22
 8013d98:	f8ce 3000 	str.w	r3, [lr]
 8013d9c:	4660      	mov	r0, ip
 8013d9e:	f1b8 0f00 	cmp.w	r8, #0
 8013da2:	d0a0      	beq.n	8013ce6 <_strtol_l.constprop.0+0x1a>
 8013da4:	1e69      	subs	r1, r5, #1
 8013da6:	e006      	b.n	8013db6 <_strtol_l.constprop.0+0xea>
 8013da8:	b106      	cbz	r6, 8013dac <_strtol_l.constprop.0+0xe0>
 8013daa:	4240      	negs	r0, r0
 8013dac:	f1b8 0f00 	cmp.w	r8, #0
 8013db0:	d099      	beq.n	8013ce6 <_strtol_l.constprop.0+0x1a>
 8013db2:	2a00      	cmp	r2, #0
 8013db4:	d1f6      	bne.n	8013da4 <_strtol_l.constprop.0+0xd8>
 8013db6:	f8c8 1000 	str.w	r1, [r8]
 8013dba:	e794      	b.n	8013ce6 <_strtol_l.constprop.0+0x1a>
 8013dbc:	08017271 	.word	0x08017271

08013dc0 <_strtol_r>:
 8013dc0:	f7ff bf84 	b.w	8013ccc <_strtol_l.constprop.0>

08013dc4 <__ssputs_r>:
 8013dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dc8:	688e      	ldr	r6, [r1, #8]
 8013dca:	461f      	mov	r7, r3
 8013dcc:	42be      	cmp	r6, r7
 8013dce:	680b      	ldr	r3, [r1, #0]
 8013dd0:	4682      	mov	sl, r0
 8013dd2:	460c      	mov	r4, r1
 8013dd4:	4690      	mov	r8, r2
 8013dd6:	d82d      	bhi.n	8013e34 <__ssputs_r+0x70>
 8013dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013ddc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013de0:	d026      	beq.n	8013e30 <__ssputs_r+0x6c>
 8013de2:	6965      	ldr	r5, [r4, #20]
 8013de4:	6909      	ldr	r1, [r1, #16]
 8013de6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013dea:	eba3 0901 	sub.w	r9, r3, r1
 8013dee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013df2:	1c7b      	adds	r3, r7, #1
 8013df4:	444b      	add	r3, r9
 8013df6:	106d      	asrs	r5, r5, #1
 8013df8:	429d      	cmp	r5, r3
 8013dfa:	bf38      	it	cc
 8013dfc:	461d      	movcc	r5, r3
 8013dfe:	0553      	lsls	r3, r2, #21
 8013e00:	d527      	bpl.n	8013e52 <__ssputs_r+0x8e>
 8013e02:	4629      	mov	r1, r5
 8013e04:	f7fe fc1c 	bl	8012640 <_malloc_r>
 8013e08:	4606      	mov	r6, r0
 8013e0a:	b360      	cbz	r0, 8013e66 <__ssputs_r+0xa2>
 8013e0c:	6921      	ldr	r1, [r4, #16]
 8013e0e:	464a      	mov	r2, r9
 8013e10:	f7fd fd41 	bl	8011896 <memcpy>
 8013e14:	89a3      	ldrh	r3, [r4, #12]
 8013e16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e1e:	81a3      	strh	r3, [r4, #12]
 8013e20:	6126      	str	r6, [r4, #16]
 8013e22:	6165      	str	r5, [r4, #20]
 8013e24:	444e      	add	r6, r9
 8013e26:	eba5 0509 	sub.w	r5, r5, r9
 8013e2a:	6026      	str	r6, [r4, #0]
 8013e2c:	60a5      	str	r5, [r4, #8]
 8013e2e:	463e      	mov	r6, r7
 8013e30:	42be      	cmp	r6, r7
 8013e32:	d900      	bls.n	8013e36 <__ssputs_r+0x72>
 8013e34:	463e      	mov	r6, r7
 8013e36:	6820      	ldr	r0, [r4, #0]
 8013e38:	4632      	mov	r2, r6
 8013e3a:	4641      	mov	r1, r8
 8013e3c:	f000 f9c6 	bl	80141cc <memmove>
 8013e40:	68a3      	ldr	r3, [r4, #8]
 8013e42:	1b9b      	subs	r3, r3, r6
 8013e44:	60a3      	str	r3, [r4, #8]
 8013e46:	6823      	ldr	r3, [r4, #0]
 8013e48:	4433      	add	r3, r6
 8013e4a:	6023      	str	r3, [r4, #0]
 8013e4c:	2000      	movs	r0, #0
 8013e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e52:	462a      	mov	r2, r5
 8013e54:	f000 fd7d 	bl	8014952 <_realloc_r>
 8013e58:	4606      	mov	r6, r0
 8013e5a:	2800      	cmp	r0, #0
 8013e5c:	d1e0      	bne.n	8013e20 <__ssputs_r+0x5c>
 8013e5e:	6921      	ldr	r1, [r4, #16]
 8013e60:	4650      	mov	r0, sl
 8013e62:	f7fe fb79 	bl	8012558 <_free_r>
 8013e66:	230c      	movs	r3, #12
 8013e68:	f8ca 3000 	str.w	r3, [sl]
 8013e6c:	89a3      	ldrh	r3, [r4, #12]
 8013e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e72:	81a3      	strh	r3, [r4, #12]
 8013e74:	f04f 30ff 	mov.w	r0, #4294967295
 8013e78:	e7e9      	b.n	8013e4e <__ssputs_r+0x8a>
	...

08013e7c <_svfiprintf_r>:
 8013e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e80:	4698      	mov	r8, r3
 8013e82:	898b      	ldrh	r3, [r1, #12]
 8013e84:	061b      	lsls	r3, r3, #24
 8013e86:	b09d      	sub	sp, #116	@ 0x74
 8013e88:	4607      	mov	r7, r0
 8013e8a:	460d      	mov	r5, r1
 8013e8c:	4614      	mov	r4, r2
 8013e8e:	d510      	bpl.n	8013eb2 <_svfiprintf_r+0x36>
 8013e90:	690b      	ldr	r3, [r1, #16]
 8013e92:	b973      	cbnz	r3, 8013eb2 <_svfiprintf_r+0x36>
 8013e94:	2140      	movs	r1, #64	@ 0x40
 8013e96:	f7fe fbd3 	bl	8012640 <_malloc_r>
 8013e9a:	6028      	str	r0, [r5, #0]
 8013e9c:	6128      	str	r0, [r5, #16]
 8013e9e:	b930      	cbnz	r0, 8013eae <_svfiprintf_r+0x32>
 8013ea0:	230c      	movs	r3, #12
 8013ea2:	603b      	str	r3, [r7, #0]
 8013ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ea8:	b01d      	add	sp, #116	@ 0x74
 8013eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eae:	2340      	movs	r3, #64	@ 0x40
 8013eb0:	616b      	str	r3, [r5, #20]
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013eb6:	2320      	movs	r3, #32
 8013eb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ec0:	2330      	movs	r3, #48	@ 0x30
 8013ec2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014060 <_svfiprintf_r+0x1e4>
 8013ec6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013eca:	f04f 0901 	mov.w	r9, #1
 8013ece:	4623      	mov	r3, r4
 8013ed0:	469a      	mov	sl, r3
 8013ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ed6:	b10a      	cbz	r2, 8013edc <_svfiprintf_r+0x60>
 8013ed8:	2a25      	cmp	r2, #37	@ 0x25
 8013eda:	d1f9      	bne.n	8013ed0 <_svfiprintf_r+0x54>
 8013edc:	ebba 0b04 	subs.w	fp, sl, r4
 8013ee0:	d00b      	beq.n	8013efa <_svfiprintf_r+0x7e>
 8013ee2:	465b      	mov	r3, fp
 8013ee4:	4622      	mov	r2, r4
 8013ee6:	4629      	mov	r1, r5
 8013ee8:	4638      	mov	r0, r7
 8013eea:	f7ff ff6b 	bl	8013dc4 <__ssputs_r>
 8013eee:	3001      	adds	r0, #1
 8013ef0:	f000 80a7 	beq.w	8014042 <_svfiprintf_r+0x1c6>
 8013ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ef6:	445a      	add	r2, fp
 8013ef8:	9209      	str	r2, [sp, #36]	@ 0x24
 8013efa:	f89a 3000 	ldrb.w	r3, [sl]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	f000 809f 	beq.w	8014042 <_svfiprintf_r+0x1c6>
 8013f04:	2300      	movs	r3, #0
 8013f06:	f04f 32ff 	mov.w	r2, #4294967295
 8013f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f0e:	f10a 0a01 	add.w	sl, sl, #1
 8013f12:	9304      	str	r3, [sp, #16]
 8013f14:	9307      	str	r3, [sp, #28]
 8013f16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013f1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8013f1c:	4654      	mov	r4, sl
 8013f1e:	2205      	movs	r2, #5
 8013f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f24:	484e      	ldr	r0, [pc, #312]	@ (8014060 <_svfiprintf_r+0x1e4>)
 8013f26:	f7ec f95b 	bl	80001e0 <memchr>
 8013f2a:	9a04      	ldr	r2, [sp, #16]
 8013f2c:	b9d8      	cbnz	r0, 8013f66 <_svfiprintf_r+0xea>
 8013f2e:	06d0      	lsls	r0, r2, #27
 8013f30:	bf44      	itt	mi
 8013f32:	2320      	movmi	r3, #32
 8013f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f38:	0711      	lsls	r1, r2, #28
 8013f3a:	bf44      	itt	mi
 8013f3c:	232b      	movmi	r3, #43	@ 0x2b
 8013f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f42:	f89a 3000 	ldrb.w	r3, [sl]
 8013f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f48:	d015      	beq.n	8013f76 <_svfiprintf_r+0xfa>
 8013f4a:	9a07      	ldr	r2, [sp, #28]
 8013f4c:	4654      	mov	r4, sl
 8013f4e:	2000      	movs	r0, #0
 8013f50:	f04f 0c0a 	mov.w	ip, #10
 8013f54:	4621      	mov	r1, r4
 8013f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f5a:	3b30      	subs	r3, #48	@ 0x30
 8013f5c:	2b09      	cmp	r3, #9
 8013f5e:	d94b      	bls.n	8013ff8 <_svfiprintf_r+0x17c>
 8013f60:	b1b0      	cbz	r0, 8013f90 <_svfiprintf_r+0x114>
 8013f62:	9207      	str	r2, [sp, #28]
 8013f64:	e014      	b.n	8013f90 <_svfiprintf_r+0x114>
 8013f66:	eba0 0308 	sub.w	r3, r0, r8
 8013f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8013f6e:	4313      	orrs	r3, r2
 8013f70:	9304      	str	r3, [sp, #16]
 8013f72:	46a2      	mov	sl, r4
 8013f74:	e7d2      	b.n	8013f1c <_svfiprintf_r+0xa0>
 8013f76:	9b03      	ldr	r3, [sp, #12]
 8013f78:	1d19      	adds	r1, r3, #4
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	9103      	str	r1, [sp, #12]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	bfbb      	ittet	lt
 8013f82:	425b      	neglt	r3, r3
 8013f84:	f042 0202 	orrlt.w	r2, r2, #2
 8013f88:	9307      	strge	r3, [sp, #28]
 8013f8a:	9307      	strlt	r3, [sp, #28]
 8013f8c:	bfb8      	it	lt
 8013f8e:	9204      	strlt	r2, [sp, #16]
 8013f90:	7823      	ldrb	r3, [r4, #0]
 8013f92:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f94:	d10a      	bne.n	8013fac <_svfiprintf_r+0x130>
 8013f96:	7863      	ldrb	r3, [r4, #1]
 8013f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f9a:	d132      	bne.n	8014002 <_svfiprintf_r+0x186>
 8013f9c:	9b03      	ldr	r3, [sp, #12]
 8013f9e:	1d1a      	adds	r2, r3, #4
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	9203      	str	r2, [sp, #12]
 8013fa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013fa8:	3402      	adds	r4, #2
 8013faa:	9305      	str	r3, [sp, #20]
 8013fac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014070 <_svfiprintf_r+0x1f4>
 8013fb0:	7821      	ldrb	r1, [r4, #0]
 8013fb2:	2203      	movs	r2, #3
 8013fb4:	4650      	mov	r0, sl
 8013fb6:	f7ec f913 	bl	80001e0 <memchr>
 8013fba:	b138      	cbz	r0, 8013fcc <_svfiprintf_r+0x150>
 8013fbc:	9b04      	ldr	r3, [sp, #16]
 8013fbe:	eba0 000a 	sub.w	r0, r0, sl
 8013fc2:	2240      	movs	r2, #64	@ 0x40
 8013fc4:	4082      	lsls	r2, r0
 8013fc6:	4313      	orrs	r3, r2
 8013fc8:	3401      	adds	r4, #1
 8013fca:	9304      	str	r3, [sp, #16]
 8013fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fd0:	4824      	ldr	r0, [pc, #144]	@ (8014064 <_svfiprintf_r+0x1e8>)
 8013fd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013fd6:	2206      	movs	r2, #6
 8013fd8:	f7ec f902 	bl	80001e0 <memchr>
 8013fdc:	2800      	cmp	r0, #0
 8013fde:	d036      	beq.n	801404e <_svfiprintf_r+0x1d2>
 8013fe0:	4b21      	ldr	r3, [pc, #132]	@ (8014068 <_svfiprintf_r+0x1ec>)
 8013fe2:	bb1b      	cbnz	r3, 801402c <_svfiprintf_r+0x1b0>
 8013fe4:	9b03      	ldr	r3, [sp, #12]
 8013fe6:	3307      	adds	r3, #7
 8013fe8:	f023 0307 	bic.w	r3, r3, #7
 8013fec:	3308      	adds	r3, #8
 8013fee:	9303      	str	r3, [sp, #12]
 8013ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ff2:	4433      	add	r3, r6
 8013ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ff6:	e76a      	b.n	8013ece <_svfiprintf_r+0x52>
 8013ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ffc:	460c      	mov	r4, r1
 8013ffe:	2001      	movs	r0, #1
 8014000:	e7a8      	b.n	8013f54 <_svfiprintf_r+0xd8>
 8014002:	2300      	movs	r3, #0
 8014004:	3401      	adds	r4, #1
 8014006:	9305      	str	r3, [sp, #20]
 8014008:	4619      	mov	r1, r3
 801400a:	f04f 0c0a 	mov.w	ip, #10
 801400e:	4620      	mov	r0, r4
 8014010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014014:	3a30      	subs	r2, #48	@ 0x30
 8014016:	2a09      	cmp	r2, #9
 8014018:	d903      	bls.n	8014022 <_svfiprintf_r+0x1a6>
 801401a:	2b00      	cmp	r3, #0
 801401c:	d0c6      	beq.n	8013fac <_svfiprintf_r+0x130>
 801401e:	9105      	str	r1, [sp, #20]
 8014020:	e7c4      	b.n	8013fac <_svfiprintf_r+0x130>
 8014022:	fb0c 2101 	mla	r1, ip, r1, r2
 8014026:	4604      	mov	r4, r0
 8014028:	2301      	movs	r3, #1
 801402a:	e7f0      	b.n	801400e <_svfiprintf_r+0x192>
 801402c:	ab03      	add	r3, sp, #12
 801402e:	9300      	str	r3, [sp, #0]
 8014030:	462a      	mov	r2, r5
 8014032:	4b0e      	ldr	r3, [pc, #56]	@ (801406c <_svfiprintf_r+0x1f0>)
 8014034:	a904      	add	r1, sp, #16
 8014036:	4638      	mov	r0, r7
 8014038:	f7fc fc56 	bl	80108e8 <_printf_float>
 801403c:	1c42      	adds	r2, r0, #1
 801403e:	4606      	mov	r6, r0
 8014040:	d1d6      	bne.n	8013ff0 <_svfiprintf_r+0x174>
 8014042:	89ab      	ldrh	r3, [r5, #12]
 8014044:	065b      	lsls	r3, r3, #25
 8014046:	f53f af2d 	bmi.w	8013ea4 <_svfiprintf_r+0x28>
 801404a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801404c:	e72c      	b.n	8013ea8 <_svfiprintf_r+0x2c>
 801404e:	ab03      	add	r3, sp, #12
 8014050:	9300      	str	r3, [sp, #0]
 8014052:	462a      	mov	r2, r5
 8014054:	4b05      	ldr	r3, [pc, #20]	@ (801406c <_svfiprintf_r+0x1f0>)
 8014056:	a904      	add	r1, sp, #16
 8014058:	4638      	mov	r0, r7
 801405a:	f7fc fedd 	bl	8010e18 <_printf_i>
 801405e:	e7ed      	b.n	801403c <_svfiprintf_r+0x1c0>
 8014060:	08017371 	.word	0x08017371
 8014064:	0801737b 	.word	0x0801737b
 8014068:	080108e9 	.word	0x080108e9
 801406c:	08013dc5 	.word	0x08013dc5
 8014070:	08017377 	.word	0x08017377

08014074 <__sflush_r>:
 8014074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801407c:	0716      	lsls	r6, r2, #28
 801407e:	4605      	mov	r5, r0
 8014080:	460c      	mov	r4, r1
 8014082:	d454      	bmi.n	801412e <__sflush_r+0xba>
 8014084:	684b      	ldr	r3, [r1, #4]
 8014086:	2b00      	cmp	r3, #0
 8014088:	dc02      	bgt.n	8014090 <__sflush_r+0x1c>
 801408a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801408c:	2b00      	cmp	r3, #0
 801408e:	dd48      	ble.n	8014122 <__sflush_r+0xae>
 8014090:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014092:	2e00      	cmp	r6, #0
 8014094:	d045      	beq.n	8014122 <__sflush_r+0xae>
 8014096:	2300      	movs	r3, #0
 8014098:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801409c:	682f      	ldr	r7, [r5, #0]
 801409e:	6a21      	ldr	r1, [r4, #32]
 80140a0:	602b      	str	r3, [r5, #0]
 80140a2:	d030      	beq.n	8014106 <__sflush_r+0x92>
 80140a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80140a6:	89a3      	ldrh	r3, [r4, #12]
 80140a8:	0759      	lsls	r1, r3, #29
 80140aa:	d505      	bpl.n	80140b8 <__sflush_r+0x44>
 80140ac:	6863      	ldr	r3, [r4, #4]
 80140ae:	1ad2      	subs	r2, r2, r3
 80140b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80140b2:	b10b      	cbz	r3, 80140b8 <__sflush_r+0x44>
 80140b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80140b6:	1ad2      	subs	r2, r2, r3
 80140b8:	2300      	movs	r3, #0
 80140ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80140bc:	6a21      	ldr	r1, [r4, #32]
 80140be:	4628      	mov	r0, r5
 80140c0:	47b0      	blx	r6
 80140c2:	1c43      	adds	r3, r0, #1
 80140c4:	89a3      	ldrh	r3, [r4, #12]
 80140c6:	d106      	bne.n	80140d6 <__sflush_r+0x62>
 80140c8:	6829      	ldr	r1, [r5, #0]
 80140ca:	291d      	cmp	r1, #29
 80140cc:	d82b      	bhi.n	8014126 <__sflush_r+0xb2>
 80140ce:	4a2a      	ldr	r2, [pc, #168]	@ (8014178 <__sflush_r+0x104>)
 80140d0:	410a      	asrs	r2, r1
 80140d2:	07d6      	lsls	r6, r2, #31
 80140d4:	d427      	bmi.n	8014126 <__sflush_r+0xb2>
 80140d6:	2200      	movs	r2, #0
 80140d8:	6062      	str	r2, [r4, #4]
 80140da:	04d9      	lsls	r1, r3, #19
 80140dc:	6922      	ldr	r2, [r4, #16]
 80140de:	6022      	str	r2, [r4, #0]
 80140e0:	d504      	bpl.n	80140ec <__sflush_r+0x78>
 80140e2:	1c42      	adds	r2, r0, #1
 80140e4:	d101      	bne.n	80140ea <__sflush_r+0x76>
 80140e6:	682b      	ldr	r3, [r5, #0]
 80140e8:	b903      	cbnz	r3, 80140ec <__sflush_r+0x78>
 80140ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80140ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80140ee:	602f      	str	r7, [r5, #0]
 80140f0:	b1b9      	cbz	r1, 8014122 <__sflush_r+0xae>
 80140f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140f6:	4299      	cmp	r1, r3
 80140f8:	d002      	beq.n	8014100 <__sflush_r+0x8c>
 80140fa:	4628      	mov	r0, r5
 80140fc:	f7fe fa2c 	bl	8012558 <_free_r>
 8014100:	2300      	movs	r3, #0
 8014102:	6363      	str	r3, [r4, #52]	@ 0x34
 8014104:	e00d      	b.n	8014122 <__sflush_r+0xae>
 8014106:	2301      	movs	r3, #1
 8014108:	4628      	mov	r0, r5
 801410a:	47b0      	blx	r6
 801410c:	4602      	mov	r2, r0
 801410e:	1c50      	adds	r0, r2, #1
 8014110:	d1c9      	bne.n	80140a6 <__sflush_r+0x32>
 8014112:	682b      	ldr	r3, [r5, #0]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d0c6      	beq.n	80140a6 <__sflush_r+0x32>
 8014118:	2b1d      	cmp	r3, #29
 801411a:	d001      	beq.n	8014120 <__sflush_r+0xac>
 801411c:	2b16      	cmp	r3, #22
 801411e:	d11e      	bne.n	801415e <__sflush_r+0xea>
 8014120:	602f      	str	r7, [r5, #0]
 8014122:	2000      	movs	r0, #0
 8014124:	e022      	b.n	801416c <__sflush_r+0xf8>
 8014126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801412a:	b21b      	sxth	r3, r3
 801412c:	e01b      	b.n	8014166 <__sflush_r+0xf2>
 801412e:	690f      	ldr	r7, [r1, #16]
 8014130:	2f00      	cmp	r7, #0
 8014132:	d0f6      	beq.n	8014122 <__sflush_r+0xae>
 8014134:	0793      	lsls	r3, r2, #30
 8014136:	680e      	ldr	r6, [r1, #0]
 8014138:	bf08      	it	eq
 801413a:	694b      	ldreq	r3, [r1, #20]
 801413c:	600f      	str	r7, [r1, #0]
 801413e:	bf18      	it	ne
 8014140:	2300      	movne	r3, #0
 8014142:	eba6 0807 	sub.w	r8, r6, r7
 8014146:	608b      	str	r3, [r1, #8]
 8014148:	f1b8 0f00 	cmp.w	r8, #0
 801414c:	dde9      	ble.n	8014122 <__sflush_r+0xae>
 801414e:	6a21      	ldr	r1, [r4, #32]
 8014150:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014152:	4643      	mov	r3, r8
 8014154:	463a      	mov	r2, r7
 8014156:	4628      	mov	r0, r5
 8014158:	47b0      	blx	r6
 801415a:	2800      	cmp	r0, #0
 801415c:	dc08      	bgt.n	8014170 <__sflush_r+0xfc>
 801415e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014166:	81a3      	strh	r3, [r4, #12]
 8014168:	f04f 30ff 	mov.w	r0, #4294967295
 801416c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014170:	4407      	add	r7, r0
 8014172:	eba8 0800 	sub.w	r8, r8, r0
 8014176:	e7e7      	b.n	8014148 <__sflush_r+0xd4>
 8014178:	dfbffffe 	.word	0xdfbffffe

0801417c <_fflush_r>:
 801417c:	b538      	push	{r3, r4, r5, lr}
 801417e:	690b      	ldr	r3, [r1, #16]
 8014180:	4605      	mov	r5, r0
 8014182:	460c      	mov	r4, r1
 8014184:	b913      	cbnz	r3, 801418c <_fflush_r+0x10>
 8014186:	2500      	movs	r5, #0
 8014188:	4628      	mov	r0, r5
 801418a:	bd38      	pop	{r3, r4, r5, pc}
 801418c:	b118      	cbz	r0, 8014196 <_fflush_r+0x1a>
 801418e:	6a03      	ldr	r3, [r0, #32]
 8014190:	b90b      	cbnz	r3, 8014196 <_fflush_r+0x1a>
 8014192:	f7fd fa01 	bl	8011598 <__sinit>
 8014196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d0f3      	beq.n	8014186 <_fflush_r+0xa>
 801419e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80141a0:	07d0      	lsls	r0, r2, #31
 80141a2:	d404      	bmi.n	80141ae <_fflush_r+0x32>
 80141a4:	0599      	lsls	r1, r3, #22
 80141a6:	d402      	bmi.n	80141ae <_fflush_r+0x32>
 80141a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80141aa:	f7fd fb72 	bl	8011892 <__retarget_lock_acquire_recursive>
 80141ae:	4628      	mov	r0, r5
 80141b0:	4621      	mov	r1, r4
 80141b2:	f7ff ff5f 	bl	8014074 <__sflush_r>
 80141b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80141b8:	07da      	lsls	r2, r3, #31
 80141ba:	4605      	mov	r5, r0
 80141bc:	d4e4      	bmi.n	8014188 <_fflush_r+0xc>
 80141be:	89a3      	ldrh	r3, [r4, #12]
 80141c0:	059b      	lsls	r3, r3, #22
 80141c2:	d4e1      	bmi.n	8014188 <_fflush_r+0xc>
 80141c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80141c6:	f7fd fb65 	bl	8011894 <__retarget_lock_release_recursive>
 80141ca:	e7dd      	b.n	8014188 <_fflush_r+0xc>

080141cc <memmove>:
 80141cc:	4288      	cmp	r0, r1
 80141ce:	b510      	push	{r4, lr}
 80141d0:	eb01 0402 	add.w	r4, r1, r2
 80141d4:	d902      	bls.n	80141dc <memmove+0x10>
 80141d6:	4284      	cmp	r4, r0
 80141d8:	4623      	mov	r3, r4
 80141da:	d807      	bhi.n	80141ec <memmove+0x20>
 80141dc:	1e43      	subs	r3, r0, #1
 80141de:	42a1      	cmp	r1, r4
 80141e0:	d008      	beq.n	80141f4 <memmove+0x28>
 80141e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80141e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80141ea:	e7f8      	b.n	80141de <memmove+0x12>
 80141ec:	4402      	add	r2, r0
 80141ee:	4601      	mov	r1, r0
 80141f0:	428a      	cmp	r2, r1
 80141f2:	d100      	bne.n	80141f6 <memmove+0x2a>
 80141f4:	bd10      	pop	{r4, pc}
 80141f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80141fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80141fe:	e7f7      	b.n	80141f0 <memmove+0x24>

08014200 <strncmp>:
 8014200:	b510      	push	{r4, lr}
 8014202:	b16a      	cbz	r2, 8014220 <strncmp+0x20>
 8014204:	3901      	subs	r1, #1
 8014206:	1884      	adds	r4, r0, r2
 8014208:	f810 2b01 	ldrb.w	r2, [r0], #1
 801420c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014210:	429a      	cmp	r2, r3
 8014212:	d103      	bne.n	801421c <strncmp+0x1c>
 8014214:	42a0      	cmp	r0, r4
 8014216:	d001      	beq.n	801421c <strncmp+0x1c>
 8014218:	2a00      	cmp	r2, #0
 801421a:	d1f5      	bne.n	8014208 <strncmp+0x8>
 801421c:	1ad0      	subs	r0, r2, r3
 801421e:	bd10      	pop	{r4, pc}
 8014220:	4610      	mov	r0, r2
 8014222:	e7fc      	b.n	801421e <strncmp+0x1e>

08014224 <_sbrk_r>:
 8014224:	b538      	push	{r3, r4, r5, lr}
 8014226:	4d06      	ldr	r5, [pc, #24]	@ (8014240 <_sbrk_r+0x1c>)
 8014228:	2300      	movs	r3, #0
 801422a:	4604      	mov	r4, r0
 801422c:	4608      	mov	r0, r1
 801422e:	602b      	str	r3, [r5, #0]
 8014230:	f7ed fdd4 	bl	8001ddc <_sbrk>
 8014234:	1c43      	adds	r3, r0, #1
 8014236:	d102      	bne.n	801423e <_sbrk_r+0x1a>
 8014238:	682b      	ldr	r3, [r5, #0]
 801423a:	b103      	cbz	r3, 801423e <_sbrk_r+0x1a>
 801423c:	6023      	str	r3, [r4, #0]
 801423e:	bd38      	pop	{r3, r4, r5, pc}
 8014240:	200055a4 	.word	0x200055a4
 8014244:	00000000 	.word	0x00000000

08014248 <nan>:
 8014248:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014250 <nan+0x8>
 801424c:	4770      	bx	lr
 801424e:	bf00      	nop
 8014250:	00000000 	.word	0x00000000
 8014254:	7ff80000 	.word	0x7ff80000

08014258 <__assert_func>:
 8014258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801425a:	4614      	mov	r4, r2
 801425c:	461a      	mov	r2, r3
 801425e:	4b09      	ldr	r3, [pc, #36]	@ (8014284 <__assert_func+0x2c>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	4605      	mov	r5, r0
 8014264:	68d8      	ldr	r0, [r3, #12]
 8014266:	b954      	cbnz	r4, 801427e <__assert_func+0x26>
 8014268:	4b07      	ldr	r3, [pc, #28]	@ (8014288 <__assert_func+0x30>)
 801426a:	461c      	mov	r4, r3
 801426c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014270:	9100      	str	r1, [sp, #0]
 8014272:	462b      	mov	r3, r5
 8014274:	4905      	ldr	r1, [pc, #20]	@ (801428c <__assert_func+0x34>)
 8014276:	f000 fba7 	bl	80149c8 <fiprintf>
 801427a:	f000 fbb7 	bl	80149ec <abort>
 801427e:	4b04      	ldr	r3, [pc, #16]	@ (8014290 <__assert_func+0x38>)
 8014280:	e7f4      	b.n	801426c <__assert_func+0x14>
 8014282:	bf00      	nop
 8014284:	200000a4 	.word	0x200000a4
 8014288:	080173c5 	.word	0x080173c5
 801428c:	08017397 	.word	0x08017397
 8014290:	0801738a 	.word	0x0801738a

08014294 <_calloc_r>:
 8014294:	b570      	push	{r4, r5, r6, lr}
 8014296:	fba1 5402 	umull	r5, r4, r1, r2
 801429a:	b93c      	cbnz	r4, 80142ac <_calloc_r+0x18>
 801429c:	4629      	mov	r1, r5
 801429e:	f7fe f9cf 	bl	8012640 <_malloc_r>
 80142a2:	4606      	mov	r6, r0
 80142a4:	b928      	cbnz	r0, 80142b2 <_calloc_r+0x1e>
 80142a6:	2600      	movs	r6, #0
 80142a8:	4630      	mov	r0, r6
 80142aa:	bd70      	pop	{r4, r5, r6, pc}
 80142ac:	220c      	movs	r2, #12
 80142ae:	6002      	str	r2, [r0, #0]
 80142b0:	e7f9      	b.n	80142a6 <_calloc_r+0x12>
 80142b2:	462a      	mov	r2, r5
 80142b4:	4621      	mov	r1, r4
 80142b6:	f7fd fa18 	bl	80116ea <memset>
 80142ba:	e7f5      	b.n	80142a8 <_calloc_r+0x14>

080142bc <rshift>:
 80142bc:	6903      	ldr	r3, [r0, #16]
 80142be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80142c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80142ca:	f100 0414 	add.w	r4, r0, #20
 80142ce:	dd45      	ble.n	801435c <rshift+0xa0>
 80142d0:	f011 011f 	ands.w	r1, r1, #31
 80142d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80142d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80142dc:	d10c      	bne.n	80142f8 <rshift+0x3c>
 80142de:	f100 0710 	add.w	r7, r0, #16
 80142e2:	4629      	mov	r1, r5
 80142e4:	42b1      	cmp	r1, r6
 80142e6:	d334      	bcc.n	8014352 <rshift+0x96>
 80142e8:	1a9b      	subs	r3, r3, r2
 80142ea:	009b      	lsls	r3, r3, #2
 80142ec:	1eea      	subs	r2, r5, #3
 80142ee:	4296      	cmp	r6, r2
 80142f0:	bf38      	it	cc
 80142f2:	2300      	movcc	r3, #0
 80142f4:	4423      	add	r3, r4
 80142f6:	e015      	b.n	8014324 <rshift+0x68>
 80142f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80142fc:	f1c1 0820 	rsb	r8, r1, #32
 8014300:	40cf      	lsrs	r7, r1
 8014302:	f105 0e04 	add.w	lr, r5, #4
 8014306:	46a1      	mov	r9, r4
 8014308:	4576      	cmp	r6, lr
 801430a:	46f4      	mov	ip, lr
 801430c:	d815      	bhi.n	801433a <rshift+0x7e>
 801430e:	1a9a      	subs	r2, r3, r2
 8014310:	0092      	lsls	r2, r2, #2
 8014312:	3a04      	subs	r2, #4
 8014314:	3501      	adds	r5, #1
 8014316:	42ae      	cmp	r6, r5
 8014318:	bf38      	it	cc
 801431a:	2200      	movcc	r2, #0
 801431c:	18a3      	adds	r3, r4, r2
 801431e:	50a7      	str	r7, [r4, r2]
 8014320:	b107      	cbz	r7, 8014324 <rshift+0x68>
 8014322:	3304      	adds	r3, #4
 8014324:	1b1a      	subs	r2, r3, r4
 8014326:	42a3      	cmp	r3, r4
 8014328:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801432c:	bf08      	it	eq
 801432e:	2300      	moveq	r3, #0
 8014330:	6102      	str	r2, [r0, #16]
 8014332:	bf08      	it	eq
 8014334:	6143      	streq	r3, [r0, #20]
 8014336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801433a:	f8dc c000 	ldr.w	ip, [ip]
 801433e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014342:	ea4c 0707 	orr.w	r7, ip, r7
 8014346:	f849 7b04 	str.w	r7, [r9], #4
 801434a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801434e:	40cf      	lsrs	r7, r1
 8014350:	e7da      	b.n	8014308 <rshift+0x4c>
 8014352:	f851 cb04 	ldr.w	ip, [r1], #4
 8014356:	f847 cf04 	str.w	ip, [r7, #4]!
 801435a:	e7c3      	b.n	80142e4 <rshift+0x28>
 801435c:	4623      	mov	r3, r4
 801435e:	e7e1      	b.n	8014324 <rshift+0x68>

08014360 <__hexdig_fun>:
 8014360:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014364:	2b09      	cmp	r3, #9
 8014366:	d802      	bhi.n	801436e <__hexdig_fun+0xe>
 8014368:	3820      	subs	r0, #32
 801436a:	b2c0      	uxtb	r0, r0
 801436c:	4770      	bx	lr
 801436e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014372:	2b05      	cmp	r3, #5
 8014374:	d801      	bhi.n	801437a <__hexdig_fun+0x1a>
 8014376:	3847      	subs	r0, #71	@ 0x47
 8014378:	e7f7      	b.n	801436a <__hexdig_fun+0xa>
 801437a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801437e:	2b05      	cmp	r3, #5
 8014380:	d801      	bhi.n	8014386 <__hexdig_fun+0x26>
 8014382:	3827      	subs	r0, #39	@ 0x27
 8014384:	e7f1      	b.n	801436a <__hexdig_fun+0xa>
 8014386:	2000      	movs	r0, #0
 8014388:	4770      	bx	lr
	...

0801438c <__gethex>:
 801438c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014390:	b085      	sub	sp, #20
 8014392:	468a      	mov	sl, r1
 8014394:	9302      	str	r3, [sp, #8]
 8014396:	680b      	ldr	r3, [r1, #0]
 8014398:	9001      	str	r0, [sp, #4]
 801439a:	4690      	mov	r8, r2
 801439c:	1c9c      	adds	r4, r3, #2
 801439e:	46a1      	mov	r9, r4
 80143a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80143a4:	2830      	cmp	r0, #48	@ 0x30
 80143a6:	d0fa      	beq.n	801439e <__gethex+0x12>
 80143a8:	eba9 0303 	sub.w	r3, r9, r3
 80143ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80143b0:	f7ff ffd6 	bl	8014360 <__hexdig_fun>
 80143b4:	4605      	mov	r5, r0
 80143b6:	2800      	cmp	r0, #0
 80143b8:	d168      	bne.n	801448c <__gethex+0x100>
 80143ba:	49a0      	ldr	r1, [pc, #640]	@ (801463c <__gethex+0x2b0>)
 80143bc:	2201      	movs	r2, #1
 80143be:	4648      	mov	r0, r9
 80143c0:	f7ff ff1e 	bl	8014200 <strncmp>
 80143c4:	4607      	mov	r7, r0
 80143c6:	2800      	cmp	r0, #0
 80143c8:	d167      	bne.n	801449a <__gethex+0x10e>
 80143ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80143ce:	4626      	mov	r6, r4
 80143d0:	f7ff ffc6 	bl	8014360 <__hexdig_fun>
 80143d4:	2800      	cmp	r0, #0
 80143d6:	d062      	beq.n	801449e <__gethex+0x112>
 80143d8:	4623      	mov	r3, r4
 80143da:	7818      	ldrb	r0, [r3, #0]
 80143dc:	2830      	cmp	r0, #48	@ 0x30
 80143de:	4699      	mov	r9, r3
 80143e0:	f103 0301 	add.w	r3, r3, #1
 80143e4:	d0f9      	beq.n	80143da <__gethex+0x4e>
 80143e6:	f7ff ffbb 	bl	8014360 <__hexdig_fun>
 80143ea:	fab0 f580 	clz	r5, r0
 80143ee:	096d      	lsrs	r5, r5, #5
 80143f0:	f04f 0b01 	mov.w	fp, #1
 80143f4:	464a      	mov	r2, r9
 80143f6:	4616      	mov	r6, r2
 80143f8:	3201      	adds	r2, #1
 80143fa:	7830      	ldrb	r0, [r6, #0]
 80143fc:	f7ff ffb0 	bl	8014360 <__hexdig_fun>
 8014400:	2800      	cmp	r0, #0
 8014402:	d1f8      	bne.n	80143f6 <__gethex+0x6a>
 8014404:	498d      	ldr	r1, [pc, #564]	@ (801463c <__gethex+0x2b0>)
 8014406:	2201      	movs	r2, #1
 8014408:	4630      	mov	r0, r6
 801440a:	f7ff fef9 	bl	8014200 <strncmp>
 801440e:	2800      	cmp	r0, #0
 8014410:	d13f      	bne.n	8014492 <__gethex+0x106>
 8014412:	b944      	cbnz	r4, 8014426 <__gethex+0x9a>
 8014414:	1c74      	adds	r4, r6, #1
 8014416:	4622      	mov	r2, r4
 8014418:	4616      	mov	r6, r2
 801441a:	3201      	adds	r2, #1
 801441c:	7830      	ldrb	r0, [r6, #0]
 801441e:	f7ff ff9f 	bl	8014360 <__hexdig_fun>
 8014422:	2800      	cmp	r0, #0
 8014424:	d1f8      	bne.n	8014418 <__gethex+0x8c>
 8014426:	1ba4      	subs	r4, r4, r6
 8014428:	00a7      	lsls	r7, r4, #2
 801442a:	7833      	ldrb	r3, [r6, #0]
 801442c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014430:	2b50      	cmp	r3, #80	@ 0x50
 8014432:	d13e      	bne.n	80144b2 <__gethex+0x126>
 8014434:	7873      	ldrb	r3, [r6, #1]
 8014436:	2b2b      	cmp	r3, #43	@ 0x2b
 8014438:	d033      	beq.n	80144a2 <__gethex+0x116>
 801443a:	2b2d      	cmp	r3, #45	@ 0x2d
 801443c:	d034      	beq.n	80144a8 <__gethex+0x11c>
 801443e:	1c71      	adds	r1, r6, #1
 8014440:	2400      	movs	r4, #0
 8014442:	7808      	ldrb	r0, [r1, #0]
 8014444:	f7ff ff8c 	bl	8014360 <__hexdig_fun>
 8014448:	1e43      	subs	r3, r0, #1
 801444a:	b2db      	uxtb	r3, r3
 801444c:	2b18      	cmp	r3, #24
 801444e:	d830      	bhi.n	80144b2 <__gethex+0x126>
 8014450:	f1a0 0210 	sub.w	r2, r0, #16
 8014454:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014458:	f7ff ff82 	bl	8014360 <__hexdig_fun>
 801445c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014460:	fa5f fc8c 	uxtb.w	ip, ip
 8014464:	f1bc 0f18 	cmp.w	ip, #24
 8014468:	f04f 030a 	mov.w	r3, #10
 801446c:	d91e      	bls.n	80144ac <__gethex+0x120>
 801446e:	b104      	cbz	r4, 8014472 <__gethex+0xe6>
 8014470:	4252      	negs	r2, r2
 8014472:	4417      	add	r7, r2
 8014474:	f8ca 1000 	str.w	r1, [sl]
 8014478:	b1ed      	cbz	r5, 80144b6 <__gethex+0x12a>
 801447a:	f1bb 0f00 	cmp.w	fp, #0
 801447e:	bf0c      	ite	eq
 8014480:	2506      	moveq	r5, #6
 8014482:	2500      	movne	r5, #0
 8014484:	4628      	mov	r0, r5
 8014486:	b005      	add	sp, #20
 8014488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801448c:	2500      	movs	r5, #0
 801448e:	462c      	mov	r4, r5
 8014490:	e7b0      	b.n	80143f4 <__gethex+0x68>
 8014492:	2c00      	cmp	r4, #0
 8014494:	d1c7      	bne.n	8014426 <__gethex+0x9a>
 8014496:	4627      	mov	r7, r4
 8014498:	e7c7      	b.n	801442a <__gethex+0x9e>
 801449a:	464e      	mov	r6, r9
 801449c:	462f      	mov	r7, r5
 801449e:	2501      	movs	r5, #1
 80144a0:	e7c3      	b.n	801442a <__gethex+0x9e>
 80144a2:	2400      	movs	r4, #0
 80144a4:	1cb1      	adds	r1, r6, #2
 80144a6:	e7cc      	b.n	8014442 <__gethex+0xb6>
 80144a8:	2401      	movs	r4, #1
 80144aa:	e7fb      	b.n	80144a4 <__gethex+0x118>
 80144ac:	fb03 0002 	mla	r0, r3, r2, r0
 80144b0:	e7ce      	b.n	8014450 <__gethex+0xc4>
 80144b2:	4631      	mov	r1, r6
 80144b4:	e7de      	b.n	8014474 <__gethex+0xe8>
 80144b6:	eba6 0309 	sub.w	r3, r6, r9
 80144ba:	3b01      	subs	r3, #1
 80144bc:	4629      	mov	r1, r5
 80144be:	2b07      	cmp	r3, #7
 80144c0:	dc0a      	bgt.n	80144d8 <__gethex+0x14c>
 80144c2:	9801      	ldr	r0, [sp, #4]
 80144c4:	f7fe f948 	bl	8012758 <_Balloc>
 80144c8:	4604      	mov	r4, r0
 80144ca:	b940      	cbnz	r0, 80144de <__gethex+0x152>
 80144cc:	4b5c      	ldr	r3, [pc, #368]	@ (8014640 <__gethex+0x2b4>)
 80144ce:	4602      	mov	r2, r0
 80144d0:	21e4      	movs	r1, #228	@ 0xe4
 80144d2:	485c      	ldr	r0, [pc, #368]	@ (8014644 <__gethex+0x2b8>)
 80144d4:	f7ff fec0 	bl	8014258 <__assert_func>
 80144d8:	3101      	adds	r1, #1
 80144da:	105b      	asrs	r3, r3, #1
 80144dc:	e7ef      	b.n	80144be <__gethex+0x132>
 80144de:	f100 0a14 	add.w	sl, r0, #20
 80144e2:	2300      	movs	r3, #0
 80144e4:	4655      	mov	r5, sl
 80144e6:	469b      	mov	fp, r3
 80144e8:	45b1      	cmp	r9, r6
 80144ea:	d337      	bcc.n	801455c <__gethex+0x1d0>
 80144ec:	f845 bb04 	str.w	fp, [r5], #4
 80144f0:	eba5 050a 	sub.w	r5, r5, sl
 80144f4:	10ad      	asrs	r5, r5, #2
 80144f6:	6125      	str	r5, [r4, #16]
 80144f8:	4658      	mov	r0, fp
 80144fa:	f7fe fa1f 	bl	801293c <__hi0bits>
 80144fe:	016d      	lsls	r5, r5, #5
 8014500:	f8d8 6000 	ldr.w	r6, [r8]
 8014504:	1a2d      	subs	r5, r5, r0
 8014506:	42b5      	cmp	r5, r6
 8014508:	dd54      	ble.n	80145b4 <__gethex+0x228>
 801450a:	1bad      	subs	r5, r5, r6
 801450c:	4629      	mov	r1, r5
 801450e:	4620      	mov	r0, r4
 8014510:	f7fe fdb3 	bl	801307a <__any_on>
 8014514:	4681      	mov	r9, r0
 8014516:	b178      	cbz	r0, 8014538 <__gethex+0x1ac>
 8014518:	1e6b      	subs	r3, r5, #1
 801451a:	1159      	asrs	r1, r3, #5
 801451c:	f003 021f 	and.w	r2, r3, #31
 8014520:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014524:	f04f 0901 	mov.w	r9, #1
 8014528:	fa09 f202 	lsl.w	r2, r9, r2
 801452c:	420a      	tst	r2, r1
 801452e:	d003      	beq.n	8014538 <__gethex+0x1ac>
 8014530:	454b      	cmp	r3, r9
 8014532:	dc36      	bgt.n	80145a2 <__gethex+0x216>
 8014534:	f04f 0902 	mov.w	r9, #2
 8014538:	4629      	mov	r1, r5
 801453a:	4620      	mov	r0, r4
 801453c:	f7ff febe 	bl	80142bc <rshift>
 8014540:	442f      	add	r7, r5
 8014542:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014546:	42bb      	cmp	r3, r7
 8014548:	da42      	bge.n	80145d0 <__gethex+0x244>
 801454a:	9801      	ldr	r0, [sp, #4]
 801454c:	4621      	mov	r1, r4
 801454e:	f7fe f943 	bl	80127d8 <_Bfree>
 8014552:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014554:	2300      	movs	r3, #0
 8014556:	6013      	str	r3, [r2, #0]
 8014558:	25a3      	movs	r5, #163	@ 0xa3
 801455a:	e793      	b.n	8014484 <__gethex+0xf8>
 801455c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014560:	2a2e      	cmp	r2, #46	@ 0x2e
 8014562:	d012      	beq.n	801458a <__gethex+0x1fe>
 8014564:	2b20      	cmp	r3, #32
 8014566:	d104      	bne.n	8014572 <__gethex+0x1e6>
 8014568:	f845 bb04 	str.w	fp, [r5], #4
 801456c:	f04f 0b00 	mov.w	fp, #0
 8014570:	465b      	mov	r3, fp
 8014572:	7830      	ldrb	r0, [r6, #0]
 8014574:	9303      	str	r3, [sp, #12]
 8014576:	f7ff fef3 	bl	8014360 <__hexdig_fun>
 801457a:	9b03      	ldr	r3, [sp, #12]
 801457c:	f000 000f 	and.w	r0, r0, #15
 8014580:	4098      	lsls	r0, r3
 8014582:	ea4b 0b00 	orr.w	fp, fp, r0
 8014586:	3304      	adds	r3, #4
 8014588:	e7ae      	b.n	80144e8 <__gethex+0x15c>
 801458a:	45b1      	cmp	r9, r6
 801458c:	d8ea      	bhi.n	8014564 <__gethex+0x1d8>
 801458e:	492b      	ldr	r1, [pc, #172]	@ (801463c <__gethex+0x2b0>)
 8014590:	9303      	str	r3, [sp, #12]
 8014592:	2201      	movs	r2, #1
 8014594:	4630      	mov	r0, r6
 8014596:	f7ff fe33 	bl	8014200 <strncmp>
 801459a:	9b03      	ldr	r3, [sp, #12]
 801459c:	2800      	cmp	r0, #0
 801459e:	d1e1      	bne.n	8014564 <__gethex+0x1d8>
 80145a0:	e7a2      	b.n	80144e8 <__gethex+0x15c>
 80145a2:	1ea9      	subs	r1, r5, #2
 80145a4:	4620      	mov	r0, r4
 80145a6:	f7fe fd68 	bl	801307a <__any_on>
 80145aa:	2800      	cmp	r0, #0
 80145ac:	d0c2      	beq.n	8014534 <__gethex+0x1a8>
 80145ae:	f04f 0903 	mov.w	r9, #3
 80145b2:	e7c1      	b.n	8014538 <__gethex+0x1ac>
 80145b4:	da09      	bge.n	80145ca <__gethex+0x23e>
 80145b6:	1b75      	subs	r5, r6, r5
 80145b8:	4621      	mov	r1, r4
 80145ba:	9801      	ldr	r0, [sp, #4]
 80145bc:	462a      	mov	r2, r5
 80145be:	f7fe fb23 	bl	8012c08 <__lshift>
 80145c2:	1b7f      	subs	r7, r7, r5
 80145c4:	4604      	mov	r4, r0
 80145c6:	f100 0a14 	add.w	sl, r0, #20
 80145ca:	f04f 0900 	mov.w	r9, #0
 80145ce:	e7b8      	b.n	8014542 <__gethex+0x1b6>
 80145d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80145d4:	42bd      	cmp	r5, r7
 80145d6:	dd6f      	ble.n	80146b8 <__gethex+0x32c>
 80145d8:	1bed      	subs	r5, r5, r7
 80145da:	42ae      	cmp	r6, r5
 80145dc:	dc34      	bgt.n	8014648 <__gethex+0x2bc>
 80145de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80145e2:	2b02      	cmp	r3, #2
 80145e4:	d022      	beq.n	801462c <__gethex+0x2a0>
 80145e6:	2b03      	cmp	r3, #3
 80145e8:	d024      	beq.n	8014634 <__gethex+0x2a8>
 80145ea:	2b01      	cmp	r3, #1
 80145ec:	d115      	bne.n	801461a <__gethex+0x28e>
 80145ee:	42ae      	cmp	r6, r5
 80145f0:	d113      	bne.n	801461a <__gethex+0x28e>
 80145f2:	2e01      	cmp	r6, #1
 80145f4:	d10b      	bne.n	801460e <__gethex+0x282>
 80145f6:	9a02      	ldr	r2, [sp, #8]
 80145f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80145fc:	6013      	str	r3, [r2, #0]
 80145fe:	2301      	movs	r3, #1
 8014600:	6123      	str	r3, [r4, #16]
 8014602:	f8ca 3000 	str.w	r3, [sl]
 8014606:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014608:	2562      	movs	r5, #98	@ 0x62
 801460a:	601c      	str	r4, [r3, #0]
 801460c:	e73a      	b.n	8014484 <__gethex+0xf8>
 801460e:	1e71      	subs	r1, r6, #1
 8014610:	4620      	mov	r0, r4
 8014612:	f7fe fd32 	bl	801307a <__any_on>
 8014616:	2800      	cmp	r0, #0
 8014618:	d1ed      	bne.n	80145f6 <__gethex+0x26a>
 801461a:	9801      	ldr	r0, [sp, #4]
 801461c:	4621      	mov	r1, r4
 801461e:	f7fe f8db 	bl	80127d8 <_Bfree>
 8014622:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014624:	2300      	movs	r3, #0
 8014626:	6013      	str	r3, [r2, #0]
 8014628:	2550      	movs	r5, #80	@ 0x50
 801462a:	e72b      	b.n	8014484 <__gethex+0xf8>
 801462c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801462e:	2b00      	cmp	r3, #0
 8014630:	d1f3      	bne.n	801461a <__gethex+0x28e>
 8014632:	e7e0      	b.n	80145f6 <__gethex+0x26a>
 8014634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014636:	2b00      	cmp	r3, #0
 8014638:	d1dd      	bne.n	80145f6 <__gethex+0x26a>
 801463a:	e7ee      	b.n	801461a <__gethex+0x28e>
 801463c:	08017218 	.word	0x08017218
 8014640:	080170ad 	.word	0x080170ad
 8014644:	080173c6 	.word	0x080173c6
 8014648:	1e6f      	subs	r7, r5, #1
 801464a:	f1b9 0f00 	cmp.w	r9, #0
 801464e:	d130      	bne.n	80146b2 <__gethex+0x326>
 8014650:	b127      	cbz	r7, 801465c <__gethex+0x2d0>
 8014652:	4639      	mov	r1, r7
 8014654:	4620      	mov	r0, r4
 8014656:	f7fe fd10 	bl	801307a <__any_on>
 801465a:	4681      	mov	r9, r0
 801465c:	117a      	asrs	r2, r7, #5
 801465e:	2301      	movs	r3, #1
 8014660:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014664:	f007 071f 	and.w	r7, r7, #31
 8014668:	40bb      	lsls	r3, r7
 801466a:	4213      	tst	r3, r2
 801466c:	4629      	mov	r1, r5
 801466e:	4620      	mov	r0, r4
 8014670:	bf18      	it	ne
 8014672:	f049 0902 	orrne.w	r9, r9, #2
 8014676:	f7ff fe21 	bl	80142bc <rshift>
 801467a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801467e:	1b76      	subs	r6, r6, r5
 8014680:	2502      	movs	r5, #2
 8014682:	f1b9 0f00 	cmp.w	r9, #0
 8014686:	d047      	beq.n	8014718 <__gethex+0x38c>
 8014688:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801468c:	2b02      	cmp	r3, #2
 801468e:	d015      	beq.n	80146bc <__gethex+0x330>
 8014690:	2b03      	cmp	r3, #3
 8014692:	d017      	beq.n	80146c4 <__gethex+0x338>
 8014694:	2b01      	cmp	r3, #1
 8014696:	d109      	bne.n	80146ac <__gethex+0x320>
 8014698:	f019 0f02 	tst.w	r9, #2
 801469c:	d006      	beq.n	80146ac <__gethex+0x320>
 801469e:	f8da 3000 	ldr.w	r3, [sl]
 80146a2:	ea49 0903 	orr.w	r9, r9, r3
 80146a6:	f019 0f01 	tst.w	r9, #1
 80146aa:	d10e      	bne.n	80146ca <__gethex+0x33e>
 80146ac:	f045 0510 	orr.w	r5, r5, #16
 80146b0:	e032      	b.n	8014718 <__gethex+0x38c>
 80146b2:	f04f 0901 	mov.w	r9, #1
 80146b6:	e7d1      	b.n	801465c <__gethex+0x2d0>
 80146b8:	2501      	movs	r5, #1
 80146ba:	e7e2      	b.n	8014682 <__gethex+0x2f6>
 80146bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146be:	f1c3 0301 	rsb	r3, r3, #1
 80146c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80146c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d0f0      	beq.n	80146ac <__gethex+0x320>
 80146ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80146ce:	f104 0314 	add.w	r3, r4, #20
 80146d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80146d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80146da:	f04f 0c00 	mov.w	ip, #0
 80146de:	4618      	mov	r0, r3
 80146e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80146e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80146e8:	d01b      	beq.n	8014722 <__gethex+0x396>
 80146ea:	3201      	adds	r2, #1
 80146ec:	6002      	str	r2, [r0, #0]
 80146ee:	2d02      	cmp	r5, #2
 80146f0:	f104 0314 	add.w	r3, r4, #20
 80146f4:	d13c      	bne.n	8014770 <__gethex+0x3e4>
 80146f6:	f8d8 2000 	ldr.w	r2, [r8]
 80146fa:	3a01      	subs	r2, #1
 80146fc:	42b2      	cmp	r2, r6
 80146fe:	d109      	bne.n	8014714 <__gethex+0x388>
 8014700:	1171      	asrs	r1, r6, #5
 8014702:	2201      	movs	r2, #1
 8014704:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014708:	f006 061f 	and.w	r6, r6, #31
 801470c:	fa02 f606 	lsl.w	r6, r2, r6
 8014710:	421e      	tst	r6, r3
 8014712:	d13a      	bne.n	801478a <__gethex+0x3fe>
 8014714:	f045 0520 	orr.w	r5, r5, #32
 8014718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801471a:	601c      	str	r4, [r3, #0]
 801471c:	9b02      	ldr	r3, [sp, #8]
 801471e:	601f      	str	r7, [r3, #0]
 8014720:	e6b0      	b.n	8014484 <__gethex+0xf8>
 8014722:	4299      	cmp	r1, r3
 8014724:	f843 cc04 	str.w	ip, [r3, #-4]
 8014728:	d8d9      	bhi.n	80146de <__gethex+0x352>
 801472a:	68a3      	ldr	r3, [r4, #8]
 801472c:	459b      	cmp	fp, r3
 801472e:	db17      	blt.n	8014760 <__gethex+0x3d4>
 8014730:	6861      	ldr	r1, [r4, #4]
 8014732:	9801      	ldr	r0, [sp, #4]
 8014734:	3101      	adds	r1, #1
 8014736:	f7fe f80f 	bl	8012758 <_Balloc>
 801473a:	4681      	mov	r9, r0
 801473c:	b918      	cbnz	r0, 8014746 <__gethex+0x3ba>
 801473e:	4b1a      	ldr	r3, [pc, #104]	@ (80147a8 <__gethex+0x41c>)
 8014740:	4602      	mov	r2, r0
 8014742:	2184      	movs	r1, #132	@ 0x84
 8014744:	e6c5      	b.n	80144d2 <__gethex+0x146>
 8014746:	6922      	ldr	r2, [r4, #16]
 8014748:	3202      	adds	r2, #2
 801474a:	f104 010c 	add.w	r1, r4, #12
 801474e:	0092      	lsls	r2, r2, #2
 8014750:	300c      	adds	r0, #12
 8014752:	f7fd f8a0 	bl	8011896 <memcpy>
 8014756:	4621      	mov	r1, r4
 8014758:	9801      	ldr	r0, [sp, #4]
 801475a:	f7fe f83d 	bl	80127d8 <_Bfree>
 801475e:	464c      	mov	r4, r9
 8014760:	6923      	ldr	r3, [r4, #16]
 8014762:	1c5a      	adds	r2, r3, #1
 8014764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014768:	6122      	str	r2, [r4, #16]
 801476a:	2201      	movs	r2, #1
 801476c:	615a      	str	r2, [r3, #20]
 801476e:	e7be      	b.n	80146ee <__gethex+0x362>
 8014770:	6922      	ldr	r2, [r4, #16]
 8014772:	455a      	cmp	r2, fp
 8014774:	dd0b      	ble.n	801478e <__gethex+0x402>
 8014776:	2101      	movs	r1, #1
 8014778:	4620      	mov	r0, r4
 801477a:	f7ff fd9f 	bl	80142bc <rshift>
 801477e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014782:	3701      	adds	r7, #1
 8014784:	42bb      	cmp	r3, r7
 8014786:	f6ff aee0 	blt.w	801454a <__gethex+0x1be>
 801478a:	2501      	movs	r5, #1
 801478c:	e7c2      	b.n	8014714 <__gethex+0x388>
 801478e:	f016 061f 	ands.w	r6, r6, #31
 8014792:	d0fa      	beq.n	801478a <__gethex+0x3fe>
 8014794:	4453      	add	r3, sl
 8014796:	f1c6 0620 	rsb	r6, r6, #32
 801479a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801479e:	f7fe f8cd 	bl	801293c <__hi0bits>
 80147a2:	42b0      	cmp	r0, r6
 80147a4:	dbe7      	blt.n	8014776 <__gethex+0x3ea>
 80147a6:	e7f0      	b.n	801478a <__gethex+0x3fe>
 80147a8:	080170ad 	.word	0x080170ad

080147ac <L_shift>:
 80147ac:	f1c2 0208 	rsb	r2, r2, #8
 80147b0:	0092      	lsls	r2, r2, #2
 80147b2:	b570      	push	{r4, r5, r6, lr}
 80147b4:	f1c2 0620 	rsb	r6, r2, #32
 80147b8:	6843      	ldr	r3, [r0, #4]
 80147ba:	6804      	ldr	r4, [r0, #0]
 80147bc:	fa03 f506 	lsl.w	r5, r3, r6
 80147c0:	432c      	orrs	r4, r5
 80147c2:	40d3      	lsrs	r3, r2
 80147c4:	6004      	str	r4, [r0, #0]
 80147c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80147ca:	4288      	cmp	r0, r1
 80147cc:	d3f4      	bcc.n	80147b8 <L_shift+0xc>
 80147ce:	bd70      	pop	{r4, r5, r6, pc}

080147d0 <__match>:
 80147d0:	b530      	push	{r4, r5, lr}
 80147d2:	6803      	ldr	r3, [r0, #0]
 80147d4:	3301      	adds	r3, #1
 80147d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147da:	b914      	cbnz	r4, 80147e2 <__match+0x12>
 80147dc:	6003      	str	r3, [r0, #0]
 80147de:	2001      	movs	r0, #1
 80147e0:	bd30      	pop	{r4, r5, pc}
 80147e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80147ea:	2d19      	cmp	r5, #25
 80147ec:	bf98      	it	ls
 80147ee:	3220      	addls	r2, #32
 80147f0:	42a2      	cmp	r2, r4
 80147f2:	d0f0      	beq.n	80147d6 <__match+0x6>
 80147f4:	2000      	movs	r0, #0
 80147f6:	e7f3      	b.n	80147e0 <__match+0x10>

080147f8 <__hexnan>:
 80147f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147fc:	680b      	ldr	r3, [r1, #0]
 80147fe:	6801      	ldr	r1, [r0, #0]
 8014800:	115e      	asrs	r6, r3, #5
 8014802:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014806:	f013 031f 	ands.w	r3, r3, #31
 801480a:	b087      	sub	sp, #28
 801480c:	bf18      	it	ne
 801480e:	3604      	addne	r6, #4
 8014810:	2500      	movs	r5, #0
 8014812:	1f37      	subs	r7, r6, #4
 8014814:	4682      	mov	sl, r0
 8014816:	4690      	mov	r8, r2
 8014818:	9301      	str	r3, [sp, #4]
 801481a:	f846 5c04 	str.w	r5, [r6, #-4]
 801481e:	46b9      	mov	r9, r7
 8014820:	463c      	mov	r4, r7
 8014822:	9502      	str	r5, [sp, #8]
 8014824:	46ab      	mov	fp, r5
 8014826:	784a      	ldrb	r2, [r1, #1]
 8014828:	1c4b      	adds	r3, r1, #1
 801482a:	9303      	str	r3, [sp, #12]
 801482c:	b342      	cbz	r2, 8014880 <__hexnan+0x88>
 801482e:	4610      	mov	r0, r2
 8014830:	9105      	str	r1, [sp, #20]
 8014832:	9204      	str	r2, [sp, #16]
 8014834:	f7ff fd94 	bl	8014360 <__hexdig_fun>
 8014838:	2800      	cmp	r0, #0
 801483a:	d151      	bne.n	80148e0 <__hexnan+0xe8>
 801483c:	9a04      	ldr	r2, [sp, #16]
 801483e:	9905      	ldr	r1, [sp, #20]
 8014840:	2a20      	cmp	r2, #32
 8014842:	d818      	bhi.n	8014876 <__hexnan+0x7e>
 8014844:	9b02      	ldr	r3, [sp, #8]
 8014846:	459b      	cmp	fp, r3
 8014848:	dd13      	ble.n	8014872 <__hexnan+0x7a>
 801484a:	454c      	cmp	r4, r9
 801484c:	d206      	bcs.n	801485c <__hexnan+0x64>
 801484e:	2d07      	cmp	r5, #7
 8014850:	dc04      	bgt.n	801485c <__hexnan+0x64>
 8014852:	462a      	mov	r2, r5
 8014854:	4649      	mov	r1, r9
 8014856:	4620      	mov	r0, r4
 8014858:	f7ff ffa8 	bl	80147ac <L_shift>
 801485c:	4544      	cmp	r4, r8
 801485e:	d952      	bls.n	8014906 <__hexnan+0x10e>
 8014860:	2300      	movs	r3, #0
 8014862:	f1a4 0904 	sub.w	r9, r4, #4
 8014866:	f844 3c04 	str.w	r3, [r4, #-4]
 801486a:	f8cd b008 	str.w	fp, [sp, #8]
 801486e:	464c      	mov	r4, r9
 8014870:	461d      	mov	r5, r3
 8014872:	9903      	ldr	r1, [sp, #12]
 8014874:	e7d7      	b.n	8014826 <__hexnan+0x2e>
 8014876:	2a29      	cmp	r2, #41	@ 0x29
 8014878:	d157      	bne.n	801492a <__hexnan+0x132>
 801487a:	3102      	adds	r1, #2
 801487c:	f8ca 1000 	str.w	r1, [sl]
 8014880:	f1bb 0f00 	cmp.w	fp, #0
 8014884:	d051      	beq.n	801492a <__hexnan+0x132>
 8014886:	454c      	cmp	r4, r9
 8014888:	d206      	bcs.n	8014898 <__hexnan+0xa0>
 801488a:	2d07      	cmp	r5, #7
 801488c:	dc04      	bgt.n	8014898 <__hexnan+0xa0>
 801488e:	462a      	mov	r2, r5
 8014890:	4649      	mov	r1, r9
 8014892:	4620      	mov	r0, r4
 8014894:	f7ff ff8a 	bl	80147ac <L_shift>
 8014898:	4544      	cmp	r4, r8
 801489a:	d936      	bls.n	801490a <__hexnan+0x112>
 801489c:	f1a8 0204 	sub.w	r2, r8, #4
 80148a0:	4623      	mov	r3, r4
 80148a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80148a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80148aa:	429f      	cmp	r7, r3
 80148ac:	d2f9      	bcs.n	80148a2 <__hexnan+0xaa>
 80148ae:	1b3b      	subs	r3, r7, r4
 80148b0:	f023 0303 	bic.w	r3, r3, #3
 80148b4:	3304      	adds	r3, #4
 80148b6:	3401      	adds	r4, #1
 80148b8:	3e03      	subs	r6, #3
 80148ba:	42b4      	cmp	r4, r6
 80148bc:	bf88      	it	hi
 80148be:	2304      	movhi	r3, #4
 80148c0:	4443      	add	r3, r8
 80148c2:	2200      	movs	r2, #0
 80148c4:	f843 2b04 	str.w	r2, [r3], #4
 80148c8:	429f      	cmp	r7, r3
 80148ca:	d2fb      	bcs.n	80148c4 <__hexnan+0xcc>
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	b91b      	cbnz	r3, 80148d8 <__hexnan+0xe0>
 80148d0:	4547      	cmp	r7, r8
 80148d2:	d128      	bne.n	8014926 <__hexnan+0x12e>
 80148d4:	2301      	movs	r3, #1
 80148d6:	603b      	str	r3, [r7, #0]
 80148d8:	2005      	movs	r0, #5
 80148da:	b007      	add	sp, #28
 80148dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148e0:	3501      	adds	r5, #1
 80148e2:	2d08      	cmp	r5, #8
 80148e4:	f10b 0b01 	add.w	fp, fp, #1
 80148e8:	dd06      	ble.n	80148f8 <__hexnan+0x100>
 80148ea:	4544      	cmp	r4, r8
 80148ec:	d9c1      	bls.n	8014872 <__hexnan+0x7a>
 80148ee:	2300      	movs	r3, #0
 80148f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80148f4:	2501      	movs	r5, #1
 80148f6:	3c04      	subs	r4, #4
 80148f8:	6822      	ldr	r2, [r4, #0]
 80148fa:	f000 000f 	and.w	r0, r0, #15
 80148fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014902:	6020      	str	r0, [r4, #0]
 8014904:	e7b5      	b.n	8014872 <__hexnan+0x7a>
 8014906:	2508      	movs	r5, #8
 8014908:	e7b3      	b.n	8014872 <__hexnan+0x7a>
 801490a:	9b01      	ldr	r3, [sp, #4]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d0dd      	beq.n	80148cc <__hexnan+0xd4>
 8014910:	f1c3 0320 	rsb	r3, r3, #32
 8014914:	f04f 32ff 	mov.w	r2, #4294967295
 8014918:	40da      	lsrs	r2, r3
 801491a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801491e:	4013      	ands	r3, r2
 8014920:	f846 3c04 	str.w	r3, [r6, #-4]
 8014924:	e7d2      	b.n	80148cc <__hexnan+0xd4>
 8014926:	3f04      	subs	r7, #4
 8014928:	e7d0      	b.n	80148cc <__hexnan+0xd4>
 801492a:	2004      	movs	r0, #4
 801492c:	e7d5      	b.n	80148da <__hexnan+0xe2>

0801492e <__ascii_mbtowc>:
 801492e:	b082      	sub	sp, #8
 8014930:	b901      	cbnz	r1, 8014934 <__ascii_mbtowc+0x6>
 8014932:	a901      	add	r1, sp, #4
 8014934:	b142      	cbz	r2, 8014948 <__ascii_mbtowc+0x1a>
 8014936:	b14b      	cbz	r3, 801494c <__ascii_mbtowc+0x1e>
 8014938:	7813      	ldrb	r3, [r2, #0]
 801493a:	600b      	str	r3, [r1, #0]
 801493c:	7812      	ldrb	r2, [r2, #0]
 801493e:	1e10      	subs	r0, r2, #0
 8014940:	bf18      	it	ne
 8014942:	2001      	movne	r0, #1
 8014944:	b002      	add	sp, #8
 8014946:	4770      	bx	lr
 8014948:	4610      	mov	r0, r2
 801494a:	e7fb      	b.n	8014944 <__ascii_mbtowc+0x16>
 801494c:	f06f 0001 	mvn.w	r0, #1
 8014950:	e7f8      	b.n	8014944 <__ascii_mbtowc+0x16>

08014952 <_realloc_r>:
 8014952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014956:	4680      	mov	r8, r0
 8014958:	4615      	mov	r5, r2
 801495a:	460c      	mov	r4, r1
 801495c:	b921      	cbnz	r1, 8014968 <_realloc_r+0x16>
 801495e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014962:	4611      	mov	r1, r2
 8014964:	f7fd be6c 	b.w	8012640 <_malloc_r>
 8014968:	b92a      	cbnz	r2, 8014976 <_realloc_r+0x24>
 801496a:	f7fd fdf5 	bl	8012558 <_free_r>
 801496e:	2400      	movs	r4, #0
 8014970:	4620      	mov	r0, r4
 8014972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014976:	f000 f840 	bl	80149fa <_malloc_usable_size_r>
 801497a:	4285      	cmp	r5, r0
 801497c:	4606      	mov	r6, r0
 801497e:	d802      	bhi.n	8014986 <_realloc_r+0x34>
 8014980:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014984:	d8f4      	bhi.n	8014970 <_realloc_r+0x1e>
 8014986:	4629      	mov	r1, r5
 8014988:	4640      	mov	r0, r8
 801498a:	f7fd fe59 	bl	8012640 <_malloc_r>
 801498e:	4607      	mov	r7, r0
 8014990:	2800      	cmp	r0, #0
 8014992:	d0ec      	beq.n	801496e <_realloc_r+0x1c>
 8014994:	42b5      	cmp	r5, r6
 8014996:	462a      	mov	r2, r5
 8014998:	4621      	mov	r1, r4
 801499a:	bf28      	it	cs
 801499c:	4632      	movcs	r2, r6
 801499e:	f7fc ff7a 	bl	8011896 <memcpy>
 80149a2:	4621      	mov	r1, r4
 80149a4:	4640      	mov	r0, r8
 80149a6:	f7fd fdd7 	bl	8012558 <_free_r>
 80149aa:	463c      	mov	r4, r7
 80149ac:	e7e0      	b.n	8014970 <_realloc_r+0x1e>

080149ae <__ascii_wctomb>:
 80149ae:	4603      	mov	r3, r0
 80149b0:	4608      	mov	r0, r1
 80149b2:	b141      	cbz	r1, 80149c6 <__ascii_wctomb+0x18>
 80149b4:	2aff      	cmp	r2, #255	@ 0xff
 80149b6:	d904      	bls.n	80149c2 <__ascii_wctomb+0x14>
 80149b8:	228a      	movs	r2, #138	@ 0x8a
 80149ba:	601a      	str	r2, [r3, #0]
 80149bc:	f04f 30ff 	mov.w	r0, #4294967295
 80149c0:	4770      	bx	lr
 80149c2:	700a      	strb	r2, [r1, #0]
 80149c4:	2001      	movs	r0, #1
 80149c6:	4770      	bx	lr

080149c8 <fiprintf>:
 80149c8:	b40e      	push	{r1, r2, r3}
 80149ca:	b503      	push	{r0, r1, lr}
 80149cc:	4601      	mov	r1, r0
 80149ce:	ab03      	add	r3, sp, #12
 80149d0:	4805      	ldr	r0, [pc, #20]	@ (80149e8 <fiprintf+0x20>)
 80149d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80149d6:	6800      	ldr	r0, [r0, #0]
 80149d8:	9301      	str	r3, [sp, #4]
 80149da:	f000 f83f 	bl	8014a5c <_vfiprintf_r>
 80149de:	b002      	add	sp, #8
 80149e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80149e4:	b003      	add	sp, #12
 80149e6:	4770      	bx	lr
 80149e8:	200000a4 	.word	0x200000a4

080149ec <abort>:
 80149ec:	b508      	push	{r3, lr}
 80149ee:	2006      	movs	r0, #6
 80149f0:	f000 fa08 	bl	8014e04 <raise>
 80149f4:	2001      	movs	r0, #1
 80149f6:	f7ed f995 	bl	8001d24 <_exit>

080149fa <_malloc_usable_size_r>:
 80149fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149fe:	1f18      	subs	r0, r3, #4
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	bfbc      	itt	lt
 8014a04:	580b      	ldrlt	r3, [r1, r0]
 8014a06:	18c0      	addlt	r0, r0, r3
 8014a08:	4770      	bx	lr

08014a0a <__sfputc_r>:
 8014a0a:	6893      	ldr	r3, [r2, #8]
 8014a0c:	3b01      	subs	r3, #1
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	b410      	push	{r4}
 8014a12:	6093      	str	r3, [r2, #8]
 8014a14:	da08      	bge.n	8014a28 <__sfputc_r+0x1e>
 8014a16:	6994      	ldr	r4, [r2, #24]
 8014a18:	42a3      	cmp	r3, r4
 8014a1a:	db01      	blt.n	8014a20 <__sfputc_r+0x16>
 8014a1c:	290a      	cmp	r1, #10
 8014a1e:	d103      	bne.n	8014a28 <__sfputc_r+0x1e>
 8014a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a24:	f000 b932 	b.w	8014c8c <__swbuf_r>
 8014a28:	6813      	ldr	r3, [r2, #0]
 8014a2a:	1c58      	adds	r0, r3, #1
 8014a2c:	6010      	str	r0, [r2, #0]
 8014a2e:	7019      	strb	r1, [r3, #0]
 8014a30:	4608      	mov	r0, r1
 8014a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a36:	4770      	bx	lr

08014a38 <__sfputs_r>:
 8014a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a3a:	4606      	mov	r6, r0
 8014a3c:	460f      	mov	r7, r1
 8014a3e:	4614      	mov	r4, r2
 8014a40:	18d5      	adds	r5, r2, r3
 8014a42:	42ac      	cmp	r4, r5
 8014a44:	d101      	bne.n	8014a4a <__sfputs_r+0x12>
 8014a46:	2000      	movs	r0, #0
 8014a48:	e007      	b.n	8014a5a <__sfputs_r+0x22>
 8014a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a4e:	463a      	mov	r2, r7
 8014a50:	4630      	mov	r0, r6
 8014a52:	f7ff ffda 	bl	8014a0a <__sfputc_r>
 8014a56:	1c43      	adds	r3, r0, #1
 8014a58:	d1f3      	bne.n	8014a42 <__sfputs_r+0xa>
 8014a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014a5c <_vfiprintf_r>:
 8014a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a60:	460d      	mov	r5, r1
 8014a62:	b09d      	sub	sp, #116	@ 0x74
 8014a64:	4614      	mov	r4, r2
 8014a66:	4698      	mov	r8, r3
 8014a68:	4606      	mov	r6, r0
 8014a6a:	b118      	cbz	r0, 8014a74 <_vfiprintf_r+0x18>
 8014a6c:	6a03      	ldr	r3, [r0, #32]
 8014a6e:	b90b      	cbnz	r3, 8014a74 <_vfiprintf_r+0x18>
 8014a70:	f7fc fd92 	bl	8011598 <__sinit>
 8014a74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a76:	07d9      	lsls	r1, r3, #31
 8014a78:	d405      	bmi.n	8014a86 <_vfiprintf_r+0x2a>
 8014a7a:	89ab      	ldrh	r3, [r5, #12]
 8014a7c:	059a      	lsls	r2, r3, #22
 8014a7e:	d402      	bmi.n	8014a86 <_vfiprintf_r+0x2a>
 8014a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014a82:	f7fc ff06 	bl	8011892 <__retarget_lock_acquire_recursive>
 8014a86:	89ab      	ldrh	r3, [r5, #12]
 8014a88:	071b      	lsls	r3, r3, #28
 8014a8a:	d501      	bpl.n	8014a90 <_vfiprintf_r+0x34>
 8014a8c:	692b      	ldr	r3, [r5, #16]
 8014a8e:	b99b      	cbnz	r3, 8014ab8 <_vfiprintf_r+0x5c>
 8014a90:	4629      	mov	r1, r5
 8014a92:	4630      	mov	r0, r6
 8014a94:	f000 f938 	bl	8014d08 <__swsetup_r>
 8014a98:	b170      	cbz	r0, 8014ab8 <_vfiprintf_r+0x5c>
 8014a9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a9c:	07dc      	lsls	r4, r3, #31
 8014a9e:	d504      	bpl.n	8014aaa <_vfiprintf_r+0x4e>
 8014aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8014aa4:	b01d      	add	sp, #116	@ 0x74
 8014aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aaa:	89ab      	ldrh	r3, [r5, #12]
 8014aac:	0598      	lsls	r0, r3, #22
 8014aae:	d4f7      	bmi.n	8014aa0 <_vfiprintf_r+0x44>
 8014ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ab2:	f7fc feef 	bl	8011894 <__retarget_lock_release_recursive>
 8014ab6:	e7f3      	b.n	8014aa0 <_vfiprintf_r+0x44>
 8014ab8:	2300      	movs	r3, #0
 8014aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8014abc:	2320      	movs	r3, #32
 8014abe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ac6:	2330      	movs	r3, #48	@ 0x30
 8014ac8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014c78 <_vfiprintf_r+0x21c>
 8014acc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014ad0:	f04f 0901 	mov.w	r9, #1
 8014ad4:	4623      	mov	r3, r4
 8014ad6:	469a      	mov	sl, r3
 8014ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014adc:	b10a      	cbz	r2, 8014ae2 <_vfiprintf_r+0x86>
 8014ade:	2a25      	cmp	r2, #37	@ 0x25
 8014ae0:	d1f9      	bne.n	8014ad6 <_vfiprintf_r+0x7a>
 8014ae2:	ebba 0b04 	subs.w	fp, sl, r4
 8014ae6:	d00b      	beq.n	8014b00 <_vfiprintf_r+0xa4>
 8014ae8:	465b      	mov	r3, fp
 8014aea:	4622      	mov	r2, r4
 8014aec:	4629      	mov	r1, r5
 8014aee:	4630      	mov	r0, r6
 8014af0:	f7ff ffa2 	bl	8014a38 <__sfputs_r>
 8014af4:	3001      	adds	r0, #1
 8014af6:	f000 80a7 	beq.w	8014c48 <_vfiprintf_r+0x1ec>
 8014afa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014afc:	445a      	add	r2, fp
 8014afe:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b00:	f89a 3000 	ldrb.w	r3, [sl]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	f000 809f 	beq.w	8014c48 <_vfiprintf_r+0x1ec>
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8014b10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b14:	f10a 0a01 	add.w	sl, sl, #1
 8014b18:	9304      	str	r3, [sp, #16]
 8014b1a:	9307      	str	r3, [sp, #28]
 8014b1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b20:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b22:	4654      	mov	r4, sl
 8014b24:	2205      	movs	r2, #5
 8014b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b2a:	4853      	ldr	r0, [pc, #332]	@ (8014c78 <_vfiprintf_r+0x21c>)
 8014b2c:	f7eb fb58 	bl	80001e0 <memchr>
 8014b30:	9a04      	ldr	r2, [sp, #16]
 8014b32:	b9d8      	cbnz	r0, 8014b6c <_vfiprintf_r+0x110>
 8014b34:	06d1      	lsls	r1, r2, #27
 8014b36:	bf44      	itt	mi
 8014b38:	2320      	movmi	r3, #32
 8014b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b3e:	0713      	lsls	r3, r2, #28
 8014b40:	bf44      	itt	mi
 8014b42:	232b      	movmi	r3, #43	@ 0x2b
 8014b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b48:	f89a 3000 	ldrb.w	r3, [sl]
 8014b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b4e:	d015      	beq.n	8014b7c <_vfiprintf_r+0x120>
 8014b50:	9a07      	ldr	r2, [sp, #28]
 8014b52:	4654      	mov	r4, sl
 8014b54:	2000      	movs	r0, #0
 8014b56:	f04f 0c0a 	mov.w	ip, #10
 8014b5a:	4621      	mov	r1, r4
 8014b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b60:	3b30      	subs	r3, #48	@ 0x30
 8014b62:	2b09      	cmp	r3, #9
 8014b64:	d94b      	bls.n	8014bfe <_vfiprintf_r+0x1a2>
 8014b66:	b1b0      	cbz	r0, 8014b96 <_vfiprintf_r+0x13a>
 8014b68:	9207      	str	r2, [sp, #28]
 8014b6a:	e014      	b.n	8014b96 <_vfiprintf_r+0x13a>
 8014b6c:	eba0 0308 	sub.w	r3, r0, r8
 8014b70:	fa09 f303 	lsl.w	r3, r9, r3
 8014b74:	4313      	orrs	r3, r2
 8014b76:	9304      	str	r3, [sp, #16]
 8014b78:	46a2      	mov	sl, r4
 8014b7a:	e7d2      	b.n	8014b22 <_vfiprintf_r+0xc6>
 8014b7c:	9b03      	ldr	r3, [sp, #12]
 8014b7e:	1d19      	adds	r1, r3, #4
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	9103      	str	r1, [sp, #12]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	bfbb      	ittet	lt
 8014b88:	425b      	neglt	r3, r3
 8014b8a:	f042 0202 	orrlt.w	r2, r2, #2
 8014b8e:	9307      	strge	r3, [sp, #28]
 8014b90:	9307      	strlt	r3, [sp, #28]
 8014b92:	bfb8      	it	lt
 8014b94:	9204      	strlt	r2, [sp, #16]
 8014b96:	7823      	ldrb	r3, [r4, #0]
 8014b98:	2b2e      	cmp	r3, #46	@ 0x2e
 8014b9a:	d10a      	bne.n	8014bb2 <_vfiprintf_r+0x156>
 8014b9c:	7863      	ldrb	r3, [r4, #1]
 8014b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ba0:	d132      	bne.n	8014c08 <_vfiprintf_r+0x1ac>
 8014ba2:	9b03      	ldr	r3, [sp, #12]
 8014ba4:	1d1a      	adds	r2, r3, #4
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	9203      	str	r2, [sp, #12]
 8014baa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014bae:	3402      	adds	r4, #2
 8014bb0:	9305      	str	r3, [sp, #20]
 8014bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014c88 <_vfiprintf_r+0x22c>
 8014bb6:	7821      	ldrb	r1, [r4, #0]
 8014bb8:	2203      	movs	r2, #3
 8014bba:	4650      	mov	r0, sl
 8014bbc:	f7eb fb10 	bl	80001e0 <memchr>
 8014bc0:	b138      	cbz	r0, 8014bd2 <_vfiprintf_r+0x176>
 8014bc2:	9b04      	ldr	r3, [sp, #16]
 8014bc4:	eba0 000a 	sub.w	r0, r0, sl
 8014bc8:	2240      	movs	r2, #64	@ 0x40
 8014bca:	4082      	lsls	r2, r0
 8014bcc:	4313      	orrs	r3, r2
 8014bce:	3401      	adds	r4, #1
 8014bd0:	9304      	str	r3, [sp, #16]
 8014bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bd6:	4829      	ldr	r0, [pc, #164]	@ (8014c7c <_vfiprintf_r+0x220>)
 8014bd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014bdc:	2206      	movs	r2, #6
 8014bde:	f7eb faff 	bl	80001e0 <memchr>
 8014be2:	2800      	cmp	r0, #0
 8014be4:	d03f      	beq.n	8014c66 <_vfiprintf_r+0x20a>
 8014be6:	4b26      	ldr	r3, [pc, #152]	@ (8014c80 <_vfiprintf_r+0x224>)
 8014be8:	bb1b      	cbnz	r3, 8014c32 <_vfiprintf_r+0x1d6>
 8014bea:	9b03      	ldr	r3, [sp, #12]
 8014bec:	3307      	adds	r3, #7
 8014bee:	f023 0307 	bic.w	r3, r3, #7
 8014bf2:	3308      	adds	r3, #8
 8014bf4:	9303      	str	r3, [sp, #12]
 8014bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bf8:	443b      	add	r3, r7
 8014bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8014bfc:	e76a      	b.n	8014ad4 <_vfiprintf_r+0x78>
 8014bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c02:	460c      	mov	r4, r1
 8014c04:	2001      	movs	r0, #1
 8014c06:	e7a8      	b.n	8014b5a <_vfiprintf_r+0xfe>
 8014c08:	2300      	movs	r3, #0
 8014c0a:	3401      	adds	r4, #1
 8014c0c:	9305      	str	r3, [sp, #20]
 8014c0e:	4619      	mov	r1, r3
 8014c10:	f04f 0c0a 	mov.w	ip, #10
 8014c14:	4620      	mov	r0, r4
 8014c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c1a:	3a30      	subs	r2, #48	@ 0x30
 8014c1c:	2a09      	cmp	r2, #9
 8014c1e:	d903      	bls.n	8014c28 <_vfiprintf_r+0x1cc>
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d0c6      	beq.n	8014bb2 <_vfiprintf_r+0x156>
 8014c24:	9105      	str	r1, [sp, #20]
 8014c26:	e7c4      	b.n	8014bb2 <_vfiprintf_r+0x156>
 8014c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	2301      	movs	r3, #1
 8014c30:	e7f0      	b.n	8014c14 <_vfiprintf_r+0x1b8>
 8014c32:	ab03      	add	r3, sp, #12
 8014c34:	9300      	str	r3, [sp, #0]
 8014c36:	462a      	mov	r2, r5
 8014c38:	4b12      	ldr	r3, [pc, #72]	@ (8014c84 <_vfiprintf_r+0x228>)
 8014c3a:	a904      	add	r1, sp, #16
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	f7fb fe53 	bl	80108e8 <_printf_float>
 8014c42:	4607      	mov	r7, r0
 8014c44:	1c78      	adds	r0, r7, #1
 8014c46:	d1d6      	bne.n	8014bf6 <_vfiprintf_r+0x19a>
 8014c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014c4a:	07d9      	lsls	r1, r3, #31
 8014c4c:	d405      	bmi.n	8014c5a <_vfiprintf_r+0x1fe>
 8014c4e:	89ab      	ldrh	r3, [r5, #12]
 8014c50:	059a      	lsls	r2, r3, #22
 8014c52:	d402      	bmi.n	8014c5a <_vfiprintf_r+0x1fe>
 8014c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014c56:	f7fc fe1d 	bl	8011894 <__retarget_lock_release_recursive>
 8014c5a:	89ab      	ldrh	r3, [r5, #12]
 8014c5c:	065b      	lsls	r3, r3, #25
 8014c5e:	f53f af1f 	bmi.w	8014aa0 <_vfiprintf_r+0x44>
 8014c62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c64:	e71e      	b.n	8014aa4 <_vfiprintf_r+0x48>
 8014c66:	ab03      	add	r3, sp, #12
 8014c68:	9300      	str	r3, [sp, #0]
 8014c6a:	462a      	mov	r2, r5
 8014c6c:	4b05      	ldr	r3, [pc, #20]	@ (8014c84 <_vfiprintf_r+0x228>)
 8014c6e:	a904      	add	r1, sp, #16
 8014c70:	4630      	mov	r0, r6
 8014c72:	f7fc f8d1 	bl	8010e18 <_printf_i>
 8014c76:	e7e4      	b.n	8014c42 <_vfiprintf_r+0x1e6>
 8014c78:	08017371 	.word	0x08017371
 8014c7c:	0801737b 	.word	0x0801737b
 8014c80:	080108e9 	.word	0x080108e9
 8014c84:	08014a39 	.word	0x08014a39
 8014c88:	08017377 	.word	0x08017377

08014c8c <__swbuf_r>:
 8014c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c8e:	460e      	mov	r6, r1
 8014c90:	4614      	mov	r4, r2
 8014c92:	4605      	mov	r5, r0
 8014c94:	b118      	cbz	r0, 8014c9e <__swbuf_r+0x12>
 8014c96:	6a03      	ldr	r3, [r0, #32]
 8014c98:	b90b      	cbnz	r3, 8014c9e <__swbuf_r+0x12>
 8014c9a:	f7fc fc7d 	bl	8011598 <__sinit>
 8014c9e:	69a3      	ldr	r3, [r4, #24]
 8014ca0:	60a3      	str	r3, [r4, #8]
 8014ca2:	89a3      	ldrh	r3, [r4, #12]
 8014ca4:	071a      	lsls	r2, r3, #28
 8014ca6:	d501      	bpl.n	8014cac <__swbuf_r+0x20>
 8014ca8:	6923      	ldr	r3, [r4, #16]
 8014caa:	b943      	cbnz	r3, 8014cbe <__swbuf_r+0x32>
 8014cac:	4621      	mov	r1, r4
 8014cae:	4628      	mov	r0, r5
 8014cb0:	f000 f82a 	bl	8014d08 <__swsetup_r>
 8014cb4:	b118      	cbz	r0, 8014cbe <__swbuf_r+0x32>
 8014cb6:	f04f 37ff 	mov.w	r7, #4294967295
 8014cba:	4638      	mov	r0, r7
 8014cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cbe:	6823      	ldr	r3, [r4, #0]
 8014cc0:	6922      	ldr	r2, [r4, #16]
 8014cc2:	1a98      	subs	r0, r3, r2
 8014cc4:	6963      	ldr	r3, [r4, #20]
 8014cc6:	b2f6      	uxtb	r6, r6
 8014cc8:	4283      	cmp	r3, r0
 8014cca:	4637      	mov	r7, r6
 8014ccc:	dc05      	bgt.n	8014cda <__swbuf_r+0x4e>
 8014cce:	4621      	mov	r1, r4
 8014cd0:	4628      	mov	r0, r5
 8014cd2:	f7ff fa53 	bl	801417c <_fflush_r>
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	d1ed      	bne.n	8014cb6 <__swbuf_r+0x2a>
 8014cda:	68a3      	ldr	r3, [r4, #8]
 8014cdc:	3b01      	subs	r3, #1
 8014cde:	60a3      	str	r3, [r4, #8]
 8014ce0:	6823      	ldr	r3, [r4, #0]
 8014ce2:	1c5a      	adds	r2, r3, #1
 8014ce4:	6022      	str	r2, [r4, #0]
 8014ce6:	701e      	strb	r6, [r3, #0]
 8014ce8:	6962      	ldr	r2, [r4, #20]
 8014cea:	1c43      	adds	r3, r0, #1
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d004      	beq.n	8014cfa <__swbuf_r+0x6e>
 8014cf0:	89a3      	ldrh	r3, [r4, #12]
 8014cf2:	07db      	lsls	r3, r3, #31
 8014cf4:	d5e1      	bpl.n	8014cba <__swbuf_r+0x2e>
 8014cf6:	2e0a      	cmp	r6, #10
 8014cf8:	d1df      	bne.n	8014cba <__swbuf_r+0x2e>
 8014cfa:	4621      	mov	r1, r4
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	f7ff fa3d 	bl	801417c <_fflush_r>
 8014d02:	2800      	cmp	r0, #0
 8014d04:	d0d9      	beq.n	8014cba <__swbuf_r+0x2e>
 8014d06:	e7d6      	b.n	8014cb6 <__swbuf_r+0x2a>

08014d08 <__swsetup_r>:
 8014d08:	b538      	push	{r3, r4, r5, lr}
 8014d0a:	4b29      	ldr	r3, [pc, #164]	@ (8014db0 <__swsetup_r+0xa8>)
 8014d0c:	4605      	mov	r5, r0
 8014d0e:	6818      	ldr	r0, [r3, #0]
 8014d10:	460c      	mov	r4, r1
 8014d12:	b118      	cbz	r0, 8014d1c <__swsetup_r+0x14>
 8014d14:	6a03      	ldr	r3, [r0, #32]
 8014d16:	b90b      	cbnz	r3, 8014d1c <__swsetup_r+0x14>
 8014d18:	f7fc fc3e 	bl	8011598 <__sinit>
 8014d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d20:	0719      	lsls	r1, r3, #28
 8014d22:	d422      	bmi.n	8014d6a <__swsetup_r+0x62>
 8014d24:	06da      	lsls	r2, r3, #27
 8014d26:	d407      	bmi.n	8014d38 <__swsetup_r+0x30>
 8014d28:	2209      	movs	r2, #9
 8014d2a:	602a      	str	r2, [r5, #0]
 8014d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d30:	81a3      	strh	r3, [r4, #12]
 8014d32:	f04f 30ff 	mov.w	r0, #4294967295
 8014d36:	e033      	b.n	8014da0 <__swsetup_r+0x98>
 8014d38:	0758      	lsls	r0, r3, #29
 8014d3a:	d512      	bpl.n	8014d62 <__swsetup_r+0x5a>
 8014d3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d3e:	b141      	cbz	r1, 8014d52 <__swsetup_r+0x4a>
 8014d40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d44:	4299      	cmp	r1, r3
 8014d46:	d002      	beq.n	8014d4e <__swsetup_r+0x46>
 8014d48:	4628      	mov	r0, r5
 8014d4a:	f7fd fc05 	bl	8012558 <_free_r>
 8014d4e:	2300      	movs	r3, #0
 8014d50:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d52:	89a3      	ldrh	r3, [r4, #12]
 8014d54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014d58:	81a3      	strh	r3, [r4, #12]
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	6063      	str	r3, [r4, #4]
 8014d5e:	6923      	ldr	r3, [r4, #16]
 8014d60:	6023      	str	r3, [r4, #0]
 8014d62:	89a3      	ldrh	r3, [r4, #12]
 8014d64:	f043 0308 	orr.w	r3, r3, #8
 8014d68:	81a3      	strh	r3, [r4, #12]
 8014d6a:	6923      	ldr	r3, [r4, #16]
 8014d6c:	b94b      	cbnz	r3, 8014d82 <__swsetup_r+0x7a>
 8014d6e:	89a3      	ldrh	r3, [r4, #12]
 8014d70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d78:	d003      	beq.n	8014d82 <__swsetup_r+0x7a>
 8014d7a:	4621      	mov	r1, r4
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	f000 f883 	bl	8014e88 <__smakebuf_r>
 8014d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d86:	f013 0201 	ands.w	r2, r3, #1
 8014d8a:	d00a      	beq.n	8014da2 <__swsetup_r+0x9a>
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	60a2      	str	r2, [r4, #8]
 8014d90:	6962      	ldr	r2, [r4, #20]
 8014d92:	4252      	negs	r2, r2
 8014d94:	61a2      	str	r2, [r4, #24]
 8014d96:	6922      	ldr	r2, [r4, #16]
 8014d98:	b942      	cbnz	r2, 8014dac <__swsetup_r+0xa4>
 8014d9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014d9e:	d1c5      	bne.n	8014d2c <__swsetup_r+0x24>
 8014da0:	bd38      	pop	{r3, r4, r5, pc}
 8014da2:	0799      	lsls	r1, r3, #30
 8014da4:	bf58      	it	pl
 8014da6:	6962      	ldrpl	r2, [r4, #20]
 8014da8:	60a2      	str	r2, [r4, #8]
 8014daa:	e7f4      	b.n	8014d96 <__swsetup_r+0x8e>
 8014dac:	2000      	movs	r0, #0
 8014dae:	e7f7      	b.n	8014da0 <__swsetup_r+0x98>
 8014db0:	200000a4 	.word	0x200000a4

08014db4 <_raise_r>:
 8014db4:	291f      	cmp	r1, #31
 8014db6:	b538      	push	{r3, r4, r5, lr}
 8014db8:	4605      	mov	r5, r0
 8014dba:	460c      	mov	r4, r1
 8014dbc:	d904      	bls.n	8014dc8 <_raise_r+0x14>
 8014dbe:	2316      	movs	r3, #22
 8014dc0:	6003      	str	r3, [r0, #0]
 8014dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8014dc6:	bd38      	pop	{r3, r4, r5, pc}
 8014dc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014dca:	b112      	cbz	r2, 8014dd2 <_raise_r+0x1e>
 8014dcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014dd0:	b94b      	cbnz	r3, 8014de6 <_raise_r+0x32>
 8014dd2:	4628      	mov	r0, r5
 8014dd4:	f000 f830 	bl	8014e38 <_getpid_r>
 8014dd8:	4622      	mov	r2, r4
 8014dda:	4601      	mov	r1, r0
 8014ddc:	4628      	mov	r0, r5
 8014dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014de2:	f000 b817 	b.w	8014e14 <_kill_r>
 8014de6:	2b01      	cmp	r3, #1
 8014de8:	d00a      	beq.n	8014e00 <_raise_r+0x4c>
 8014dea:	1c59      	adds	r1, r3, #1
 8014dec:	d103      	bne.n	8014df6 <_raise_r+0x42>
 8014dee:	2316      	movs	r3, #22
 8014df0:	6003      	str	r3, [r0, #0]
 8014df2:	2001      	movs	r0, #1
 8014df4:	e7e7      	b.n	8014dc6 <_raise_r+0x12>
 8014df6:	2100      	movs	r1, #0
 8014df8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	4798      	blx	r3
 8014e00:	2000      	movs	r0, #0
 8014e02:	e7e0      	b.n	8014dc6 <_raise_r+0x12>

08014e04 <raise>:
 8014e04:	4b02      	ldr	r3, [pc, #8]	@ (8014e10 <raise+0xc>)
 8014e06:	4601      	mov	r1, r0
 8014e08:	6818      	ldr	r0, [r3, #0]
 8014e0a:	f7ff bfd3 	b.w	8014db4 <_raise_r>
 8014e0e:	bf00      	nop
 8014e10:	200000a4 	.word	0x200000a4

08014e14 <_kill_r>:
 8014e14:	b538      	push	{r3, r4, r5, lr}
 8014e16:	4d07      	ldr	r5, [pc, #28]	@ (8014e34 <_kill_r+0x20>)
 8014e18:	2300      	movs	r3, #0
 8014e1a:	4604      	mov	r4, r0
 8014e1c:	4608      	mov	r0, r1
 8014e1e:	4611      	mov	r1, r2
 8014e20:	602b      	str	r3, [r5, #0]
 8014e22:	f7ec ff6f 	bl	8001d04 <_kill>
 8014e26:	1c43      	adds	r3, r0, #1
 8014e28:	d102      	bne.n	8014e30 <_kill_r+0x1c>
 8014e2a:	682b      	ldr	r3, [r5, #0]
 8014e2c:	b103      	cbz	r3, 8014e30 <_kill_r+0x1c>
 8014e2e:	6023      	str	r3, [r4, #0]
 8014e30:	bd38      	pop	{r3, r4, r5, pc}
 8014e32:	bf00      	nop
 8014e34:	200055a4 	.word	0x200055a4

08014e38 <_getpid_r>:
 8014e38:	f7ec bf5c 	b.w	8001cf4 <_getpid>

08014e3c <__swhatbuf_r>:
 8014e3c:	b570      	push	{r4, r5, r6, lr}
 8014e3e:	460c      	mov	r4, r1
 8014e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e44:	2900      	cmp	r1, #0
 8014e46:	b096      	sub	sp, #88	@ 0x58
 8014e48:	4615      	mov	r5, r2
 8014e4a:	461e      	mov	r6, r3
 8014e4c:	da0d      	bge.n	8014e6a <__swhatbuf_r+0x2e>
 8014e4e:	89a3      	ldrh	r3, [r4, #12]
 8014e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014e54:	f04f 0100 	mov.w	r1, #0
 8014e58:	bf14      	ite	ne
 8014e5a:	2340      	movne	r3, #64	@ 0x40
 8014e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014e60:	2000      	movs	r0, #0
 8014e62:	6031      	str	r1, [r6, #0]
 8014e64:	602b      	str	r3, [r5, #0]
 8014e66:	b016      	add	sp, #88	@ 0x58
 8014e68:	bd70      	pop	{r4, r5, r6, pc}
 8014e6a:	466a      	mov	r2, sp
 8014e6c:	f000 f848 	bl	8014f00 <_fstat_r>
 8014e70:	2800      	cmp	r0, #0
 8014e72:	dbec      	blt.n	8014e4e <__swhatbuf_r+0x12>
 8014e74:	9901      	ldr	r1, [sp, #4]
 8014e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014e7e:	4259      	negs	r1, r3
 8014e80:	4159      	adcs	r1, r3
 8014e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e86:	e7eb      	b.n	8014e60 <__swhatbuf_r+0x24>

08014e88 <__smakebuf_r>:
 8014e88:	898b      	ldrh	r3, [r1, #12]
 8014e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e8c:	079d      	lsls	r5, r3, #30
 8014e8e:	4606      	mov	r6, r0
 8014e90:	460c      	mov	r4, r1
 8014e92:	d507      	bpl.n	8014ea4 <__smakebuf_r+0x1c>
 8014e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014e98:	6023      	str	r3, [r4, #0]
 8014e9a:	6123      	str	r3, [r4, #16]
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	6163      	str	r3, [r4, #20]
 8014ea0:	b003      	add	sp, #12
 8014ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ea4:	ab01      	add	r3, sp, #4
 8014ea6:	466a      	mov	r2, sp
 8014ea8:	f7ff ffc8 	bl	8014e3c <__swhatbuf_r>
 8014eac:	9f00      	ldr	r7, [sp, #0]
 8014eae:	4605      	mov	r5, r0
 8014eb0:	4639      	mov	r1, r7
 8014eb2:	4630      	mov	r0, r6
 8014eb4:	f7fd fbc4 	bl	8012640 <_malloc_r>
 8014eb8:	b948      	cbnz	r0, 8014ece <__smakebuf_r+0x46>
 8014eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ebe:	059a      	lsls	r2, r3, #22
 8014ec0:	d4ee      	bmi.n	8014ea0 <__smakebuf_r+0x18>
 8014ec2:	f023 0303 	bic.w	r3, r3, #3
 8014ec6:	f043 0302 	orr.w	r3, r3, #2
 8014eca:	81a3      	strh	r3, [r4, #12]
 8014ecc:	e7e2      	b.n	8014e94 <__smakebuf_r+0xc>
 8014ece:	89a3      	ldrh	r3, [r4, #12]
 8014ed0:	6020      	str	r0, [r4, #0]
 8014ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014ed6:	81a3      	strh	r3, [r4, #12]
 8014ed8:	9b01      	ldr	r3, [sp, #4]
 8014eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014ede:	b15b      	cbz	r3, 8014ef8 <__smakebuf_r+0x70>
 8014ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	f000 f81d 	bl	8014f24 <_isatty_r>
 8014eea:	b128      	cbz	r0, 8014ef8 <__smakebuf_r+0x70>
 8014eec:	89a3      	ldrh	r3, [r4, #12]
 8014eee:	f023 0303 	bic.w	r3, r3, #3
 8014ef2:	f043 0301 	orr.w	r3, r3, #1
 8014ef6:	81a3      	strh	r3, [r4, #12]
 8014ef8:	89a3      	ldrh	r3, [r4, #12]
 8014efa:	431d      	orrs	r5, r3
 8014efc:	81a5      	strh	r5, [r4, #12]
 8014efe:	e7cf      	b.n	8014ea0 <__smakebuf_r+0x18>

08014f00 <_fstat_r>:
 8014f00:	b538      	push	{r3, r4, r5, lr}
 8014f02:	4d07      	ldr	r5, [pc, #28]	@ (8014f20 <_fstat_r+0x20>)
 8014f04:	2300      	movs	r3, #0
 8014f06:	4604      	mov	r4, r0
 8014f08:	4608      	mov	r0, r1
 8014f0a:	4611      	mov	r1, r2
 8014f0c:	602b      	str	r3, [r5, #0]
 8014f0e:	f7ec ff3d 	bl	8001d8c <_fstat>
 8014f12:	1c43      	adds	r3, r0, #1
 8014f14:	d102      	bne.n	8014f1c <_fstat_r+0x1c>
 8014f16:	682b      	ldr	r3, [r5, #0]
 8014f18:	b103      	cbz	r3, 8014f1c <_fstat_r+0x1c>
 8014f1a:	6023      	str	r3, [r4, #0]
 8014f1c:	bd38      	pop	{r3, r4, r5, pc}
 8014f1e:	bf00      	nop
 8014f20:	200055a4 	.word	0x200055a4

08014f24 <_isatty_r>:
 8014f24:	b538      	push	{r3, r4, r5, lr}
 8014f26:	4d06      	ldr	r5, [pc, #24]	@ (8014f40 <_isatty_r+0x1c>)
 8014f28:	2300      	movs	r3, #0
 8014f2a:	4604      	mov	r4, r0
 8014f2c:	4608      	mov	r0, r1
 8014f2e:	602b      	str	r3, [r5, #0]
 8014f30:	f7ec ff3c 	bl	8001dac <_isatty>
 8014f34:	1c43      	adds	r3, r0, #1
 8014f36:	d102      	bne.n	8014f3e <_isatty_r+0x1a>
 8014f38:	682b      	ldr	r3, [r5, #0]
 8014f3a:	b103      	cbz	r3, 8014f3e <_isatty_r+0x1a>
 8014f3c:	6023      	str	r3, [r4, #0]
 8014f3e:	bd38      	pop	{r3, r4, r5, pc}
 8014f40:	200055a4 	.word	0x200055a4

08014f44 <asin>:
 8014f44:	b538      	push	{r3, r4, r5, lr}
 8014f46:	ed2d 8b02 	vpush	{d8}
 8014f4a:	ec55 4b10 	vmov	r4, r5, d0
 8014f4e:	f000 f837 	bl	8014fc0 <__ieee754_asin>
 8014f52:	4622      	mov	r2, r4
 8014f54:	462b      	mov	r3, r5
 8014f56:	4620      	mov	r0, r4
 8014f58:	4629      	mov	r1, r5
 8014f5a:	eeb0 8a40 	vmov.f32	s16, s0
 8014f5e:	eef0 8a60 	vmov.f32	s17, s1
 8014f62:	f7eb fdeb 	bl	8000b3c <__aeabi_dcmpun>
 8014f66:	b9a8      	cbnz	r0, 8014f94 <asin+0x50>
 8014f68:	ec45 4b10 	vmov	d0, r4, r5
 8014f6c:	f000 f820 	bl	8014fb0 <fabs>
 8014f70:	4b0c      	ldr	r3, [pc, #48]	@ (8014fa4 <asin+0x60>)
 8014f72:	ec51 0b10 	vmov	r0, r1, d0
 8014f76:	2200      	movs	r2, #0
 8014f78:	f7eb fdd6 	bl	8000b28 <__aeabi_dcmpgt>
 8014f7c:	b150      	cbz	r0, 8014f94 <asin+0x50>
 8014f7e:	f7fc fc5d 	bl	801183c <__errno>
 8014f82:	ecbd 8b02 	vpop	{d8}
 8014f86:	2321      	movs	r3, #33	@ 0x21
 8014f88:	6003      	str	r3, [r0, #0]
 8014f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f8e:	4806      	ldr	r0, [pc, #24]	@ (8014fa8 <asin+0x64>)
 8014f90:	f7ff b95a 	b.w	8014248 <nan>
 8014f94:	eeb0 0a48 	vmov.f32	s0, s16
 8014f98:	eef0 0a68 	vmov.f32	s1, s17
 8014f9c:	ecbd 8b02 	vpop	{d8}
 8014fa0:	bd38      	pop	{r3, r4, r5, pc}
 8014fa2:	bf00      	nop
 8014fa4:	3ff00000 	.word	0x3ff00000
 8014fa8:	080173c5 	.word	0x080173c5

08014fac <atan2>:
 8014fac:	f000 ba0c 	b.w	80153c8 <__ieee754_atan2>

08014fb0 <fabs>:
 8014fb0:	ec51 0b10 	vmov	r0, r1, d0
 8014fb4:	4602      	mov	r2, r0
 8014fb6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014fba:	ec43 2b10 	vmov	d0, r2, r3
 8014fbe:	4770      	bx	lr

08014fc0 <__ieee754_asin>:
 8014fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fc4:	ec55 4b10 	vmov	r4, r5, d0
 8014fc8:	4bc7      	ldr	r3, [pc, #796]	@ (80152e8 <__ieee754_asin+0x328>)
 8014fca:	b087      	sub	sp, #28
 8014fcc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8014fd0:	429e      	cmp	r6, r3
 8014fd2:	9501      	str	r5, [sp, #4]
 8014fd4:	d92d      	bls.n	8015032 <__ieee754_asin+0x72>
 8014fd6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8014fda:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8014fde:	4326      	orrs	r6, r4
 8014fe0:	d116      	bne.n	8015010 <__ieee754_asin+0x50>
 8014fe2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8015280 <__ieee754_asin+0x2c0>)
 8014fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe8:	4620      	mov	r0, r4
 8014fea:	4629      	mov	r1, r5
 8014fec:	f7eb fb0c 	bl	8000608 <__aeabi_dmul>
 8014ff0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8015288 <__ieee754_asin+0x2c8>)
 8014ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff6:	4606      	mov	r6, r0
 8014ff8:	460f      	mov	r7, r1
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	4629      	mov	r1, r5
 8014ffe:	f7eb fb03 	bl	8000608 <__aeabi_dmul>
 8015002:	4602      	mov	r2, r0
 8015004:	460b      	mov	r3, r1
 8015006:	4630      	mov	r0, r6
 8015008:	4639      	mov	r1, r7
 801500a:	f7eb f947 	bl	800029c <__adddf3>
 801500e:	e009      	b.n	8015024 <__ieee754_asin+0x64>
 8015010:	4622      	mov	r2, r4
 8015012:	462b      	mov	r3, r5
 8015014:	4620      	mov	r0, r4
 8015016:	4629      	mov	r1, r5
 8015018:	f7eb f93e 	bl	8000298 <__aeabi_dsub>
 801501c:	4602      	mov	r2, r0
 801501e:	460b      	mov	r3, r1
 8015020:	f7eb fc1c 	bl	800085c <__aeabi_ddiv>
 8015024:	4604      	mov	r4, r0
 8015026:	460d      	mov	r5, r1
 8015028:	ec45 4b10 	vmov	d0, r4, r5
 801502c:	b007      	add	sp, #28
 801502e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015032:	4bae      	ldr	r3, [pc, #696]	@ (80152ec <__ieee754_asin+0x32c>)
 8015034:	429e      	cmp	r6, r3
 8015036:	d810      	bhi.n	801505a <__ieee754_asin+0x9a>
 8015038:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 801503c:	f080 80ad 	bcs.w	801519a <__ieee754_asin+0x1da>
 8015040:	a393      	add	r3, pc, #588	@ (adr r3, 8015290 <__ieee754_asin+0x2d0>)
 8015042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015046:	4620      	mov	r0, r4
 8015048:	4629      	mov	r1, r5
 801504a:	f7eb f927 	bl	800029c <__adddf3>
 801504e:	4ba8      	ldr	r3, [pc, #672]	@ (80152f0 <__ieee754_asin+0x330>)
 8015050:	2200      	movs	r2, #0
 8015052:	f7eb fd69 	bl	8000b28 <__aeabi_dcmpgt>
 8015056:	2800      	cmp	r0, #0
 8015058:	d1e6      	bne.n	8015028 <__ieee754_asin+0x68>
 801505a:	ec45 4b10 	vmov	d0, r4, r5
 801505e:	f7ff ffa7 	bl	8014fb0 <fabs>
 8015062:	49a3      	ldr	r1, [pc, #652]	@ (80152f0 <__ieee754_asin+0x330>)
 8015064:	ec53 2b10 	vmov	r2, r3, d0
 8015068:	2000      	movs	r0, #0
 801506a:	f7eb f915 	bl	8000298 <__aeabi_dsub>
 801506e:	4ba1      	ldr	r3, [pc, #644]	@ (80152f4 <__ieee754_asin+0x334>)
 8015070:	2200      	movs	r2, #0
 8015072:	f7eb fac9 	bl	8000608 <__aeabi_dmul>
 8015076:	a388      	add	r3, pc, #544	@ (adr r3, 8015298 <__ieee754_asin+0x2d8>)
 8015078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801507c:	4604      	mov	r4, r0
 801507e:	460d      	mov	r5, r1
 8015080:	f7eb fac2 	bl	8000608 <__aeabi_dmul>
 8015084:	a386      	add	r3, pc, #536	@ (adr r3, 80152a0 <__ieee754_asin+0x2e0>)
 8015086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801508a:	f7eb f907 	bl	800029c <__adddf3>
 801508e:	4622      	mov	r2, r4
 8015090:	462b      	mov	r3, r5
 8015092:	f7eb fab9 	bl	8000608 <__aeabi_dmul>
 8015096:	a384      	add	r3, pc, #528	@ (adr r3, 80152a8 <__ieee754_asin+0x2e8>)
 8015098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801509c:	f7eb f8fc 	bl	8000298 <__aeabi_dsub>
 80150a0:	4622      	mov	r2, r4
 80150a2:	462b      	mov	r3, r5
 80150a4:	f7eb fab0 	bl	8000608 <__aeabi_dmul>
 80150a8:	a381      	add	r3, pc, #516	@ (adr r3, 80152b0 <__ieee754_asin+0x2f0>)
 80150aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ae:	f7eb f8f5 	bl	800029c <__adddf3>
 80150b2:	4622      	mov	r2, r4
 80150b4:	462b      	mov	r3, r5
 80150b6:	f7eb faa7 	bl	8000608 <__aeabi_dmul>
 80150ba:	a37f      	add	r3, pc, #508	@ (adr r3, 80152b8 <__ieee754_asin+0x2f8>)
 80150bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c0:	f7eb f8ea 	bl	8000298 <__aeabi_dsub>
 80150c4:	4622      	mov	r2, r4
 80150c6:	462b      	mov	r3, r5
 80150c8:	f7eb fa9e 	bl	8000608 <__aeabi_dmul>
 80150cc:	a37c      	add	r3, pc, #496	@ (adr r3, 80152c0 <__ieee754_asin+0x300>)
 80150ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d2:	f7eb f8e3 	bl	800029c <__adddf3>
 80150d6:	4622      	mov	r2, r4
 80150d8:	462b      	mov	r3, r5
 80150da:	f7eb fa95 	bl	8000608 <__aeabi_dmul>
 80150de:	a37a      	add	r3, pc, #488	@ (adr r3, 80152c8 <__ieee754_asin+0x308>)
 80150e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150e8:	4620      	mov	r0, r4
 80150ea:	4629      	mov	r1, r5
 80150ec:	f7eb fa8c 	bl	8000608 <__aeabi_dmul>
 80150f0:	a377      	add	r3, pc, #476	@ (adr r3, 80152d0 <__ieee754_asin+0x310>)
 80150f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150f6:	f7eb f8cf 	bl	8000298 <__aeabi_dsub>
 80150fa:	4622      	mov	r2, r4
 80150fc:	462b      	mov	r3, r5
 80150fe:	f7eb fa83 	bl	8000608 <__aeabi_dmul>
 8015102:	a375      	add	r3, pc, #468	@ (adr r3, 80152d8 <__ieee754_asin+0x318>)
 8015104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015108:	f7eb f8c8 	bl	800029c <__adddf3>
 801510c:	4622      	mov	r2, r4
 801510e:	462b      	mov	r3, r5
 8015110:	f7eb fa7a 	bl	8000608 <__aeabi_dmul>
 8015114:	a372      	add	r3, pc, #456	@ (adr r3, 80152e0 <__ieee754_asin+0x320>)
 8015116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801511a:	f7eb f8bd 	bl	8000298 <__aeabi_dsub>
 801511e:	4622      	mov	r2, r4
 8015120:	462b      	mov	r3, r5
 8015122:	f7eb fa71 	bl	8000608 <__aeabi_dmul>
 8015126:	4b72      	ldr	r3, [pc, #456]	@ (80152f0 <__ieee754_asin+0x330>)
 8015128:	2200      	movs	r2, #0
 801512a:	f7eb f8b7 	bl	800029c <__adddf3>
 801512e:	ec45 4b10 	vmov	d0, r4, r5
 8015132:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015136:	f000 fba7 	bl	8015888 <__ieee754_sqrt>
 801513a:	4b6f      	ldr	r3, [pc, #444]	@ (80152f8 <__ieee754_asin+0x338>)
 801513c:	429e      	cmp	r6, r3
 801513e:	ec5b ab10 	vmov	sl, fp, d0
 8015142:	f240 80db 	bls.w	80152fc <__ieee754_asin+0x33c>
 8015146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801514a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801514e:	f7eb fb85 	bl	800085c <__aeabi_ddiv>
 8015152:	4652      	mov	r2, sl
 8015154:	465b      	mov	r3, fp
 8015156:	f7eb fa57 	bl	8000608 <__aeabi_dmul>
 801515a:	4652      	mov	r2, sl
 801515c:	465b      	mov	r3, fp
 801515e:	f7eb f89d 	bl	800029c <__adddf3>
 8015162:	4602      	mov	r2, r0
 8015164:	460b      	mov	r3, r1
 8015166:	f7eb f899 	bl	800029c <__adddf3>
 801516a:	a347      	add	r3, pc, #284	@ (adr r3, 8015288 <__ieee754_asin+0x2c8>)
 801516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015170:	f7eb f892 	bl	8000298 <__aeabi_dsub>
 8015174:	4602      	mov	r2, r0
 8015176:	460b      	mov	r3, r1
 8015178:	a141      	add	r1, pc, #260	@ (adr r1, 8015280 <__ieee754_asin+0x2c0>)
 801517a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801517e:	f7eb f88b 	bl	8000298 <__aeabi_dsub>
 8015182:	9b01      	ldr	r3, [sp, #4]
 8015184:	2b00      	cmp	r3, #0
 8015186:	bfdc      	itt	le
 8015188:	4602      	movle	r2, r0
 801518a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 801518e:	4604      	mov	r4, r0
 8015190:	460d      	mov	r5, r1
 8015192:	bfdc      	itt	le
 8015194:	4614      	movle	r4, r2
 8015196:	461d      	movle	r5, r3
 8015198:	e746      	b.n	8015028 <__ieee754_asin+0x68>
 801519a:	4622      	mov	r2, r4
 801519c:	462b      	mov	r3, r5
 801519e:	4620      	mov	r0, r4
 80151a0:	4629      	mov	r1, r5
 80151a2:	f7eb fa31 	bl	8000608 <__aeabi_dmul>
 80151a6:	a33c      	add	r3, pc, #240	@ (adr r3, 8015298 <__ieee754_asin+0x2d8>)
 80151a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ac:	4606      	mov	r6, r0
 80151ae:	460f      	mov	r7, r1
 80151b0:	f7eb fa2a 	bl	8000608 <__aeabi_dmul>
 80151b4:	a33a      	add	r3, pc, #232	@ (adr r3, 80152a0 <__ieee754_asin+0x2e0>)
 80151b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ba:	f7eb f86f 	bl	800029c <__adddf3>
 80151be:	4632      	mov	r2, r6
 80151c0:	463b      	mov	r3, r7
 80151c2:	f7eb fa21 	bl	8000608 <__aeabi_dmul>
 80151c6:	a338      	add	r3, pc, #224	@ (adr r3, 80152a8 <__ieee754_asin+0x2e8>)
 80151c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151cc:	f7eb f864 	bl	8000298 <__aeabi_dsub>
 80151d0:	4632      	mov	r2, r6
 80151d2:	463b      	mov	r3, r7
 80151d4:	f7eb fa18 	bl	8000608 <__aeabi_dmul>
 80151d8:	a335      	add	r3, pc, #212	@ (adr r3, 80152b0 <__ieee754_asin+0x2f0>)
 80151da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151de:	f7eb f85d 	bl	800029c <__adddf3>
 80151e2:	4632      	mov	r2, r6
 80151e4:	463b      	mov	r3, r7
 80151e6:	f7eb fa0f 	bl	8000608 <__aeabi_dmul>
 80151ea:	a333      	add	r3, pc, #204	@ (adr r3, 80152b8 <__ieee754_asin+0x2f8>)
 80151ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f0:	f7eb f852 	bl	8000298 <__aeabi_dsub>
 80151f4:	4632      	mov	r2, r6
 80151f6:	463b      	mov	r3, r7
 80151f8:	f7eb fa06 	bl	8000608 <__aeabi_dmul>
 80151fc:	a330      	add	r3, pc, #192	@ (adr r3, 80152c0 <__ieee754_asin+0x300>)
 80151fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015202:	f7eb f84b 	bl	800029c <__adddf3>
 8015206:	4632      	mov	r2, r6
 8015208:	463b      	mov	r3, r7
 801520a:	f7eb f9fd 	bl	8000608 <__aeabi_dmul>
 801520e:	a32e      	add	r3, pc, #184	@ (adr r3, 80152c8 <__ieee754_asin+0x308>)
 8015210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015214:	4680      	mov	r8, r0
 8015216:	4689      	mov	r9, r1
 8015218:	4630      	mov	r0, r6
 801521a:	4639      	mov	r1, r7
 801521c:	f7eb f9f4 	bl	8000608 <__aeabi_dmul>
 8015220:	a32b      	add	r3, pc, #172	@ (adr r3, 80152d0 <__ieee754_asin+0x310>)
 8015222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015226:	f7eb f837 	bl	8000298 <__aeabi_dsub>
 801522a:	4632      	mov	r2, r6
 801522c:	463b      	mov	r3, r7
 801522e:	f7eb f9eb 	bl	8000608 <__aeabi_dmul>
 8015232:	a329      	add	r3, pc, #164	@ (adr r3, 80152d8 <__ieee754_asin+0x318>)
 8015234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015238:	f7eb f830 	bl	800029c <__adddf3>
 801523c:	4632      	mov	r2, r6
 801523e:	463b      	mov	r3, r7
 8015240:	f7eb f9e2 	bl	8000608 <__aeabi_dmul>
 8015244:	a326      	add	r3, pc, #152	@ (adr r3, 80152e0 <__ieee754_asin+0x320>)
 8015246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801524a:	f7eb f825 	bl	8000298 <__aeabi_dsub>
 801524e:	4632      	mov	r2, r6
 8015250:	463b      	mov	r3, r7
 8015252:	f7eb f9d9 	bl	8000608 <__aeabi_dmul>
 8015256:	4b26      	ldr	r3, [pc, #152]	@ (80152f0 <__ieee754_asin+0x330>)
 8015258:	2200      	movs	r2, #0
 801525a:	f7eb f81f 	bl	800029c <__adddf3>
 801525e:	4602      	mov	r2, r0
 8015260:	460b      	mov	r3, r1
 8015262:	4640      	mov	r0, r8
 8015264:	4649      	mov	r1, r9
 8015266:	f7eb faf9 	bl	800085c <__aeabi_ddiv>
 801526a:	4622      	mov	r2, r4
 801526c:	462b      	mov	r3, r5
 801526e:	f7eb f9cb 	bl	8000608 <__aeabi_dmul>
 8015272:	4602      	mov	r2, r0
 8015274:	460b      	mov	r3, r1
 8015276:	4620      	mov	r0, r4
 8015278:	4629      	mov	r1, r5
 801527a:	e6c6      	b.n	801500a <__ieee754_asin+0x4a>
 801527c:	f3af 8000 	nop.w
 8015280:	54442d18 	.word	0x54442d18
 8015284:	3ff921fb 	.word	0x3ff921fb
 8015288:	33145c07 	.word	0x33145c07
 801528c:	3c91a626 	.word	0x3c91a626
 8015290:	8800759c 	.word	0x8800759c
 8015294:	7e37e43c 	.word	0x7e37e43c
 8015298:	0dfdf709 	.word	0x0dfdf709
 801529c:	3f023de1 	.word	0x3f023de1
 80152a0:	7501b288 	.word	0x7501b288
 80152a4:	3f49efe0 	.word	0x3f49efe0
 80152a8:	b5688f3b 	.word	0xb5688f3b
 80152ac:	3fa48228 	.word	0x3fa48228
 80152b0:	0e884455 	.word	0x0e884455
 80152b4:	3fc9c155 	.word	0x3fc9c155
 80152b8:	03eb6f7d 	.word	0x03eb6f7d
 80152bc:	3fd4d612 	.word	0x3fd4d612
 80152c0:	55555555 	.word	0x55555555
 80152c4:	3fc55555 	.word	0x3fc55555
 80152c8:	b12e9282 	.word	0xb12e9282
 80152cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80152d0:	1b8d0159 	.word	0x1b8d0159
 80152d4:	3fe6066c 	.word	0x3fe6066c
 80152d8:	9c598ac8 	.word	0x9c598ac8
 80152dc:	40002ae5 	.word	0x40002ae5
 80152e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80152e4:	40033a27 	.word	0x40033a27
 80152e8:	3fefffff 	.word	0x3fefffff
 80152ec:	3fdfffff 	.word	0x3fdfffff
 80152f0:	3ff00000 	.word	0x3ff00000
 80152f4:	3fe00000 	.word	0x3fe00000
 80152f8:	3fef3332 	.word	0x3fef3332
 80152fc:	4652      	mov	r2, sl
 80152fe:	465b      	mov	r3, fp
 8015300:	4650      	mov	r0, sl
 8015302:	4659      	mov	r1, fp
 8015304:	f7ea ffca 	bl	800029c <__adddf3>
 8015308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801530c:	4606      	mov	r6, r0
 801530e:	460f      	mov	r7, r1
 8015310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015314:	f7eb faa2 	bl	800085c <__aeabi_ddiv>
 8015318:	4602      	mov	r2, r0
 801531a:	460b      	mov	r3, r1
 801531c:	4630      	mov	r0, r6
 801531e:	4639      	mov	r1, r7
 8015320:	f7eb f972 	bl	8000608 <__aeabi_dmul>
 8015324:	f04f 0800 	mov.w	r8, #0
 8015328:	4606      	mov	r6, r0
 801532a:	460f      	mov	r7, r1
 801532c:	4642      	mov	r2, r8
 801532e:	465b      	mov	r3, fp
 8015330:	4640      	mov	r0, r8
 8015332:	4659      	mov	r1, fp
 8015334:	f7eb f968 	bl	8000608 <__aeabi_dmul>
 8015338:	4602      	mov	r2, r0
 801533a:	460b      	mov	r3, r1
 801533c:	4620      	mov	r0, r4
 801533e:	4629      	mov	r1, r5
 8015340:	f7ea ffaa 	bl	8000298 <__aeabi_dsub>
 8015344:	4642      	mov	r2, r8
 8015346:	4604      	mov	r4, r0
 8015348:	460d      	mov	r5, r1
 801534a:	465b      	mov	r3, fp
 801534c:	4650      	mov	r0, sl
 801534e:	4659      	mov	r1, fp
 8015350:	f7ea ffa4 	bl	800029c <__adddf3>
 8015354:	4602      	mov	r2, r0
 8015356:	460b      	mov	r3, r1
 8015358:	4620      	mov	r0, r4
 801535a:	4629      	mov	r1, r5
 801535c:	f7eb fa7e 	bl	800085c <__aeabi_ddiv>
 8015360:	4602      	mov	r2, r0
 8015362:	460b      	mov	r3, r1
 8015364:	f7ea ff9a 	bl	800029c <__adddf3>
 8015368:	4602      	mov	r2, r0
 801536a:	460b      	mov	r3, r1
 801536c:	a112      	add	r1, pc, #72	@ (adr r1, 80153b8 <__ieee754_asin+0x3f8>)
 801536e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015372:	f7ea ff91 	bl	8000298 <__aeabi_dsub>
 8015376:	4602      	mov	r2, r0
 8015378:	460b      	mov	r3, r1
 801537a:	4630      	mov	r0, r6
 801537c:	4639      	mov	r1, r7
 801537e:	f7ea ff8b 	bl	8000298 <__aeabi_dsub>
 8015382:	4642      	mov	r2, r8
 8015384:	4604      	mov	r4, r0
 8015386:	460d      	mov	r5, r1
 8015388:	465b      	mov	r3, fp
 801538a:	4640      	mov	r0, r8
 801538c:	4659      	mov	r1, fp
 801538e:	f7ea ff85 	bl	800029c <__adddf3>
 8015392:	4602      	mov	r2, r0
 8015394:	460b      	mov	r3, r1
 8015396:	a10a      	add	r1, pc, #40	@ (adr r1, 80153c0 <__ieee754_asin+0x400>)
 8015398:	e9d1 0100 	ldrd	r0, r1, [r1]
 801539c:	f7ea ff7c 	bl	8000298 <__aeabi_dsub>
 80153a0:	4602      	mov	r2, r0
 80153a2:	460b      	mov	r3, r1
 80153a4:	4620      	mov	r0, r4
 80153a6:	4629      	mov	r1, r5
 80153a8:	f7ea ff76 	bl	8000298 <__aeabi_dsub>
 80153ac:	4602      	mov	r2, r0
 80153ae:	460b      	mov	r3, r1
 80153b0:	a103      	add	r1, pc, #12	@ (adr r1, 80153c0 <__ieee754_asin+0x400>)
 80153b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80153b6:	e6e2      	b.n	801517e <__ieee754_asin+0x1be>
 80153b8:	33145c07 	.word	0x33145c07
 80153bc:	3c91a626 	.word	0x3c91a626
 80153c0:	54442d18 	.word	0x54442d18
 80153c4:	3fe921fb 	.word	0x3fe921fb

080153c8 <__ieee754_atan2>:
 80153c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153cc:	ec57 6b11 	vmov	r6, r7, d1
 80153d0:	4273      	negs	r3, r6
 80153d2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8015550 <__ieee754_atan2+0x188>
 80153d6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80153da:	4333      	orrs	r3, r6
 80153dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80153e0:	4543      	cmp	r3, r8
 80153e2:	ec51 0b10 	vmov	r0, r1, d0
 80153e6:	4635      	mov	r5, r6
 80153e8:	d809      	bhi.n	80153fe <__ieee754_atan2+0x36>
 80153ea:	4244      	negs	r4, r0
 80153ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80153f0:	4304      	orrs	r4, r0
 80153f2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80153f6:	4544      	cmp	r4, r8
 80153f8:	468e      	mov	lr, r1
 80153fa:	4681      	mov	r9, r0
 80153fc:	d907      	bls.n	801540e <__ieee754_atan2+0x46>
 80153fe:	4632      	mov	r2, r6
 8015400:	463b      	mov	r3, r7
 8015402:	f7ea ff4b 	bl	800029c <__adddf3>
 8015406:	ec41 0b10 	vmov	d0, r0, r1
 801540a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801540e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8015412:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8015416:	4334      	orrs	r4, r6
 8015418:	d103      	bne.n	8015422 <__ieee754_atan2+0x5a>
 801541a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801541e:	f000 b89b 	b.w	8015558 <atan>
 8015422:	17bc      	asrs	r4, r7, #30
 8015424:	f004 0402 	and.w	r4, r4, #2
 8015428:	ea53 0909 	orrs.w	r9, r3, r9
 801542c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015430:	d107      	bne.n	8015442 <__ieee754_atan2+0x7a>
 8015432:	2c02      	cmp	r4, #2
 8015434:	d05f      	beq.n	80154f6 <__ieee754_atan2+0x12e>
 8015436:	2c03      	cmp	r4, #3
 8015438:	d1e5      	bne.n	8015406 <__ieee754_atan2+0x3e>
 801543a:	a141      	add	r1, pc, #260	@ (adr r1, 8015540 <__ieee754_atan2+0x178>)
 801543c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015440:	e7e1      	b.n	8015406 <__ieee754_atan2+0x3e>
 8015442:	4315      	orrs	r5, r2
 8015444:	d106      	bne.n	8015454 <__ieee754_atan2+0x8c>
 8015446:	f1be 0f00 	cmp.w	lr, #0
 801544a:	da5f      	bge.n	801550c <__ieee754_atan2+0x144>
 801544c:	a13e      	add	r1, pc, #248	@ (adr r1, 8015548 <__ieee754_atan2+0x180>)
 801544e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015452:	e7d8      	b.n	8015406 <__ieee754_atan2+0x3e>
 8015454:	4542      	cmp	r2, r8
 8015456:	d10f      	bne.n	8015478 <__ieee754_atan2+0xb0>
 8015458:	4293      	cmp	r3, r2
 801545a:	f104 34ff 	add.w	r4, r4, #4294967295
 801545e:	d107      	bne.n	8015470 <__ieee754_atan2+0xa8>
 8015460:	2c02      	cmp	r4, #2
 8015462:	d84c      	bhi.n	80154fe <__ieee754_atan2+0x136>
 8015464:	4b34      	ldr	r3, [pc, #208]	@ (8015538 <__ieee754_atan2+0x170>)
 8015466:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801546a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801546e:	e7ca      	b.n	8015406 <__ieee754_atan2+0x3e>
 8015470:	2c02      	cmp	r4, #2
 8015472:	d848      	bhi.n	8015506 <__ieee754_atan2+0x13e>
 8015474:	4b31      	ldr	r3, [pc, #196]	@ (801553c <__ieee754_atan2+0x174>)
 8015476:	e7f6      	b.n	8015466 <__ieee754_atan2+0x9e>
 8015478:	4543      	cmp	r3, r8
 801547a:	d0e4      	beq.n	8015446 <__ieee754_atan2+0x7e>
 801547c:	1a9b      	subs	r3, r3, r2
 801547e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8015482:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015486:	da1e      	bge.n	80154c6 <__ieee754_atan2+0xfe>
 8015488:	2f00      	cmp	r7, #0
 801548a:	da01      	bge.n	8015490 <__ieee754_atan2+0xc8>
 801548c:	323c      	adds	r2, #60	@ 0x3c
 801548e:	db1e      	blt.n	80154ce <__ieee754_atan2+0x106>
 8015490:	4632      	mov	r2, r6
 8015492:	463b      	mov	r3, r7
 8015494:	f7eb f9e2 	bl	800085c <__aeabi_ddiv>
 8015498:	ec41 0b10 	vmov	d0, r0, r1
 801549c:	f7ff fd88 	bl	8014fb0 <fabs>
 80154a0:	f000 f85a 	bl	8015558 <atan>
 80154a4:	ec51 0b10 	vmov	r0, r1, d0
 80154a8:	2c01      	cmp	r4, #1
 80154aa:	d013      	beq.n	80154d4 <__ieee754_atan2+0x10c>
 80154ac:	2c02      	cmp	r4, #2
 80154ae:	d015      	beq.n	80154dc <__ieee754_atan2+0x114>
 80154b0:	2c00      	cmp	r4, #0
 80154b2:	d0a8      	beq.n	8015406 <__ieee754_atan2+0x3e>
 80154b4:	a318      	add	r3, pc, #96	@ (adr r3, 8015518 <__ieee754_atan2+0x150>)
 80154b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ba:	f7ea feed 	bl	8000298 <__aeabi_dsub>
 80154be:	a318      	add	r3, pc, #96	@ (adr r3, 8015520 <__ieee754_atan2+0x158>)
 80154c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c4:	e014      	b.n	80154f0 <__ieee754_atan2+0x128>
 80154c6:	a118      	add	r1, pc, #96	@ (adr r1, 8015528 <__ieee754_atan2+0x160>)
 80154c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154cc:	e7ec      	b.n	80154a8 <__ieee754_atan2+0xe0>
 80154ce:	2000      	movs	r0, #0
 80154d0:	2100      	movs	r1, #0
 80154d2:	e7e9      	b.n	80154a8 <__ieee754_atan2+0xe0>
 80154d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80154d8:	4619      	mov	r1, r3
 80154da:	e794      	b.n	8015406 <__ieee754_atan2+0x3e>
 80154dc:	a30e      	add	r3, pc, #56	@ (adr r3, 8015518 <__ieee754_atan2+0x150>)
 80154de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154e2:	f7ea fed9 	bl	8000298 <__aeabi_dsub>
 80154e6:	4602      	mov	r2, r0
 80154e8:	460b      	mov	r3, r1
 80154ea:	a10d      	add	r1, pc, #52	@ (adr r1, 8015520 <__ieee754_atan2+0x158>)
 80154ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154f0:	f7ea fed2 	bl	8000298 <__aeabi_dsub>
 80154f4:	e787      	b.n	8015406 <__ieee754_atan2+0x3e>
 80154f6:	a10a      	add	r1, pc, #40	@ (adr r1, 8015520 <__ieee754_atan2+0x158>)
 80154f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154fc:	e783      	b.n	8015406 <__ieee754_atan2+0x3e>
 80154fe:	a10c      	add	r1, pc, #48	@ (adr r1, 8015530 <__ieee754_atan2+0x168>)
 8015500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015504:	e77f      	b.n	8015406 <__ieee754_atan2+0x3e>
 8015506:	2000      	movs	r0, #0
 8015508:	2100      	movs	r1, #0
 801550a:	e77c      	b.n	8015406 <__ieee754_atan2+0x3e>
 801550c:	a106      	add	r1, pc, #24	@ (adr r1, 8015528 <__ieee754_atan2+0x160>)
 801550e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015512:	e778      	b.n	8015406 <__ieee754_atan2+0x3e>
 8015514:	f3af 8000 	nop.w
 8015518:	33145c07 	.word	0x33145c07
 801551c:	3ca1a626 	.word	0x3ca1a626
 8015520:	54442d18 	.word	0x54442d18
 8015524:	400921fb 	.word	0x400921fb
 8015528:	54442d18 	.word	0x54442d18
 801552c:	3ff921fb 	.word	0x3ff921fb
 8015530:	54442d18 	.word	0x54442d18
 8015534:	3fe921fb 	.word	0x3fe921fb
 8015538:	08017440 	.word	0x08017440
 801553c:	08017428 	.word	0x08017428
 8015540:	54442d18 	.word	0x54442d18
 8015544:	c00921fb 	.word	0xc00921fb
 8015548:	54442d18 	.word	0x54442d18
 801554c:	bff921fb 	.word	0xbff921fb
 8015550:	7ff00000 	.word	0x7ff00000
 8015554:	00000000 	.word	0x00000000

08015558 <atan>:
 8015558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801555c:	ec55 4b10 	vmov	r4, r5, d0
 8015560:	4bbf      	ldr	r3, [pc, #764]	@ (8015860 <atan+0x308>)
 8015562:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8015566:	429e      	cmp	r6, r3
 8015568:	46ab      	mov	fp, r5
 801556a:	d918      	bls.n	801559e <atan+0x46>
 801556c:	4bbd      	ldr	r3, [pc, #756]	@ (8015864 <atan+0x30c>)
 801556e:	429e      	cmp	r6, r3
 8015570:	d801      	bhi.n	8015576 <atan+0x1e>
 8015572:	d109      	bne.n	8015588 <atan+0x30>
 8015574:	b144      	cbz	r4, 8015588 <atan+0x30>
 8015576:	4622      	mov	r2, r4
 8015578:	462b      	mov	r3, r5
 801557a:	4620      	mov	r0, r4
 801557c:	4629      	mov	r1, r5
 801557e:	f7ea fe8d 	bl	800029c <__adddf3>
 8015582:	4604      	mov	r4, r0
 8015584:	460d      	mov	r5, r1
 8015586:	e006      	b.n	8015596 <atan+0x3e>
 8015588:	f1bb 0f00 	cmp.w	fp, #0
 801558c:	f340 812b 	ble.w	80157e6 <atan+0x28e>
 8015590:	a597      	add	r5, pc, #604	@ (adr r5, 80157f0 <atan+0x298>)
 8015592:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015596:	ec45 4b10 	vmov	d0, r4, r5
 801559a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801559e:	4bb2      	ldr	r3, [pc, #712]	@ (8015868 <atan+0x310>)
 80155a0:	429e      	cmp	r6, r3
 80155a2:	d813      	bhi.n	80155cc <atan+0x74>
 80155a4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80155a8:	429e      	cmp	r6, r3
 80155aa:	d80c      	bhi.n	80155c6 <atan+0x6e>
 80155ac:	a392      	add	r3, pc, #584	@ (adr r3, 80157f8 <atan+0x2a0>)
 80155ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b2:	4620      	mov	r0, r4
 80155b4:	4629      	mov	r1, r5
 80155b6:	f7ea fe71 	bl	800029c <__adddf3>
 80155ba:	4bac      	ldr	r3, [pc, #688]	@ (801586c <atan+0x314>)
 80155bc:	2200      	movs	r2, #0
 80155be:	f7eb fab3 	bl	8000b28 <__aeabi_dcmpgt>
 80155c2:	2800      	cmp	r0, #0
 80155c4:	d1e7      	bne.n	8015596 <atan+0x3e>
 80155c6:	f04f 3aff 	mov.w	sl, #4294967295
 80155ca:	e029      	b.n	8015620 <atan+0xc8>
 80155cc:	f7ff fcf0 	bl	8014fb0 <fabs>
 80155d0:	4ba7      	ldr	r3, [pc, #668]	@ (8015870 <atan+0x318>)
 80155d2:	429e      	cmp	r6, r3
 80155d4:	ec55 4b10 	vmov	r4, r5, d0
 80155d8:	f200 80bc 	bhi.w	8015754 <atan+0x1fc>
 80155dc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80155e0:	429e      	cmp	r6, r3
 80155e2:	f200 809e 	bhi.w	8015722 <atan+0x1ca>
 80155e6:	4622      	mov	r2, r4
 80155e8:	462b      	mov	r3, r5
 80155ea:	4620      	mov	r0, r4
 80155ec:	4629      	mov	r1, r5
 80155ee:	f7ea fe55 	bl	800029c <__adddf3>
 80155f2:	4b9e      	ldr	r3, [pc, #632]	@ (801586c <atan+0x314>)
 80155f4:	2200      	movs	r2, #0
 80155f6:	f7ea fe4f 	bl	8000298 <__aeabi_dsub>
 80155fa:	2200      	movs	r2, #0
 80155fc:	4606      	mov	r6, r0
 80155fe:	460f      	mov	r7, r1
 8015600:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015604:	4620      	mov	r0, r4
 8015606:	4629      	mov	r1, r5
 8015608:	f7ea fe48 	bl	800029c <__adddf3>
 801560c:	4602      	mov	r2, r0
 801560e:	460b      	mov	r3, r1
 8015610:	4630      	mov	r0, r6
 8015612:	4639      	mov	r1, r7
 8015614:	f7eb f922 	bl	800085c <__aeabi_ddiv>
 8015618:	f04f 0a00 	mov.w	sl, #0
 801561c:	4604      	mov	r4, r0
 801561e:	460d      	mov	r5, r1
 8015620:	4622      	mov	r2, r4
 8015622:	462b      	mov	r3, r5
 8015624:	4620      	mov	r0, r4
 8015626:	4629      	mov	r1, r5
 8015628:	f7ea ffee 	bl	8000608 <__aeabi_dmul>
 801562c:	4602      	mov	r2, r0
 801562e:	460b      	mov	r3, r1
 8015630:	4680      	mov	r8, r0
 8015632:	4689      	mov	r9, r1
 8015634:	f7ea ffe8 	bl	8000608 <__aeabi_dmul>
 8015638:	a371      	add	r3, pc, #452	@ (adr r3, 8015800 <atan+0x2a8>)
 801563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801563e:	4606      	mov	r6, r0
 8015640:	460f      	mov	r7, r1
 8015642:	f7ea ffe1 	bl	8000608 <__aeabi_dmul>
 8015646:	a370      	add	r3, pc, #448	@ (adr r3, 8015808 <atan+0x2b0>)
 8015648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801564c:	f7ea fe26 	bl	800029c <__adddf3>
 8015650:	4632      	mov	r2, r6
 8015652:	463b      	mov	r3, r7
 8015654:	f7ea ffd8 	bl	8000608 <__aeabi_dmul>
 8015658:	a36d      	add	r3, pc, #436	@ (adr r3, 8015810 <atan+0x2b8>)
 801565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801565e:	f7ea fe1d 	bl	800029c <__adddf3>
 8015662:	4632      	mov	r2, r6
 8015664:	463b      	mov	r3, r7
 8015666:	f7ea ffcf 	bl	8000608 <__aeabi_dmul>
 801566a:	a36b      	add	r3, pc, #428	@ (adr r3, 8015818 <atan+0x2c0>)
 801566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015670:	f7ea fe14 	bl	800029c <__adddf3>
 8015674:	4632      	mov	r2, r6
 8015676:	463b      	mov	r3, r7
 8015678:	f7ea ffc6 	bl	8000608 <__aeabi_dmul>
 801567c:	a368      	add	r3, pc, #416	@ (adr r3, 8015820 <atan+0x2c8>)
 801567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015682:	f7ea fe0b 	bl	800029c <__adddf3>
 8015686:	4632      	mov	r2, r6
 8015688:	463b      	mov	r3, r7
 801568a:	f7ea ffbd 	bl	8000608 <__aeabi_dmul>
 801568e:	a366      	add	r3, pc, #408	@ (adr r3, 8015828 <atan+0x2d0>)
 8015690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015694:	f7ea fe02 	bl	800029c <__adddf3>
 8015698:	4642      	mov	r2, r8
 801569a:	464b      	mov	r3, r9
 801569c:	f7ea ffb4 	bl	8000608 <__aeabi_dmul>
 80156a0:	a363      	add	r3, pc, #396	@ (adr r3, 8015830 <atan+0x2d8>)
 80156a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156a6:	4680      	mov	r8, r0
 80156a8:	4689      	mov	r9, r1
 80156aa:	4630      	mov	r0, r6
 80156ac:	4639      	mov	r1, r7
 80156ae:	f7ea ffab 	bl	8000608 <__aeabi_dmul>
 80156b2:	a361      	add	r3, pc, #388	@ (adr r3, 8015838 <atan+0x2e0>)
 80156b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b8:	f7ea fdee 	bl	8000298 <__aeabi_dsub>
 80156bc:	4632      	mov	r2, r6
 80156be:	463b      	mov	r3, r7
 80156c0:	f7ea ffa2 	bl	8000608 <__aeabi_dmul>
 80156c4:	a35e      	add	r3, pc, #376	@ (adr r3, 8015840 <atan+0x2e8>)
 80156c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ca:	f7ea fde5 	bl	8000298 <__aeabi_dsub>
 80156ce:	4632      	mov	r2, r6
 80156d0:	463b      	mov	r3, r7
 80156d2:	f7ea ff99 	bl	8000608 <__aeabi_dmul>
 80156d6:	a35c      	add	r3, pc, #368	@ (adr r3, 8015848 <atan+0x2f0>)
 80156d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156dc:	f7ea fddc 	bl	8000298 <__aeabi_dsub>
 80156e0:	4632      	mov	r2, r6
 80156e2:	463b      	mov	r3, r7
 80156e4:	f7ea ff90 	bl	8000608 <__aeabi_dmul>
 80156e8:	a359      	add	r3, pc, #356	@ (adr r3, 8015850 <atan+0x2f8>)
 80156ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ee:	f7ea fdd3 	bl	8000298 <__aeabi_dsub>
 80156f2:	4632      	mov	r2, r6
 80156f4:	463b      	mov	r3, r7
 80156f6:	f7ea ff87 	bl	8000608 <__aeabi_dmul>
 80156fa:	4602      	mov	r2, r0
 80156fc:	460b      	mov	r3, r1
 80156fe:	4640      	mov	r0, r8
 8015700:	4649      	mov	r1, r9
 8015702:	f7ea fdcb 	bl	800029c <__adddf3>
 8015706:	4622      	mov	r2, r4
 8015708:	462b      	mov	r3, r5
 801570a:	f7ea ff7d 	bl	8000608 <__aeabi_dmul>
 801570e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8015712:	4602      	mov	r2, r0
 8015714:	460b      	mov	r3, r1
 8015716:	d148      	bne.n	80157aa <atan+0x252>
 8015718:	4620      	mov	r0, r4
 801571a:	4629      	mov	r1, r5
 801571c:	f7ea fdbc 	bl	8000298 <__aeabi_dsub>
 8015720:	e72f      	b.n	8015582 <atan+0x2a>
 8015722:	4b52      	ldr	r3, [pc, #328]	@ (801586c <atan+0x314>)
 8015724:	2200      	movs	r2, #0
 8015726:	4620      	mov	r0, r4
 8015728:	4629      	mov	r1, r5
 801572a:	f7ea fdb5 	bl	8000298 <__aeabi_dsub>
 801572e:	4b4f      	ldr	r3, [pc, #316]	@ (801586c <atan+0x314>)
 8015730:	4606      	mov	r6, r0
 8015732:	460f      	mov	r7, r1
 8015734:	2200      	movs	r2, #0
 8015736:	4620      	mov	r0, r4
 8015738:	4629      	mov	r1, r5
 801573a:	f7ea fdaf 	bl	800029c <__adddf3>
 801573e:	4602      	mov	r2, r0
 8015740:	460b      	mov	r3, r1
 8015742:	4630      	mov	r0, r6
 8015744:	4639      	mov	r1, r7
 8015746:	f7eb f889 	bl	800085c <__aeabi_ddiv>
 801574a:	f04f 0a01 	mov.w	sl, #1
 801574e:	4604      	mov	r4, r0
 8015750:	460d      	mov	r5, r1
 8015752:	e765      	b.n	8015620 <atan+0xc8>
 8015754:	4b47      	ldr	r3, [pc, #284]	@ (8015874 <atan+0x31c>)
 8015756:	429e      	cmp	r6, r3
 8015758:	d21c      	bcs.n	8015794 <atan+0x23c>
 801575a:	4b47      	ldr	r3, [pc, #284]	@ (8015878 <atan+0x320>)
 801575c:	2200      	movs	r2, #0
 801575e:	4620      	mov	r0, r4
 8015760:	4629      	mov	r1, r5
 8015762:	f7ea fd99 	bl	8000298 <__aeabi_dsub>
 8015766:	4b44      	ldr	r3, [pc, #272]	@ (8015878 <atan+0x320>)
 8015768:	4606      	mov	r6, r0
 801576a:	460f      	mov	r7, r1
 801576c:	2200      	movs	r2, #0
 801576e:	4620      	mov	r0, r4
 8015770:	4629      	mov	r1, r5
 8015772:	f7ea ff49 	bl	8000608 <__aeabi_dmul>
 8015776:	4b3d      	ldr	r3, [pc, #244]	@ (801586c <atan+0x314>)
 8015778:	2200      	movs	r2, #0
 801577a:	f7ea fd8f 	bl	800029c <__adddf3>
 801577e:	4602      	mov	r2, r0
 8015780:	460b      	mov	r3, r1
 8015782:	4630      	mov	r0, r6
 8015784:	4639      	mov	r1, r7
 8015786:	f7eb f869 	bl	800085c <__aeabi_ddiv>
 801578a:	f04f 0a02 	mov.w	sl, #2
 801578e:	4604      	mov	r4, r0
 8015790:	460d      	mov	r5, r1
 8015792:	e745      	b.n	8015620 <atan+0xc8>
 8015794:	4622      	mov	r2, r4
 8015796:	462b      	mov	r3, r5
 8015798:	4938      	ldr	r1, [pc, #224]	@ (801587c <atan+0x324>)
 801579a:	2000      	movs	r0, #0
 801579c:	f7eb f85e 	bl	800085c <__aeabi_ddiv>
 80157a0:	f04f 0a03 	mov.w	sl, #3
 80157a4:	4604      	mov	r4, r0
 80157a6:	460d      	mov	r5, r1
 80157a8:	e73a      	b.n	8015620 <atan+0xc8>
 80157aa:	4b35      	ldr	r3, [pc, #212]	@ (8015880 <atan+0x328>)
 80157ac:	4e35      	ldr	r6, [pc, #212]	@ (8015884 <atan+0x32c>)
 80157ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80157b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b6:	f7ea fd6f 	bl	8000298 <__aeabi_dsub>
 80157ba:	4622      	mov	r2, r4
 80157bc:	462b      	mov	r3, r5
 80157be:	f7ea fd6b 	bl	8000298 <__aeabi_dsub>
 80157c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80157c6:	4602      	mov	r2, r0
 80157c8:	460b      	mov	r3, r1
 80157ca:	e9d6 0100 	ldrd	r0, r1, [r6]
 80157ce:	f7ea fd63 	bl	8000298 <__aeabi_dsub>
 80157d2:	f1bb 0f00 	cmp.w	fp, #0
 80157d6:	4604      	mov	r4, r0
 80157d8:	460d      	mov	r5, r1
 80157da:	f6bf aedc 	bge.w	8015596 <atan+0x3e>
 80157de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80157e2:	461d      	mov	r5, r3
 80157e4:	e6d7      	b.n	8015596 <atan+0x3e>
 80157e6:	a51c      	add	r5, pc, #112	@ (adr r5, 8015858 <atan+0x300>)
 80157e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80157ec:	e6d3      	b.n	8015596 <atan+0x3e>
 80157ee:	bf00      	nop
 80157f0:	54442d18 	.word	0x54442d18
 80157f4:	3ff921fb 	.word	0x3ff921fb
 80157f8:	8800759c 	.word	0x8800759c
 80157fc:	7e37e43c 	.word	0x7e37e43c
 8015800:	e322da11 	.word	0xe322da11
 8015804:	3f90ad3a 	.word	0x3f90ad3a
 8015808:	24760deb 	.word	0x24760deb
 801580c:	3fa97b4b 	.word	0x3fa97b4b
 8015810:	a0d03d51 	.word	0xa0d03d51
 8015814:	3fb10d66 	.word	0x3fb10d66
 8015818:	c54c206e 	.word	0xc54c206e
 801581c:	3fb745cd 	.word	0x3fb745cd
 8015820:	920083ff 	.word	0x920083ff
 8015824:	3fc24924 	.word	0x3fc24924
 8015828:	5555550d 	.word	0x5555550d
 801582c:	3fd55555 	.word	0x3fd55555
 8015830:	2c6a6c2f 	.word	0x2c6a6c2f
 8015834:	bfa2b444 	.word	0xbfa2b444
 8015838:	52defd9a 	.word	0x52defd9a
 801583c:	3fadde2d 	.word	0x3fadde2d
 8015840:	af749a6d 	.word	0xaf749a6d
 8015844:	3fb3b0f2 	.word	0x3fb3b0f2
 8015848:	fe231671 	.word	0xfe231671
 801584c:	3fbc71c6 	.word	0x3fbc71c6
 8015850:	9998ebc4 	.word	0x9998ebc4
 8015854:	3fc99999 	.word	0x3fc99999
 8015858:	54442d18 	.word	0x54442d18
 801585c:	bff921fb 	.word	0xbff921fb
 8015860:	440fffff 	.word	0x440fffff
 8015864:	7ff00000 	.word	0x7ff00000
 8015868:	3fdbffff 	.word	0x3fdbffff
 801586c:	3ff00000 	.word	0x3ff00000
 8015870:	3ff2ffff 	.word	0x3ff2ffff
 8015874:	40038000 	.word	0x40038000
 8015878:	3ff80000 	.word	0x3ff80000
 801587c:	bff00000 	.word	0xbff00000
 8015880:	08017458 	.word	0x08017458
 8015884:	08017478 	.word	0x08017478

08015888 <__ieee754_sqrt>:
 8015888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801588c:	4a68      	ldr	r2, [pc, #416]	@ (8015a30 <__ieee754_sqrt+0x1a8>)
 801588e:	ec55 4b10 	vmov	r4, r5, d0
 8015892:	43aa      	bics	r2, r5
 8015894:	462b      	mov	r3, r5
 8015896:	4621      	mov	r1, r4
 8015898:	d110      	bne.n	80158bc <__ieee754_sqrt+0x34>
 801589a:	4622      	mov	r2, r4
 801589c:	4620      	mov	r0, r4
 801589e:	4629      	mov	r1, r5
 80158a0:	f7ea feb2 	bl	8000608 <__aeabi_dmul>
 80158a4:	4602      	mov	r2, r0
 80158a6:	460b      	mov	r3, r1
 80158a8:	4620      	mov	r0, r4
 80158aa:	4629      	mov	r1, r5
 80158ac:	f7ea fcf6 	bl	800029c <__adddf3>
 80158b0:	4604      	mov	r4, r0
 80158b2:	460d      	mov	r5, r1
 80158b4:	ec45 4b10 	vmov	d0, r4, r5
 80158b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158bc:	2d00      	cmp	r5, #0
 80158be:	dc0e      	bgt.n	80158de <__ieee754_sqrt+0x56>
 80158c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80158c4:	4322      	orrs	r2, r4
 80158c6:	d0f5      	beq.n	80158b4 <__ieee754_sqrt+0x2c>
 80158c8:	b19d      	cbz	r5, 80158f2 <__ieee754_sqrt+0x6a>
 80158ca:	4622      	mov	r2, r4
 80158cc:	4620      	mov	r0, r4
 80158ce:	4629      	mov	r1, r5
 80158d0:	f7ea fce2 	bl	8000298 <__aeabi_dsub>
 80158d4:	4602      	mov	r2, r0
 80158d6:	460b      	mov	r3, r1
 80158d8:	f7ea ffc0 	bl	800085c <__aeabi_ddiv>
 80158dc:	e7e8      	b.n	80158b0 <__ieee754_sqrt+0x28>
 80158de:	152a      	asrs	r2, r5, #20
 80158e0:	d115      	bne.n	801590e <__ieee754_sqrt+0x86>
 80158e2:	2000      	movs	r0, #0
 80158e4:	e009      	b.n	80158fa <__ieee754_sqrt+0x72>
 80158e6:	0acb      	lsrs	r3, r1, #11
 80158e8:	3a15      	subs	r2, #21
 80158ea:	0549      	lsls	r1, r1, #21
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d0fa      	beq.n	80158e6 <__ieee754_sqrt+0x5e>
 80158f0:	e7f7      	b.n	80158e2 <__ieee754_sqrt+0x5a>
 80158f2:	462a      	mov	r2, r5
 80158f4:	e7fa      	b.n	80158ec <__ieee754_sqrt+0x64>
 80158f6:	005b      	lsls	r3, r3, #1
 80158f8:	3001      	adds	r0, #1
 80158fa:	02dc      	lsls	r4, r3, #11
 80158fc:	d5fb      	bpl.n	80158f6 <__ieee754_sqrt+0x6e>
 80158fe:	1e44      	subs	r4, r0, #1
 8015900:	1b12      	subs	r2, r2, r4
 8015902:	f1c0 0420 	rsb	r4, r0, #32
 8015906:	fa21 f404 	lsr.w	r4, r1, r4
 801590a:	4323      	orrs	r3, r4
 801590c:	4081      	lsls	r1, r0
 801590e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015912:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8015916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801591a:	07d2      	lsls	r2, r2, #31
 801591c:	bf5c      	itt	pl
 801591e:	005b      	lslpl	r3, r3, #1
 8015920:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8015924:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015928:	bf58      	it	pl
 801592a:	0049      	lslpl	r1, r1, #1
 801592c:	2600      	movs	r6, #0
 801592e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8015932:	106d      	asrs	r5, r5, #1
 8015934:	0049      	lsls	r1, r1, #1
 8015936:	2016      	movs	r0, #22
 8015938:	4632      	mov	r2, r6
 801593a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801593e:	1917      	adds	r7, r2, r4
 8015940:	429f      	cmp	r7, r3
 8015942:	bfde      	ittt	le
 8015944:	193a      	addle	r2, r7, r4
 8015946:	1bdb      	suble	r3, r3, r7
 8015948:	1936      	addle	r6, r6, r4
 801594a:	0fcf      	lsrs	r7, r1, #31
 801594c:	3801      	subs	r0, #1
 801594e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015952:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015956:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801595a:	d1f0      	bne.n	801593e <__ieee754_sqrt+0xb6>
 801595c:	4604      	mov	r4, r0
 801595e:	2720      	movs	r7, #32
 8015960:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015964:	429a      	cmp	r2, r3
 8015966:	eb00 0e0c 	add.w	lr, r0, ip
 801596a:	db02      	blt.n	8015972 <__ieee754_sqrt+0xea>
 801596c:	d113      	bne.n	8015996 <__ieee754_sqrt+0x10e>
 801596e:	458e      	cmp	lr, r1
 8015970:	d811      	bhi.n	8015996 <__ieee754_sqrt+0x10e>
 8015972:	f1be 0f00 	cmp.w	lr, #0
 8015976:	eb0e 000c 	add.w	r0, lr, ip
 801597a:	da42      	bge.n	8015a02 <__ieee754_sqrt+0x17a>
 801597c:	2800      	cmp	r0, #0
 801597e:	db40      	blt.n	8015a02 <__ieee754_sqrt+0x17a>
 8015980:	f102 0801 	add.w	r8, r2, #1
 8015984:	1a9b      	subs	r3, r3, r2
 8015986:	458e      	cmp	lr, r1
 8015988:	bf88      	it	hi
 801598a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801598e:	eba1 010e 	sub.w	r1, r1, lr
 8015992:	4464      	add	r4, ip
 8015994:	4642      	mov	r2, r8
 8015996:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801599a:	3f01      	subs	r7, #1
 801599c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80159a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80159a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80159a8:	d1dc      	bne.n	8015964 <__ieee754_sqrt+0xdc>
 80159aa:	4319      	orrs	r1, r3
 80159ac:	d01b      	beq.n	80159e6 <__ieee754_sqrt+0x15e>
 80159ae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8015a34 <__ieee754_sqrt+0x1ac>
 80159b2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8015a38 <__ieee754_sqrt+0x1b0>
 80159b6:	e9da 0100 	ldrd	r0, r1, [sl]
 80159ba:	e9db 2300 	ldrd	r2, r3, [fp]
 80159be:	f7ea fc6b 	bl	8000298 <__aeabi_dsub>
 80159c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80159c6:	4602      	mov	r2, r0
 80159c8:	460b      	mov	r3, r1
 80159ca:	4640      	mov	r0, r8
 80159cc:	4649      	mov	r1, r9
 80159ce:	f7eb f897 	bl	8000b00 <__aeabi_dcmple>
 80159d2:	b140      	cbz	r0, 80159e6 <__ieee754_sqrt+0x15e>
 80159d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80159d8:	e9da 0100 	ldrd	r0, r1, [sl]
 80159dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80159e0:	d111      	bne.n	8015a06 <__ieee754_sqrt+0x17e>
 80159e2:	3601      	adds	r6, #1
 80159e4:	463c      	mov	r4, r7
 80159e6:	1072      	asrs	r2, r6, #1
 80159e8:	0863      	lsrs	r3, r4, #1
 80159ea:	07f1      	lsls	r1, r6, #31
 80159ec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80159f0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80159f4:	bf48      	it	mi
 80159f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80159fa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80159fe:	4618      	mov	r0, r3
 8015a00:	e756      	b.n	80158b0 <__ieee754_sqrt+0x28>
 8015a02:	4690      	mov	r8, r2
 8015a04:	e7be      	b.n	8015984 <__ieee754_sqrt+0xfc>
 8015a06:	f7ea fc49 	bl	800029c <__adddf3>
 8015a0a:	e9da 8900 	ldrd	r8, r9, [sl]
 8015a0e:	4602      	mov	r2, r0
 8015a10:	460b      	mov	r3, r1
 8015a12:	4640      	mov	r0, r8
 8015a14:	4649      	mov	r1, r9
 8015a16:	f7eb f869 	bl	8000aec <__aeabi_dcmplt>
 8015a1a:	b120      	cbz	r0, 8015a26 <__ieee754_sqrt+0x19e>
 8015a1c:	1ca0      	adds	r0, r4, #2
 8015a1e:	bf08      	it	eq
 8015a20:	3601      	addeq	r6, #1
 8015a22:	3402      	adds	r4, #2
 8015a24:	e7df      	b.n	80159e6 <__ieee754_sqrt+0x15e>
 8015a26:	1c63      	adds	r3, r4, #1
 8015a28:	f023 0401 	bic.w	r4, r3, #1
 8015a2c:	e7db      	b.n	80159e6 <__ieee754_sqrt+0x15e>
 8015a2e:	bf00      	nop
 8015a30:	7ff00000 	.word	0x7ff00000
 8015a34:	20000268 	.word	0x20000268
 8015a38:	20000260 	.word	0x20000260

08015a3c <_init>:
 8015a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a3e:	bf00      	nop
 8015a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a42:	bc08      	pop	{r3}
 8015a44:	469e      	mov	lr, r3
 8015a46:	4770      	bx	lr

08015a48 <_fini>:
 8015a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a4a:	bf00      	nop
 8015a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a4e:	bc08      	pop	{r3}
 8015a50:	469e      	mov	lr, r3
 8015a52:	4770      	bx	lr
